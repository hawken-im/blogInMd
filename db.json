{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_drafts/.DS_Store","hash":"9241fa577639406eb460e61fa4f267d7b5d5b4e6","modified":1642207762660},{"_id":"source/.DS_Store","hash":"7bae3613b7d45c544a15391da442ba51455ba1c7","modified":1649237362367},{"_id":"source/_drafts/Why-Python？.md","hash":"8d2dbda46e9fdb161ab2c9b7bcfd3fad3f12def5","modified":1627571828287},{"_id":"source/_drafts/产品经理学习笔记.md","hash":"83af0bb6a297a49fb7e40adc2aef777152b7e178","modified":1627571828290},{"_id":"source/_drafts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1627311536340},{"_id":"source/_drafts/我的技能树.md","hash":"c36f8c9e69d1e9abcee0ed3195d40f2ffcc3896d","modified":1627571828292},{"_id":"source/_posts/.DS_Store","hash":"07f7405e58b5f0cc09d143b416bae4f026d2db83","modified":1649237362368},{"_id":"source/_posts/After-I-figured-out-docker-I-use-this-tutorial-for-installing-shadowsocks-on-my-server.md","hash":"74a9c7003c919a5c8fa6770e2cd741fa745646eb","modified":1627571828219},{"_id":"source/_posts/Each-time-I-try-to-use-mosh-it-asks-me-to-export-LANG-settings.md","hash":"1ea6d1e8e5cb5c548c9a4dffaf55049da5b7d7bd","modified":1627571828225},{"_id":"source/_posts/Dive-into-Docker-Not-every-image-is-using-the-bash-shell.md","hash":"12b0013bbc21a629a3268c450d6b5d61fc67ab83","modified":1627571828214},{"_id":"source/_posts/Go语言写的进度条bot-1.md","hash":"3d51a2ae13757fe027293f3d9fe02cfa6f28e321","modified":1645632970284},{"_id":"source/_posts/Go语言写的进度条bot-2.md","hash":"9fc36acd64360cce799c8ee0b88266e6105b9c9f","modified":1645632983719},{"_id":"source/_posts/Go语言写的进度条bot-3.md","hash":"7f54a1a576748c8402f94cead45d7359bb2c1127","modified":1646062364929},{"_id":"source/_posts/SSH创建密钥登陆远程服务器.md","hash":"7de80b1c34cb360f9c53cfce80379db6e3103402","modified":1627571828276},{"_id":"source/_posts/Go语言写的进度条bot.md","hash":"d8d347aa8ab718a57854a9d3431577cd4f193367","modified":1645094149811},{"_id":"source/_posts/This-instruction-for-install-docker-is-better-than-the-official-docs.md","hash":"ab37714f9970c212abdb3b8cfdbbda226a7b049c","modified":1627571828223},{"_id":"source/_posts/Setting-up-another-Mosh-for-my-another-server-lol-o0o-lol.md","hash":"ffb33ae321e09fbcd141018435f4d8411019fb0a","modified":1627571828229},{"_id":"source/_posts/Nginx-and-Certbot-to-build-a-server-to-support-multiple-web-sites.md","hash":"718c55eb4073504f73a58b7d9e524cc3bde7cf5d","modified":1627809633065},{"_id":"source/_posts/MAC-osx-永久设置zsh的locale为en-US-UTF-8.md","hash":"6d1de76cb35ed8849ddede8dc32298a72f858c6b","modified":1627571828241},{"_id":"source/_posts/how-to-fix-apt-get.md","hash":"0056b03467ef89db1b6ef673cef1427ae56c7c65","modified":1627571828231},{"_id":"source/_posts/Untitled-Post-1.md","hash":"c2cbafc1609cadc52f6db3d24b1dd29a92e53060","modified":1627571828250},{"_id":"source/_posts/givemeback.md","hash":"0682b21e336d86186a61f5b4daa8a7bd9212181e","modified":1656611441681},{"_id":"source/_posts/learning-go.md","hash":"75d3a8aae61d758a9f94d40080550683ae2479ab","modified":1643937757087},{"_id":"source/_posts/kindledownload.md","hash":"648c7d6a6b78c75b645736ad30b4ac0301911db5","modified":1655656445877},{"_id":"source/_posts/NotesOfLearningGo.md","hash":"4b54c972f1ff86aa704c6bd363f801c85f580da0","modified":1637477171600},{"_id":"source/_posts/itsgettingbadorbetter.md","hash":"d42b014eae9527b8645cafb5c9f416012234e437","modified":1658339181827},{"_id":"source/_posts/关于终身学习.md","hash":"32ebde9e7dba018240ce59b37d907c1054a48d4b","modified":1627571828283},{"_id":"source/_posts/一个交互小问题.md","hash":"6c05d5500d30488e15bc4324ed67ba1756bcc153","modified":1627571828284},{"_id":"source/_posts/test.md","hash":"ecd96cb0530080d5b5a2a42d5053b183d0d313af","modified":1627550264602},{"_id":"source/_posts/在ubuntu上安装python3-8-2.md","hash":"3fb8a569bd1ad7a8d297d08f18017cf5ad653521","modified":1627571828262},{"_id":"source/_posts/run-quorum-on-ubuntu.md","hash":"586ce8ba191dc4f04d61a06fa1d3d9e37a39bf63","modified":1644744034601},{"_id":"source/_posts/工作稍微空闲继续搞机.md","hash":"fa583539b3bf95ca0be10d6392d38e3dec7aa65f","modified":1627571828279},{"_id":"source/_posts/开始部署，简单记录一下.md","hash":"5a4fcf0787380e09838e6fb2814db7b1bc6b96d2","modified":1627571828235},{"_id":"source/_posts/开始一边学一边用Python-Flask.md","hash":"af10ae15fef43e5f37c92b55f808360b3401738b","modified":1627571828265},{"_id":"source/_posts/测试我的图床.md","hash":"e74704de50e6e14bc09c5bdb37e51e8aad145040","modified":1627571828271},{"_id":"source/_posts/搭建FTP服务器.md","hash":"a1c3ecd5a172d4ba3bd0b5c1f5683cc33a55fda9","modified":1627571828272},{"_id":"source/_posts/用SSH来操作github.md","hash":"773fbbcc61e9ccd3f849d84f19f1933c90b911b8","modified":1627571828267},{"_id":"source/_posts/登海外的服务器太慢了所以又装了个Mosh.md","hash":"92bc9c4af1d1ee530e7a7141a55d81483bb06072","modified":1627571828255},{"_id":"source/_posts/元宇宙三问.md","hash":"50ac98bb319ada44b5ed08e02f19b02474489f5a","modified":1642478781735},{"_id":"source/_posts/敏捷学习方法.md","hash":"1e0979c864fa64189f71537715a3cb77437d63a9","modified":1646306096483},{"_id":"source/_posts/继续设置了ssl-certificate.md","hash":"bb469de220f31556a7ec2be4ed67daa273e6d5a5","modified":1627571828245},{"_id":"source/_posts/给服务器开通BBR.md","hash":"5a76fb405e564080077c8309b48215c9019be8ee","modified":1627571828269},{"_id":"source/_posts/采用zsh作为mac的默认shell.md","hash":"e6e0f6ba4f92694482e2c264917309f3e0dc79cb","modified":1627571828274},{"_id":"source/_posts/.obsidian/core-plugins.json","hash":"072341e5a074625ec8b265787004641393a046de","modified":1642173936181},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1642178870005},{"_id":"source/_posts/.obsidian/appearance.json","hash":"b017a0a713aed43620fea6ef13e8164a18169702","modified":1642175402536},{"_id":"source/_posts/.obsidian/app.json","hash":"a84dfbc0f08d580af3051b63a4326bef300ec2fd","modified":1642175402534},{"_id":"source/_posts/.obsidian/workspace","hash":"e707ee35184c67385bc6b41366926179a38f221e","modified":1642180099604},{"_id":"source/_posts/Go语言写的进度条bot/author_danicat.png","hash":"0cab93558511bd381561cb72acc62d4f2247ffe9","modified":1643945293286},{"_id":"source/_posts/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1642173932544},{"_id":"source/_posts/Go语言写的进度条bot-1/blocks.png","hash":"d6fb7d0f67c8df5d7b44dba913a8e38266bcffee","modified":1644023653501},{"_id":"source/_posts/Go语言写的进度条bot/portnumber.png","hash":"cce4d20f725eb3e7b3ee82c9ab40c9e241fd2978","modified":1644810216989},{"_id":"source/_posts/itsgettingbadorbetter/homo.png","hash":"0ef42a9eda65d640f8c1810e7dac627d79775346","modified":1654800682574},{"_id":"source/_posts/itsgettingbadorbetter/sd2.jpg","hash":"51b7bef2271feb666771c4c109d6547327581232","modified":1654798609207},{"_id":"source/_posts/itsgettingbadorbetter/sd3.jpg","hash":"638735238372958ffdf76583b8a39d0388ab6bbe","modified":1654798629601},{"_id":"source/_posts/kindledownload/setlocation.png","hash":"bd91e2382652919bbacd9cf5b1c5eab8522c3a28","modified":1655653868226},{"_id":"source/_posts/run-quorum-on-ubuntu/dist.png","hash":"14a20f615138cc72502dbb1bd976319b8361534c","modified":1642299015673},{"_id":"source/_posts/run-quorum-on-ubuntu/green.png","hash":"cca99cceb7441b539860d321cb8c524f23afe8ed","modified":1642301901877},{"_id":"source/_posts/run-quorum-on-ubuntu/ScreenShot.png","hash":"44bade57c247c2ac65382a32eded0cfb51a2ac9a","modified":1642175227944},{"_id":"source/_posts/run-quorum-on-ubuntu/go.png","hash":"124e816192ca0eb9ce54dffc03091dd7c059b6ac","modified":1642179523601},{"_id":"source/_posts/run-quorum-on-ubuntu/outterpeer.png","hash":"0699b29d0bb031f9d293dd23eb63b49aef36c112","modified":1642301544808},{"_id":"source/_posts/run-quorum-on-ubuntu/peerinfo.png","hash":"c6fdc600d9b15cb42a4178495acc6e9c50b2aa7c","modified":1642301825347},{"_id":"source/_posts/run-quorum-on-ubuntu/successed.png","hash":"57a45610c34b557a3496918c01e97e57664d6415","modified":1642301411908},{"_id":"source/_posts/敏捷学习方法/4.jpg","hash":"c4aa8ef9d5b5fecbc66cedcd666030eeea11f1ac","modified":1646305833280},{"_id":"source/_posts/敏捷学习方法/5.jpg","hash":"75ea77f326e9da7b0b009df7acb0f9d74ca14f4a","modified":1646305874202},{"_id":"source/_posts/Go语言写的进度条bot/groupID.png","hash":"6b0823329354b2eb5d664efc3f7dcaf434afdec5","modified":1645092408435},{"_id":"source/_posts/Go语言写的进度条bot-3/struct.png","hash":"8bd52fc3b1ce8dba1f78b93ccea4adb3e90b7ea5","modified":1646018629887},{"_id":"source/_posts/Go语言写的进度条bot-3/struct copy.png","hash":"8bd52fc3b1ce8dba1f78b93ccea4adb3e90b7ea5","modified":1646018629887},{"_id":"source/_posts/itsgettingbadorbetter/hand.jpg","hash":"bfa75c76c9d0c4421caadb1616bde3044cdb2603","modified":1654798563102},{"_id":"source/_posts/itsgettingbadorbetter/lsk2.jpg","hash":"68488f7c133514321d5e3c77103eebae56275db5","modified":1654792652951},{"_id":"source/_posts/kindledownload/input.png","hash":"09d88ef2a39795044abe9c8b59d62d2806d24243","modified":1655653868200},{"_id":"source/_posts/kindledownload/guifiles.png","hash":"9df80c9d82f1f26432e10dd1cd04c8479737331f","modified":1655653868268},{"_id":"source/_posts/敏捷学习方法/0.png","hash":"c9141993e0c6c48d99e32dd8903f36733b2601be","modified":1646305698545},{"_id":"source/_posts/敏捷学习方法/1.png","hash":"e043926d9bbe76367ad1104d8a7c95de3a449e6e","modified":1646305438801},{"_id":"source/_posts/敏捷学习方法/2.png","hash":"00d6bc99bb70a972e70eb46a7011ad31a1e3901c","modified":1646305519530},{"_id":"source/_posts/敏捷学习方法/3.png","hash":"e09ca09dab79a62e4492eba15bb9ffa49dcb85b1","modified":1646305565908},{"_id":"source/_posts/itsgettingbadorbetter/dingjinhao.jpg","hash":"b5770f877ea3c5ff23d1aab339eb09c1ff0e168a","modified":1654799080781},{"_id":"source/_posts/kindledownload/cookie.png","hash":"9ea7cb422e45c5bc6a0fa3b188f3fdd9a7a75f30","modified":1655653868100},{"_id":"source/_posts/itsgettingbadorbetter/timeline.jpg","hash":"d49965c1d16815a0e98efecdfe16b1a1e2110d92","modified":1655105597749},{"_id":"source/_posts/kindledownload/cookievalue.png","hash":"6aed13f07860fbcfec4d736982b5cdb9b1ecf343","modified":1655653868057},{"_id":"source/_posts/kindledownload/neatconverter.png","hash":"00da8c2a6ddda9b123249c5772abed028d30c5c4","modified":1655653868136},{"_id":"source/_posts/敏捷学习方法/7.png","hash":"d51004edf1897894667b958707616e0f9af1d1a8","modified":1646305936604},{"_id":"source/_posts/敏捷学习方法/8.jpg","hash":"656fc2900feb80d84652bd5f2b9cb7689b176b03","modified":1646305967685},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1627311536338},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1627311536338},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1627311536338},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1627311536338},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1627311536339},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1627311536339},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1627311536340},{"_id":"themes/landscape/_config.yml","hash":"a26314031ae1e5a22e91825c93b0e16cdefed2d0","modified":1628271761791},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1627311536340},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1627311536340},{"_id":"themes/landscape/.DS_Store","hash":"a252584c808ea50979268df6f963d4efe6ca7532","modified":1649237362366},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1627311536340},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1627311536340},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1627311536340},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1627311536341},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1627311536342},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1627311536341},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1627311536341},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1627311536339},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1627311536342},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1627311536341},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1627311536342},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1627311536340},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1627311536342},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1627311536342},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1627311536342},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1627311536342},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1627311536343},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1627311536344},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1627311536344},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1627311536344},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1627311536344},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1627311536345},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1627311536345},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1627311536345},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1627311536345},{"_id":"themes/landscape/source/.DS_Store","hash":"e18d244030f75a56eb6ecf67129689172a9fad46","modified":1658340228155},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1627311536345},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1627311536343},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"bf4a57406c970060a47aa413cd24e7d84063ef8d","modified":1628271814317},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1627311536343},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1627311536343},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1627311536344},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1627311536344},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1627311536347},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1627311536348},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1627311536347},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1627311536348},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1627311536348},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1627311536348},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1627311536348},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1627311536348},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1627311536349},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1627311536348},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1627311536347},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1627311536346},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1627311536349},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1627311536346},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1627311536346},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1627311536346},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1627311536346},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1627311536347},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1627311536350},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1627311536347},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1627311536349},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1627311536350},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1627311536350},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"2c722a5fbef8695c4e05851eac03220ce7ced264","modified":1628272483706},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1627311536351},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1627311536351},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1627311536351},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1627311536351},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1627311536351},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1627311536349},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1627311536351},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1627311536350},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1627311536353},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1627311536347},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1627311536353},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1627311536353},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1627311536353},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1627311536354},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1627311536353},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1627311536354},{"_id":"source/_posts/kindledownload/network.png","hash":"51e4c87dfffdbfee216da092eab3c1881e41866f","modified":1655653867845},{"_id":"source/_posts/敏捷学习方法/6.jpg","hash":"cc086927244058e7f70367089c3226e999c67663","modified":1646305905931},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1627311536353},{"_id":"source/_posts/itsgettingbadorbetter/lsk1.jpg","hash":"0599dd262b18a056bf29da3080d38cd1261fa582","modified":1654792648690},{"_id":"source/_posts/kindledownload/credit.png","hash":"4f9ea8c4c2e6697bc9e1d56d851dc86b7e21ce3d","modified":1655654703866},{"_id":"source/_posts/kindledownload/csrf.png","hash":"a2cf06b06479d6d831fa09134e7c7436c491d1f3","modified":1655653868020},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1627311536354},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1627311536352},{"_id":"source/_posts/itsgettingbadorbetter/yxp.jpg","hash":"d732f0297118dc533e84b1b7bfd3e255c715feb0","modified":1655106677919},{"_id":"source/_posts/kindledownload/f122.png","hash":"cbfbbd9a0bffad81362ee98f40ce163296e570c9","modified":1655653867957},{"_id":"themes/landscape/source/favicon.png","hash":"11163187edb4fd1cacec1c642fd989bffe2c2085","modified":1628332538000},{"_id":"source/_posts/kindledownload/steps.png","hash":"79e5069a54df54406b8a8cb103aebe1a9d120848","modified":1655653868171},{"_id":"source/_posts/itsgettingbadorbetter/road.png","hash":"aa64e55cedf9ad5f45326829f12245691e8b05fb","modified":1654800182032},{"_id":"source/_posts/kindledownload/f12.jpg","hash":"8c24e0eb4df46b5a66bd9797aa50c18a08833b61","modified":1655653867895},{"_id":"source/_posts/itsgettingbadorbetter/qrp.png","hash":"757cd03259c0a4a35e48d7cc3fe935403a1d0fe0","modified":1655107379620},{"_id":"source/_posts/itsgettingbadorbetter/lesson1.png","hash":"3ebcb33d65b08e12ce52e2a5f0b96c531a2bd47d","modified":1654799750825},{"_id":"public/2022/06/19/kindledownload/index.html","hash":"3836dc361fffa7da8f1febe48f9fce73036a49a2","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/index.html","hash":"a3e4731c895cb9adf817961d245b531b9112b654","modified":1658340983223},{"_id":"public/2022/01/22/learning-go/index.html","hash":"239be2ed010ed747cd48f8a1bf8ff7770f41aeb7","modified":1658340983223},{"_id":"public/2021/11/19/NotesOfLearningGo/index.html","hash":"42d2b75aa0b60f6a86b2f61eeb88080956ed9c38","modified":1658340983223},{"_id":"public/2021/08/01/Nginx-and-Certbot-to-build-a-server-to-support-multiple-web-sites/index.html","hash":"feca9051c51fd3bc4aa8525964f5079611cece0b","modified":1658340983223},{"_id":"public/2021/07/29/test/index.html","hash":"b4bf4d35174ff03c107e9d435ef2c76c9ce5f6c9","modified":1658340983223},{"_id":"public/2021/05/18/Dive-into-Docker-Not-every-image-is-using-the-bash-shell/index.html","hash":"326ba7e5640f82e3342d1c6d766fc2138aa8fdf1","modified":1658340983223},{"_id":"public/2021/05/15/After-I-figured-out-docker-I-use-this-tutorial-for-installing-shadowsocks-on-my-server/index.html","hash":"cb74dc3b81187fa0e7c5e6908602b02bb35715a0","modified":1658340983223},{"_id":"public/2021/05/15/This-instruction-for-install-docker-is-better-than-the-official-docs/index.html","hash":"daf66afc6ed603a54b49a6218683d37387e62a1e","modified":1658340983223},{"_id":"public/2021/05/13/Each-time-I-try-to-use-mosh-it-asks-me-to-export-LANG-settings/index.html","hash":"1ac17a5b226e5077da61ae518888dc2ec132f594","modified":1658340983223},{"_id":"public/2021/05/13/Setting-up-another-Mosh-for-my-another-server-lol-o0o-lol/index.html","hash":"a788d6bd0be8528675440fc37cdc32e09735b538","modified":1658340983223},{"_id":"public/2021/05/13/how-to-fix-apt-get/index.html","hash":"855d3cd058302cb7edc81c31d92082753a12752e","modified":1658340983223},{"_id":"public/2021/01/15/开始部署，简单记录一下/index.html","hash":"4e0053f56c68afa2234c8936a4566bbacef8add4","modified":1658340983223},{"_id":"public/2021/01/15/MAC-osx-永久设置zsh的locale为en-US-UTF-8/index.html","hash":"c996de03827e50996dd7aeab6dd2fb6ada70cd12","modified":1658340983223},{"_id":"public/2020/03/20/继续设置了ssl-certificate/index.html","hash":"7e89f874c298d5721c62e68caca400d3cb6c0005","modified":1658340983223},{"_id":"public/2020/03/20/Untitled-Post-1/index.html","hash":"cb703b4c810127abb528bcd8f18cbd7ba327b1c7","modified":1658340983223},{"_id":"public/2020/03/10/登海外的服务器太慢了所以又装了个Mosh/index.html","hash":"5c41866ee76948bc9f9c4bbe388a267c9e4b01aa","modified":1658340983223},{"_id":"public/2020/03/10/在ubuntu上安装python3-8-2/index.html","hash":"d7336899709d8afd195e81ba230762710c000dfc","modified":1658340983223},{"_id":"public/2020/03/10/开始一边学一边用Python-Flask/index.html","hash":"0c825cc504eb212e17cb87eee0fec2c9f2d56e17","modified":1658340983223},{"_id":"public/2019/12/14/用SSH来操作github/index.html","hash":"907ebcb9241fa1cd621ae9f6df668e4821847e0b","modified":1658340983223},{"_id":"public/2019/12/14/给服务器开通BBR/index.html","hash":"f34ea53df87cb659310d8d2f72345311aa112414","modified":1658340983223},{"_id":"public/2019/11/26/测试我的图床/index.html","hash":"982e4e9d4b8a0d6153aff16eb81df3dd3119a253","modified":1658340983223},{"_id":"public/2019/11/26/搭建FTP服务器/index.html","hash":"edf3f150f0b63a39f02cf824849f312e79dfb8e6","modified":1658340983223},{"_id":"public/2019/11/24/采用zsh作为mac的默认shell/index.html","hash":"076bf9efb74e2a5675d0e9fb8ebf39a44430c017","modified":1658340983223},{"_id":"public/2019/11/24/SSH创建密钥登陆远程服务器/index.html","hash":"a7bc85f4e484035fe3370beb9164a005b0eb3a74","modified":1658340983223},{"_id":"public/2019/11/22/工作稍微空闲继续搞机/index.html","hash":"81103a442b7a8e0d92e5c10ed2abe678454da479","modified":1658340983223},{"_id":"public/2019/11/22/关于终身学习/index.html","hash":"862b490aa756fd68b10af54ea4f6ac082885a6f3","modified":1658340983223},{"_id":"public/2019/11/04/一个交互小问题/index.html","hash":"12304113536664ac758e3a782b15076fc0a666ea","modified":1658340983223},{"_id":"public/archives/index.html","hash":"eda7a049962ec92e12da0e276a664e0220eb0f17","modified":1658340983223},{"_id":"public/archives/page/2/index.html","hash":"f089a110cbfced640be23b1b7bda384ea9207907","modified":1658340983223},{"_id":"public/archives/page/3/index.html","hash":"1b6b0cb1fd418115d24447ef27c7fcb390843b2b","modified":1658340983223},{"_id":"public/archives/page/4/index.html","hash":"254c3259b81e39e471f4ec2afc5e4081d9332d3b","modified":1658340983223},{"_id":"public/archives/2019/index.html","hash":"46f3a49b64256667b8237fcdaf7407e70d56a37a","modified":1658340983223},{"_id":"public/archives/2019/11/index.html","hash":"a6ff40b62a279fb01c4ff20ca8701845dc219b6b","modified":1658340983223},{"_id":"public/archives/2019/12/index.html","hash":"80cecda2d883fb639daaded6da1c36a6ba1e8c19","modified":1658340983223},{"_id":"public/archives/2020/index.html","hash":"d872804a897deec256d998bc9251e61009e7f511","modified":1658340983223},{"_id":"public/archives/2020/03/index.html","hash":"03a26537dfb8a948ad4c3d05345b02a23115e9de","modified":1658340983223},{"_id":"public/archives/2021/index.html","hash":"28ef0995213a420244c708f8a6fef530ac8f8b76","modified":1658340983223},{"_id":"public/archives/2021/page/2/index.html","hash":"c653cca2d006daeec4e06aa2c4a6ca33aaa4cc86","modified":1658340983223},{"_id":"public/archives/2021/01/index.html","hash":"f8d5f2062479646dda063532f6e202f45a4408b1","modified":1658340983223},{"_id":"public/archives/2021/05/index.html","hash":"e27360932e45de60b0c44d9f3c3f615d6577f553","modified":1658340983223},{"_id":"public/archives/2021/07/index.html","hash":"938d96b5469450759269b75712462996d3d7a401","modified":1658340983223},{"_id":"public/archives/2021/08/index.html","hash":"1efdf74e94c823af9166fd25cf484fc779cfb47e","modified":1658340983223},{"_id":"public/archives/2021/11/index.html","hash":"243702c78dd07a125418f7981337c54fe29b5aba","modified":1658340983223},{"_id":"public/archives/2022/index.html","hash":"198f07fcb9500e292afbab88d598c9aebaf623cf","modified":1658340983223},{"_id":"public/archives/2022/01/index.html","hash":"8bbbe5d647ff50ba6910f42cf896f37c0e0dad01","modified":1658340983223},{"_id":"public/archives/2022/02/index.html","hash":"67e1797e2be84df43fd6c91d703508ff6a93097b","modified":1658340983223},{"_id":"public/archives/2022/03/index.html","hash":"9bfaf9425b352f9b455e4e3165aa6f1b1787636b","modified":1658340983223},{"_id":"public/archives/2022/06/index.html","hash":"50a04a926bcf19ee405f2ffcf917ff17be2be91b","modified":1658340983223},{"_id":"public/page/4/index.html","hash":"87af0c12ad07364bb458d9aa28a4a5db3bd106bf","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/index.html","hash":"3e1230430d8df417e2de1287b5e3a38f12d3f434","modified":1658340983223},{"_id":"public/2022/02/20/Go语言写的进度条bot-2/index.html","hash":"2016e0ec00206c49035b7261d6de8e1c77f91a2b","modified":1658340983223},{"_id":"public/2022/02/24/Go语言写的进度条bot-3/index.html","hash":"a0a00bcf2fa83a033241fe6f8916e09674c64d59","modified":1658340983223},{"_id":"public/2022/02/17/Go语言写的进度条bot-1/index.html","hash":"6e86d64562d598d8b196c3ebb88299b6ca478fbc","modified":1658340983223},{"_id":"public/2022/02/04/Go语言写的进度条bot/index.html","hash":"d9383969d5041427b5c1c7dd8b94fa99235411df","modified":1658340983223},{"_id":"public/2022/01/15/run-quorum-on-ubuntu/index.html","hash":"b677637a4ef978f38b7088ef60e36e96f7243b25","modified":1658340983223},{"_id":"public/2021/11/12/元宇宙三问/index.html","hash":"39cce01a06e43b0faa8740c7bef0fad01f32a052","modified":1658340983223},{"_id":"public/index.html","hash":"4ad8992ee46b2b4bc71c2222a307d05d7003c0f9","modified":1658340983223},{"_id":"public/page/2/index.html","hash":"ed8d9e7bb2b8aa52c192c576fb69e7e34cc4654f","modified":1658340983223},{"_id":"public/page/3/index.html","hash":"c232459c00a200fe411d0a833c85d413cfba8eba","modified":1658340983223},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1658340983223},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1658340983223},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1658340983223},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1658340983223},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1658340983223},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1658340983223},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1658340983223},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1658340983223},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1658340983223},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1658340983223},{"_id":"public/2022/02/17/Go语言写的进度条bot-1/blocks.png","hash":"d6fb7d0f67c8df5d7b44dba913a8e38266bcffee","modified":1658340983223},{"_id":"public/2022/02/04/Go语言写的进度条bot/portnumber.png","hash":"cce4d20f725eb3e7b3ee82c9ab40c9e241fd2978","modified":1658340983223},{"_id":"public/2022/02/04/Go语言写的进度条bot/author_danicat.png","hash":"0cab93558511bd381561cb72acc62d4f2247ffe9","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/homo.png","hash":"0ef42a9eda65d640f8c1810e7dac627d79775346","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/sd2.jpg","hash":"51b7bef2271feb666771c4c109d6547327581232","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/sd3.jpg","hash":"638735238372958ffdf76583b8a39d0388ab6bbe","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/setlocation.png","hash":"bd91e2382652919bbacd9cf5b1c5eab8522c3a28","modified":1658340983223},{"_id":"public/2022/01/15/run-quorum-on-ubuntu/ScreenShot.png","hash":"44bade57c247c2ac65382a32eded0cfb51a2ac9a","modified":1658340983223},{"_id":"public/2022/01/15/run-quorum-on-ubuntu/dist.png","hash":"14a20f615138cc72502dbb1bd976319b8361534c","modified":1658340983223},{"_id":"public/2022/01/15/run-quorum-on-ubuntu/go.png","hash":"124e816192ca0eb9ce54dffc03091dd7c059b6ac","modified":1658340983223},{"_id":"public/2022/01/15/run-quorum-on-ubuntu/peerinfo.png","hash":"c6fdc600d9b15cb42a4178495acc6e9c50b2aa7c","modified":1658340983223},{"_id":"public/2022/01/15/run-quorum-on-ubuntu/successed.png","hash":"57a45610c34b557a3496918c01e97e57664d6415","modified":1658340983223},{"_id":"public/2022/01/15/run-quorum-on-ubuntu/outterpeer.png","hash":"0699b29d0bb031f9d293dd23eb63b49aef36c112","modified":1658340983223},{"_id":"public/2022/01/15/run-quorum-on-ubuntu/green.png","hash":"cca99cceb7441b539860d321cb8c524f23afe8ed","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/4.jpg","hash":"c4aa8ef9d5b5fecbc66cedcd666030eeea11f1ac","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/5.jpg","hash":"75ea77f326e9da7b0b009df7acb0f9d74ca14f4a","modified":1658340983223},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1658340983223},{"_id":"public/2022/02/24/Go语言写的进度条bot-3/struct.png","hash":"8bd52fc3b1ce8dba1f78b93ccea4adb3e90b7ea5","modified":1658340983223},{"_id":"public/2022/02/24/Go语言写的进度条bot-3/struct copy.png","hash":"8bd52fc3b1ce8dba1f78b93ccea4adb3e90b7ea5","modified":1658340983223},{"_id":"public/2022/02/04/Go语言写的进度条bot/groupID.png","hash":"6b0823329354b2eb5d664efc3f7dcaf434afdec5","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/hand.jpg","hash":"bfa75c76c9d0c4421caadb1616bde3044cdb2603","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/lsk2.jpg","hash":"68488f7c133514321d5e3c77103eebae56275db5","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/guifiles.png","hash":"9df80c9d82f1f26432e10dd1cd04c8479737331f","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/input.png","hash":"09d88ef2a39795044abe9c8b59d62d2806d24243","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/1.png","hash":"e043926d9bbe76367ad1104d8a7c95de3a449e6e","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/3.png","hash":"e09ca09dab79a62e4492eba15bb9ffa49dcb85b1","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/0.png","hash":"c9141993e0c6c48d99e32dd8903f36733b2601be","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/2.png","hash":"00d6bc99bb70a972e70eb46a7011ad31a1e3901c","modified":1658340983223},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1658340983223},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1658340983223},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1658340983223},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1658340983223},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1658340983223},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1658340983223},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1658340983223},{"_id":"public/css/style.css","hash":"d0517d9422eb9a966bd8ee124ae6496f366910b2","modified":1658340983223},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1658340983223},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/cookie.png","hash":"9ea7cb422e45c5bc6a0fa3b188f3fdd9a7a75f30","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/timeline.jpg","hash":"d49965c1d16815a0e98efecdfe16b1a1e2110d92","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/dingjinhao.jpg","hash":"b5770f877ea3c5ff23d1aab339eb09c1ff0e168a","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/cookievalue.png","hash":"6aed13f07860fbcfec4d736982b5cdb9b1ecf343","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/neatconverter.png","hash":"00da8c2a6ddda9b123249c5772abed028d30c5c4","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/7.png","hash":"d51004edf1897894667b958707616e0f9af1d1a8","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/8.jpg","hash":"656fc2900feb80d84652bd5f2b9cb7689b176b03","modified":1658340983223},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1658340983223},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/network.png","hash":"51e4c87dfffdbfee216da092eab3c1881e41866f","modified":1658340983223},{"_id":"public/2022/03/03/敏捷学习方法/6.jpg","hash":"cc086927244058e7f70367089c3226e999c67663","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/lsk1.jpg","hash":"0599dd262b18a056bf29da3080d38cd1261fa582","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/csrf.png","hash":"a2cf06b06479d6d831fa09134e7c7436c491d1f3","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/credit.png","hash":"4f9ea8c4c2e6697bc9e1d56d851dc86b7e21ce3d","modified":1658340983223},{"_id":"public/favicon.png","hash":"11163187edb4fd1cacec1c642fd989bffe2c2085","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/yxp.jpg","hash":"d732f0297118dc533e84b1b7bfd3e255c715feb0","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/f122.png","hash":"cbfbbd9a0bffad81362ee98f40ce163296e570c9","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/steps.png","hash":"79e5069a54df54406b8a8cb103aebe1a9d120848","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/road.png","hash":"aa64e55cedf9ad5f45326829f12245691e8b05fb","modified":1658340983223},{"_id":"public/2022/06/19/kindledownload/f12.jpg","hash":"8c24e0eb4df46b5a66bd9797aa50c18a08833b61","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/qrp.png","hash":"757cd03259c0a4a35e48d7cc3fe935403a1d0fe0","modified":1658340983223},{"_id":"public/2022/06/10/itsgettingbadorbetter/lesson1.png","hash":"3ebcb33d65b08e12ce52e2a5f0b96c531a2bd47d","modified":1658340983223}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Why Python？","excerpt":"","date":"2019-11-04T14:39:00.000Z","_content":"\n业界小故事一则：天才大牛工程师带领团队耗时一个月优化了公司的系统，节约了公司服务器的存储空间，提升了计算效率。后来老板加了硬盘","source":"_drafts/Why-Python？.md","raw":"---\ntitle: Why Python？\ntags: []\nexcerpt: ''\ndate: 2019-11-04 22:39:00\n---\n\n业界小故事一则：天才大牛工程师带领团队耗时一个月优化了公司的系统，节约了公司服务器的存储空间，提升了计算效率。后来老板加了硬盘","slug":"Why-Python？","published":0,"updated":"2021-07-29T15:17:08.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekl6000035ct715d1o1w","content":"<p>业界小故事一则：天才大牛工程师带领团队耗时一个月优化了公司的系统，节约了公司服务器的存储空间，提升了计算效率。后来老板加了硬盘</p>\n","site":{"data":{}},"more":"<p>业界小故事一则：天才大牛工程师带领团队耗时一个月优化了公司的系统，节约了公司服务器的存储空间，提升了计算效率。后来老板加了硬盘</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_drafts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":0,"date":"2021-07-26T14:58:56.339Z","updated":"2021-07-26T14:58:56.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklf000135ct5lis6uxy","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"产品经理学习笔记","excerpt":"","date":"2019-11-04T05:10:00.000Z","_content":"\n1\\. 微信和tele的聊天","source":"_drafts/产品经理学习笔记.md","raw":"---\ntitle: 产品经理学习笔记\ntags: []\nexcerpt: ''\ndate: 2019-11-04 13:10:00\n---\n\n1\\. 微信和tele的聊天","slug":"产品经理学习笔记","published":0,"updated":"2021-07-29T15:17:08.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklh000235ct2sgd07zu","content":"<p>1. 微信和tele的聊天</p>\n","site":{"data":{}},"more":"<p>1. 微信和tele的聊天</p>\n"},{"title":"我的技能树","excerpt":"","date":"2019-11-04T04:13:00.000Z","_content":"\n4年就是一个大学  \n大学毕业我荒废了好多大学了  \n要重新上大学","source":"_drafts/我的技能树.md","raw":"---\ntitle: 我的技能树\ntags: []\nexcerpt: ''\ndate: 2019-11-04 12:13:00\n---\n\n4年就是一个大学  \n大学毕业我荒废了好多大学了  \n要重新上大学","slug":"我的技能树","published":0,"updated":"2021-07-29T15:17:08.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekli000335ct0cxjcgoa","content":"<p>4年就是一个大学<br>大学毕业我荒废了好多大学了<br>要重新上大学</p>\n","site":{"data":{}},"more":"<p>4年就是一个大学<br>大学毕业我荒废了好多大学了<br>要重新上大学</p>\n"},{"title":"After I figured out docker, I use this tutorial for installing shadowsocks on my server","excerpt":"","date":"2021-05-14T16:31:00.000Z","_content":"\n https://thematrix.dev/setup-go-shadowsocks-on-ubuntu/","source":"_posts/After-I-figured-out-docker-I-use-this-tutorial-for-installing-shadowsocks-on-my-server.md","raw":"---\ntitle: >-\n  After I figured out docker, I use this tutorial for installing shadowsocks on\n  my server\ntags: []\nexcerpt: ''\ndate: 2021-05-15 00:31:00\n---\n\n https://thematrix.dev/setup-go-shadowsocks-on-ubuntu/","slug":"After-I-figured-out-docker-I-use-this-tutorial-for-installing-shadowsocks-on-my-server","published":1,"updated":"2021-07-29T15:17:08.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklj000435cta5y979n3","content":"<p> <a href=\"https://thematrix.dev/setup-go-shadowsocks-on-ubuntu/\">https://thematrix.dev/setup-go-shadowsocks-on-ubuntu/</a></p>\n","site":{"data":{}},"more":"<p> <a href=\"https://thematrix.dev/setup-go-shadowsocks-on-ubuntu/\">https://thematrix.dev/setup-go-shadowsocks-on-ubuntu/</a></p>\n"},{"title":"Dive into Docker - Not every image is using the bash shell","excerpt":"","date":"2021-05-18T08:06:00.000Z","_content":"\nTry to get into the shawdowsocks container created by docker.\n\nFound this command:\n\n docker exec -it <container> bash\n\nIt didn't work. And I found this:\n\nhttps://mkyong.com/docker/docker-exec-bash-executable-file-not-found-in-path/\n\n  \n\nNoticed not every image is using the bash shell.\n\nThen tried this:\n\n docker exec -it <container> sh\n\nIt actually worked.","source":"_posts/Dive-into-Docker-Not-every-image-is-using-the-bash-shell.md","raw":"---\ntitle: Dive into Docker - Not every image is using the bash shell\ntags: []\nexcerpt: ''\ndate: 2021-05-18 16:06:00\n---\n\nTry to get into the shawdowsocks container created by docker.\n\nFound this command:\n\n docker exec -it <container> bash\n\nIt didn't work. And I found this:\n\nhttps://mkyong.com/docker/docker-exec-bash-executable-file-not-found-in-path/\n\n  \n\nNoticed not every image is using the bash shell.\n\nThen tried this:\n\n docker exec -it <container> sh\n\nIt actually worked.","slug":"Dive-into-Docker-Not-every-image-is-using-the-bash-shell","published":1,"updated":"2021-07-29T15:17:08.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklk000535cta2br83qd","content":"<p>Try to get into the shawdowsocks container created by docker.</p>\n<p>Found this command:</p>\n<p> docker exec -it <container> bash</p>\n<p>It didn’t work. And I found this:</p>\n<p><a href=\"https://mkyong.com/docker/docker-exec-bash-executable-file-not-found-in-path/\">https://mkyong.com/docker/docker-exec-bash-executable-file-not-found-in-path/</a></p>\n<p>Noticed not every image is using the bash shell.</p>\n<p>Then tried this:</p>\n<p> docker exec -it <container> sh</p>\n<p>It actually worked.</p>\n","site":{"data":{}},"more":"<p>Try to get into the shawdowsocks container created by docker.</p>\n<p>Found this command:</p>\n<p> docker exec -it <container> bash</p>\n<p>It didn’t work. And I found this:</p>\n<p><a href=\"https://mkyong.com/docker/docker-exec-bash-executable-file-not-found-in-path/\">https://mkyong.com/docker/docker-exec-bash-executable-file-not-found-in-path/</a></p>\n<p>Noticed not every image is using the bash shell.</p>\n<p>Then tried this:</p>\n<p> docker exec -it <container> sh</p>\n<p>It actually worked.</p>\n"},{"title":"Each time I try to use mosh, it asks me to export LANG settings","excerpt":"","date":"2021-05-13T14:46:00.000Z","_content":"\n To fix it, I have set ~/.zshrc file.\n\nI have added alias command into it.","source":"_posts/Each-time-I-try-to-use-mosh-it-asks-me-to-export-LANG-settings.md","raw":"---\ntitle: 'Each time I try to use mosh, it asks me to export LANG settings'\ntags: []\nexcerpt: ''\ndate: 2021-05-13 22:46:00\n---\n\n To fix it, I have set ~/.zshrc file.\n\nI have added alias command into it.","slug":"Each-time-I-try-to-use-mosh-it-asks-me-to-export-LANG-settings","published":1,"updated":"2021-07-29T15:17:08.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekll000635ct8ti7602n","content":"<p> To fix it, I have set ~&#x2F;.zshrc file.</p>\n<p>I have added alias command into it.</p>\n","site":{"data":{}},"more":"<p> To fix it, I have set ~&#x2F;.zshrc file.</p>\n<p>I have added alias command into it.</p>\n"},{"title":"用 Go 语言写焦虑发生器并发布到 Rum 上·第二篇","date":"2022-02-17T10:37:15.000Z","_content":"\n初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。\n于是我这就来记录这段学习经历：\n目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；\n目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；\n目的三是让更多的人能够对 Rum 这个新的东西感兴趣。\n希望能成功达成目的：\n\n## 生成进度条\n上一篇我们写了函数，可以用 HTTP Post 方法向 Rum 发送内容，我们这一篇就来发送焦虑内容之年度进度条吧。\n进度条采用文本形式，我在 Unicode 的列表里找到了一些方块：\n{% asset_img blocks.png %}\n\n>这个找 Unicode 的地方我提供给读者：https://unicode-table.com/\n\n进度条的算法我是这样规定的：\n整个进度条长度是30个块，把百分比换算成三十分之 N。N 是一个整数。\n那么把百分之几换算成三十分之几感觉掉了很多精度，这个丢掉的精度我用一些不完整的方块来表示。我找了 quarter block 表示四分之一块，找了 half block 表示一半，three quarter block 表示四分之三块，这样至少视觉上不会感觉太“不精确”了。\n照着这样的算法思路我写了生成进度条的代码如下：\n``` Go\nfunc printBar(perc float64) (bar string) { //print progress bar by percentage\n\tconst fullB string = \"\\u2588\" //0.9\n\tconst halfB string = \"\\u2584\" //0.5\n\tconst quarterB string = \"\\u2582\" //0.25\n\tconst threeQuartersB string = \"\\u2586\" //0.75\n\tconst emptyB string = \"\\u2581\" //0\n\tconst ttlBs float64 = 30 //total number of blocks\n\n\tbar = \"\"\n\n\tfBs := int(math.Floor(perc * ttlBs))\n\n\tfor i := 0; i < fBs; i++ {\n\t\tbar += fullB\n\t}\n\t\n\tgB := perc*ttlBs - math.Floor(perc*ttlBs) //to decide which gab block to chose.\n\tlog.Info(\"the gap block indicator is:\", gB)\n\n\tif gB < 0.0001 && perc < 0.9999 {\n\t\tbar += emptyB\n\t} else if gB >= 0.0001 && gB < 0.35 {\n\t\tbar += quarterB\n\t} else if gB >= 0.35 && gB < 0.6 {\n\t\tbar += halfB\n\t} else if gB >= 0.6 && gB < 0.85 {\n\t\tbar += threeQuartersB\n\t} else if perc >= 0.9999 {\n\t\tlog.Info(\"quit earlier to prevent an extra empty block \", perc*ttlBs)\n\t\treturn\n\t} else {\n\t\tbar += fullB\n\t}\n\n\teBs := int(ttlBs) - fBs - 1\n\tfor i := 0; i < eBs; i++ {\n\t\tbar += emptyB\n\t}\n\n\n\tcontent := \"\"\n\tcontent += \"2022 进度条 / Year Progress 2022\\n\"\n\tcontent += bar\n\n\tnow := time.Now().UTC()\n\tdisplayPerC := fmt.Sprintf(\"%.1f\", perc*100) + \"%\"\n\tbar = content + displayPerC + \"\\nUTC时间: \" + now.Format(\"2006, Jan 02, 15:04:05\") + \"\\n\"\n\n\treturn\n}\n```\n\n变量 bar 是函数要返回的值，也是要发送给 Rum 的全部内容。经过前面的计算，生成进度条之后，干脆在这个函数里把标题和时间戳也加上，成了最后的内容。\n这个函数的一个参数是 perc，也即percentage，百分比，顺理成章的，我们需要根据时间来计算百分比了。\n\n计算时间的百分比很简单，输入一个时间，计算从 2022 年 1 月 1 日零点，到这个时间的时间长度，再比上整个 2022 年的时间长度就好了。\n代码如下：\n``` GO\nfunc timePerc(nextPost time.Time) (perc float64) { //calculate percentage\n\tinitialTime := time.Date(2022, time.January, 1, 0, 0, 0, 0, time.UTC)\n\tduration := nextPost.Sub(initialTime)\n\tlog.Info(\"duration is:\", duration)\n\tperc = duration.Hours() / (365.0 * 24.0)\n\treturn\n}\n```\n\n代码设置了变量 initialTime ，初始的时间，即是 2022 年 1 月 1 日零点。参数是 nextPost，类型是一个时间类型。变量 duration 就是用 nextPost 减去 initialTime 得出的时长了。精确到了小时，因为我最终输出的百分比只保留了 1 位小数点，精确到小时足够了。\n\n## 整合三个函数\n到这里我们基础的功能都已经有了，再做更进一步的优化调整前我们做一次整合。手上现在有三个函数：\n``` Go\n//第一个函数：\nfunc postToRum(title string, content string, group string, url string)//发送内容给 Rum\n```\n输入参数 content，也即要发布的内容，参数 group 是指定要发到 Rum 的哪一个种子网络（群组）。\n\n``` Go\n//第二个函数：\nfunc printBar(perc float64) (bar string)//生成要发送的进度条内容\n```\n参数 perc 是百分比，根据百分比生成内容 bar，并返回。\n\n``` Go\n//第三个函数：\nfunc timePerc(nextPost time.Time) (perc float64)//根据时间计算百分比的函数\n```\n参数 nextPost 是一个时间，输入时间，返回 perc 这个百分比。\n\n把三个函数整合到 main 函数中：\n``` Go\nfunc main() {\t\n\turl := \"https://127.0.0.1:8002/api/v1/group/content\" //Rum 定义的 api\n\tprogressBar := printBar(timePerc(time.Now().UTC())) //按照当前的UTC时间生成一个进度条\n\tpostToRum(\"进度条测试\", progressBar, \"fe2842cb-db6b-4e8a-b007-e83e5603131c\", url) //发布到Go语言学习小组\n\n}\n\n```\n\n这里采用了当前的 UTC 时间，传递给 timePerc 函数，生成了百分比，把百分比传递给 printBar 函数，生成要发送的内容，赋值给变量 progressBar。\n接下来把内容传递给上一篇写的函数，postToRum，礼成！\n\n按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：\n\nhttps://github.com/hawken-im/yearprogress/tree/main/Step1\n\n另外，最终实现自己的目标前，会出不少问题，要定位这些问题，最好的方法就是每一步都输出一个结果。这里我用了 fmt.Println()。","source":"_posts/Go语言写的进度条bot-1.md","raw":"---\ntitle: 用 Go 语言写焦虑发生器并发布到 Rum 上·第二篇\ndate: 2022-02-17 18:37:15\ntags:\n---\n\n初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。\n于是我这就来记录这段学习经历：\n目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；\n目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；\n目的三是让更多的人能够对 Rum 这个新的东西感兴趣。\n希望能成功达成目的：\n\n## 生成进度条\n上一篇我们写了函数，可以用 HTTP Post 方法向 Rum 发送内容，我们这一篇就来发送焦虑内容之年度进度条吧。\n进度条采用文本形式，我在 Unicode 的列表里找到了一些方块：\n{% asset_img blocks.png %}\n\n>这个找 Unicode 的地方我提供给读者：https://unicode-table.com/\n\n进度条的算法我是这样规定的：\n整个进度条长度是30个块，把百分比换算成三十分之 N。N 是一个整数。\n那么把百分之几换算成三十分之几感觉掉了很多精度，这个丢掉的精度我用一些不完整的方块来表示。我找了 quarter block 表示四分之一块，找了 half block 表示一半，three quarter block 表示四分之三块，这样至少视觉上不会感觉太“不精确”了。\n照着这样的算法思路我写了生成进度条的代码如下：\n``` Go\nfunc printBar(perc float64) (bar string) { //print progress bar by percentage\n\tconst fullB string = \"\\u2588\" //0.9\n\tconst halfB string = \"\\u2584\" //0.5\n\tconst quarterB string = \"\\u2582\" //0.25\n\tconst threeQuartersB string = \"\\u2586\" //0.75\n\tconst emptyB string = \"\\u2581\" //0\n\tconst ttlBs float64 = 30 //total number of blocks\n\n\tbar = \"\"\n\n\tfBs := int(math.Floor(perc * ttlBs))\n\n\tfor i := 0; i < fBs; i++ {\n\t\tbar += fullB\n\t}\n\t\n\tgB := perc*ttlBs - math.Floor(perc*ttlBs) //to decide which gab block to chose.\n\tlog.Info(\"the gap block indicator is:\", gB)\n\n\tif gB < 0.0001 && perc < 0.9999 {\n\t\tbar += emptyB\n\t} else if gB >= 0.0001 && gB < 0.35 {\n\t\tbar += quarterB\n\t} else if gB >= 0.35 && gB < 0.6 {\n\t\tbar += halfB\n\t} else if gB >= 0.6 && gB < 0.85 {\n\t\tbar += threeQuartersB\n\t} else if perc >= 0.9999 {\n\t\tlog.Info(\"quit earlier to prevent an extra empty block \", perc*ttlBs)\n\t\treturn\n\t} else {\n\t\tbar += fullB\n\t}\n\n\teBs := int(ttlBs) - fBs - 1\n\tfor i := 0; i < eBs; i++ {\n\t\tbar += emptyB\n\t}\n\n\n\tcontent := \"\"\n\tcontent += \"2022 进度条 / Year Progress 2022\\n\"\n\tcontent += bar\n\n\tnow := time.Now().UTC()\n\tdisplayPerC := fmt.Sprintf(\"%.1f\", perc*100) + \"%\"\n\tbar = content + displayPerC + \"\\nUTC时间: \" + now.Format(\"2006, Jan 02, 15:04:05\") + \"\\n\"\n\n\treturn\n}\n```\n\n变量 bar 是函数要返回的值，也是要发送给 Rum 的全部内容。经过前面的计算，生成进度条之后，干脆在这个函数里把标题和时间戳也加上，成了最后的内容。\n这个函数的一个参数是 perc，也即percentage，百分比，顺理成章的，我们需要根据时间来计算百分比了。\n\n计算时间的百分比很简单，输入一个时间，计算从 2022 年 1 月 1 日零点，到这个时间的时间长度，再比上整个 2022 年的时间长度就好了。\n代码如下：\n``` GO\nfunc timePerc(nextPost time.Time) (perc float64) { //calculate percentage\n\tinitialTime := time.Date(2022, time.January, 1, 0, 0, 0, 0, time.UTC)\n\tduration := nextPost.Sub(initialTime)\n\tlog.Info(\"duration is:\", duration)\n\tperc = duration.Hours() / (365.0 * 24.0)\n\treturn\n}\n```\n\n代码设置了变量 initialTime ，初始的时间，即是 2022 年 1 月 1 日零点。参数是 nextPost，类型是一个时间类型。变量 duration 就是用 nextPost 减去 initialTime 得出的时长了。精确到了小时，因为我最终输出的百分比只保留了 1 位小数点，精确到小时足够了。\n\n## 整合三个函数\n到这里我们基础的功能都已经有了，再做更进一步的优化调整前我们做一次整合。手上现在有三个函数：\n``` Go\n//第一个函数：\nfunc postToRum(title string, content string, group string, url string)//发送内容给 Rum\n```\n输入参数 content，也即要发布的内容，参数 group 是指定要发到 Rum 的哪一个种子网络（群组）。\n\n``` Go\n//第二个函数：\nfunc printBar(perc float64) (bar string)//生成要发送的进度条内容\n```\n参数 perc 是百分比，根据百分比生成内容 bar，并返回。\n\n``` Go\n//第三个函数：\nfunc timePerc(nextPost time.Time) (perc float64)//根据时间计算百分比的函数\n```\n参数 nextPost 是一个时间，输入时间，返回 perc 这个百分比。\n\n把三个函数整合到 main 函数中：\n``` Go\nfunc main() {\t\n\turl := \"https://127.0.0.1:8002/api/v1/group/content\" //Rum 定义的 api\n\tprogressBar := printBar(timePerc(time.Now().UTC())) //按照当前的UTC时间生成一个进度条\n\tpostToRum(\"进度条测试\", progressBar, \"fe2842cb-db6b-4e8a-b007-e83e5603131c\", url) //发布到Go语言学习小组\n\n}\n\n```\n\n这里采用了当前的 UTC 时间，传递给 timePerc 函数，生成了百分比，把百分比传递给 printBar 函数，生成要发送的内容，赋值给变量 progressBar。\n接下来把内容传递给上一篇写的函数，postToRum，礼成！\n\n按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：\n\nhttps://github.com/hawken-im/yearprogress/tree/main/Step1\n\n另外，最终实现自己的目标前，会出不少问题，要定位这些问题，最好的方法就是每一步都输出一个结果。这里我用了 fmt.Println()。","slug":"Go语言写的进度条bot-1","published":1,"updated":"2022-02-23T16:16:10.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekll000735ct9l2o7le1","content":"<p>初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。<br>于是我这就来记录这段学习经历：<br>目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；<br>目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；<br>目的三是让更多的人能够对 Rum 这个新的东西感兴趣。<br>希望能成功达成目的：</p>\n<h2 id=\"生成进度条\"><a href=\"#生成进度条\" class=\"headerlink\" title=\"生成进度条\"></a>生成进度条</h2><p>上一篇我们写了函数，可以用 HTTP Post 方法向 Rum 发送内容，我们这一篇就来发送焦虑内容之年度进度条吧。<br>进度条采用文本形式，我在 Unicode 的列表里找到了一些方块：</p>\n<img src=\"/2022/02/17/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot-1/blocks.png\" class=\"\">\n\n<blockquote>\n<p>这个找 Unicode 的地方我提供给读者：<a href=\"https://unicode-table.com/\">https://unicode-table.com/</a></p>\n</blockquote>\n<p>进度条的算法我是这样规定的：<br>整个进度条长度是30个块，把百分比换算成三十分之 N。N 是一个整数。<br>那么把百分之几换算成三十分之几感觉掉了很多精度，这个丢掉的精度我用一些不完整的方块来表示。我找了 quarter block 表示四分之一块，找了 half block 表示一半，three quarter block 表示四分之三块，这样至少视觉上不会感觉太“不精确”了。<br>照着这样的算法思路我写了生成进度条的代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printBar</span><span class=\"params\">(perc <span class=\"keyword\">float64</span>)</span> <span class=\"params\">(bar <span class=\"keyword\">string</span>)</span></span> &#123; <span class=\"comment\">//print progress bar by percentage</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> fullB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2588&quot;</span> <span class=\"comment\">//0.9</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> halfB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2584&quot;</span> <span class=\"comment\">//0.5</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> quarterB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2582&quot;</span> <span class=\"comment\">//0.25</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> threeQuartersB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2586&quot;</span> <span class=\"comment\">//0.75</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> emptyB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2581&quot;</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> ttlBs <span class=\"keyword\">float64</span> = <span class=\"number\">30</span> <span class=\"comment\">//total number of blocks</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbar = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfBs := <span class=\"keyword\">int</span>(math.Floor(perc * ttlBs))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; fBs; i++ &#123;</span><br><span class=\"line\">\t\tbar += fullB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tgB := perc*ttlBs - math.Floor(perc*ttlBs) <span class=\"comment\">//to decide which gab block to chose.</span></span><br><span class=\"line\">\tlog.Info(<span class=\"string\">&quot;the gap block indicator is:&quot;</span>, gB)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gB &lt; <span class=\"number\">0.0001</span> &amp;&amp; perc &lt; <span class=\"number\">0.9999</span> &#123;</span><br><span class=\"line\">\t\tbar += emptyB</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> gB &gt;= <span class=\"number\">0.0001</span> &amp;&amp; gB &lt; <span class=\"number\">0.35</span> &#123;</span><br><span class=\"line\">\t\tbar += quarterB</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> gB &gt;= <span class=\"number\">0.35</span> &amp;&amp; gB &lt; <span class=\"number\">0.6</span> &#123;</span><br><span class=\"line\">\t\tbar += halfB</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> gB &gt;= <span class=\"number\">0.6</span> &amp;&amp; gB &lt; <span class=\"number\">0.85</span> &#123;</span><br><span class=\"line\">\t\tbar += threeQuartersB</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> perc &gt;= <span class=\"number\">0.9999</span> &#123;</span><br><span class=\"line\">\t\tlog.Info(<span class=\"string\">&quot;quit earlier to prevent an extra empty block &quot;</span>, perc*ttlBs)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tbar += fullB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\teBs := <span class=\"keyword\">int</span>(ttlBs) - fBs - <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; eBs; i++ &#123;</span><br><span class=\"line\">\t\tbar += emptyB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tcontent := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\tcontent += <span class=\"string\">&quot;2022 进度条 / Year Progress 2022\\n&quot;</span></span><br><span class=\"line\">\tcontent += bar</span><br><span class=\"line\"></span><br><span class=\"line\">\tnow := time.Now().UTC()</span><br><span class=\"line\">\tdisplayPerC := fmt.Sprintf(<span class=\"string\">&quot;%.1f&quot;</span>, perc*<span class=\"number\">100</span>) + <span class=\"string\">&quot;%&quot;</span></span><br><span class=\"line\">\tbar = content + displayPerC + <span class=\"string\">&quot;\\nUTC时间: &quot;</span> + now.Format(<span class=\"string\">&quot;2006, Jan 02, 15:04:05&quot;</span>) + <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>变量 bar 是函数要返回的值，也是要发送给 Rum 的全部内容。经过前面的计算，生成进度条之后，干脆在这个函数里把标题和时间戳也加上，成了最后的内容。<br>这个函数的一个参数是 perc，也即percentage，百分比，顺理成章的，我们需要根据时间来计算百分比了。</p>\n<p>计算时间的百分比很简单，输入一个时间，计算从 2022 年 1 月 1 日零点，到这个时间的时间长度，再比上整个 2022 年的时间长度就好了。<br>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timePerc</span><span class=\"params\">(nextPost time.Time)</span> <span class=\"params\">(perc <span class=\"keyword\">float64</span>)</span></span> &#123; <span class=\"comment\">//calculate percentage</span></span><br><span class=\"line\">\tinitialTime := time.Date(<span class=\"number\">2022</span>, time.January, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC)</span><br><span class=\"line\">\tduration := nextPost.Sub(initialTime)</span><br><span class=\"line\">\tlog.Info(<span class=\"string\">&quot;duration is:&quot;</span>, duration)</span><br><span class=\"line\">\tperc = duration.Hours() / (<span class=\"number\">365.0</span> * <span class=\"number\">24.0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码设置了变量 initialTime ，初始的时间，即是 2022 年 1 月 1 日零点。参数是 nextPost，类型是一个时间类型。变量 duration 就是用 nextPost 减去 initialTime 得出的时长了。精确到了小时，因为我最终输出的百分比只保留了 1 位小数点，精确到小时足够了。</p>\n<h2 id=\"整合三个函数\"><a href=\"#整合三个函数\" class=\"headerlink\" title=\"整合三个函数\"></a>整合三个函数</h2><p>到这里我们基础的功能都已经有了，再做更进一步的优化调整前我们做一次整合。手上现在有三个函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一个函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">postToRum</span><span class=\"params\">(title <span class=\"keyword\">string</span>, content <span class=\"keyword\">string</span>, group <span class=\"keyword\">string</span>, url <span class=\"keyword\">string</span>)</span>//发送内容给 <span class=\"title\">Rum</span></span></span><br></pre></td></tr></table></figure>\n<p>输入参数 content，也即要发布的内容，参数 group 是指定要发到 Rum 的哪一个种子网络（群组）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第二个函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printBar</span><span class=\"params\">(perc <span class=\"keyword\">float64</span>)</span> <span class=\"params\">(bar <span class=\"keyword\">string</span>)</span>//生成要发送的进度条内容</span></span><br></pre></td></tr></table></figure>\n<p>参数 perc 是百分比，根据百分比生成内容 bar，并返回。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第三个函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timePerc</span><span class=\"params\">(nextPost time.Time)</span> <span class=\"params\">(perc <span class=\"keyword\">float64</span>)</span>//根据时间计算百分比的函数</span></span><br></pre></td></tr></table></figure>\n<p>参数 nextPost 是一个时间，输入时间，返回 perc 这个百分比。</p>\n<p>把三个函数整合到 main 函数中：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;\t</span><br><span class=\"line\">\turl := <span class=\"string\">&quot;https://127.0.0.1:8002/api/v1/group/content&quot;</span> <span class=\"comment\">//Rum 定义的 api</span></span><br><span class=\"line\">\tprogressBar := printBar(timePerc(time.Now().UTC())) <span class=\"comment\">//按照当前的UTC时间生成一个进度条</span></span><br><span class=\"line\">\tpostToRum(<span class=\"string\">&quot;进度条测试&quot;</span>, progressBar, <span class=\"string\">&quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;</span>, url) <span class=\"comment\">//发布到Go语言学习小组</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里采用了当前的 UTC 时间，传递给 timePerc 函数，生成了百分比，把百分比传递给 printBar 函数，生成要发送的内容，赋值给变量 progressBar。<br>接下来把内容传递给上一篇写的函数，postToRum，礼成！</p>\n<p>按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：</p>\n<p><a href=\"https://github.com/hawken-im/yearprogress/tree/main/Step1\">https://github.com/hawken-im/yearprogress/tree/main/Step1</a></p>\n<p>另外，最终实现自己的目标前，会出不少问题，要定位这些问题，最好的方法就是每一步都输出一个结果。这里我用了 fmt.Println()。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。<br>于是我这就来记录这段学习经历：<br>目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；<br>目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；<br>目的三是让更多的人能够对 Rum 这个新的东西感兴趣。<br>希望能成功达成目的：</p>\n<h2 id=\"生成进度条\"><a href=\"#生成进度条\" class=\"headerlink\" title=\"生成进度条\"></a>生成进度条</h2><p>上一篇我们写了函数，可以用 HTTP Post 方法向 Rum 发送内容，我们这一篇就来发送焦虑内容之年度进度条吧。<br>进度条采用文本形式，我在 Unicode 的列表里找到了一些方块：</p>\n<img src=\"/2022/02/17/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot-1/blocks.png\" class=\"\">\n\n<blockquote>\n<p>这个找 Unicode 的地方我提供给读者：<a href=\"https://unicode-table.com/\">https://unicode-table.com/</a></p>\n</blockquote>\n<p>进度条的算法我是这样规定的：<br>整个进度条长度是30个块，把百分比换算成三十分之 N。N 是一个整数。<br>那么把百分之几换算成三十分之几感觉掉了很多精度，这个丢掉的精度我用一些不完整的方块来表示。我找了 quarter block 表示四分之一块，找了 half block 表示一半，three quarter block 表示四分之三块，这样至少视觉上不会感觉太“不精确”了。<br>照着这样的算法思路我写了生成进度条的代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printBar</span><span class=\"params\">(perc <span class=\"keyword\">float64</span>)</span> <span class=\"params\">(bar <span class=\"keyword\">string</span>)</span></span> &#123; <span class=\"comment\">//print progress bar by percentage</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> fullB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2588&quot;</span> <span class=\"comment\">//0.9</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> halfB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2584&quot;</span> <span class=\"comment\">//0.5</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> quarterB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2582&quot;</span> <span class=\"comment\">//0.25</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> threeQuartersB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2586&quot;</span> <span class=\"comment\">//0.75</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> emptyB <span class=\"keyword\">string</span> = <span class=\"string\">&quot;\\u2581&quot;</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> ttlBs <span class=\"keyword\">float64</span> = <span class=\"number\">30</span> <span class=\"comment\">//total number of blocks</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbar = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfBs := <span class=\"keyword\">int</span>(math.Floor(perc * ttlBs))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; fBs; i++ &#123;</span><br><span class=\"line\">\t\tbar += fullB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tgB := perc*ttlBs - math.Floor(perc*ttlBs) <span class=\"comment\">//to decide which gab block to chose.</span></span><br><span class=\"line\">\tlog.Info(<span class=\"string\">&quot;the gap block indicator is:&quot;</span>, gB)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gB &lt; <span class=\"number\">0.0001</span> &amp;&amp; perc &lt; <span class=\"number\">0.9999</span> &#123;</span><br><span class=\"line\">\t\tbar += emptyB</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> gB &gt;= <span class=\"number\">0.0001</span> &amp;&amp; gB &lt; <span class=\"number\">0.35</span> &#123;</span><br><span class=\"line\">\t\tbar += quarterB</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> gB &gt;= <span class=\"number\">0.35</span> &amp;&amp; gB &lt; <span class=\"number\">0.6</span> &#123;</span><br><span class=\"line\">\t\tbar += halfB</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> gB &gt;= <span class=\"number\">0.6</span> &amp;&amp; gB &lt; <span class=\"number\">0.85</span> &#123;</span><br><span class=\"line\">\t\tbar += threeQuartersB</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> perc &gt;= <span class=\"number\">0.9999</span> &#123;</span><br><span class=\"line\">\t\tlog.Info(<span class=\"string\">&quot;quit earlier to prevent an extra empty block &quot;</span>, perc*ttlBs)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tbar += fullB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\teBs := <span class=\"keyword\">int</span>(ttlBs) - fBs - <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; eBs; i++ &#123;</span><br><span class=\"line\">\t\tbar += emptyB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tcontent := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\tcontent += <span class=\"string\">&quot;2022 进度条 / Year Progress 2022\\n&quot;</span></span><br><span class=\"line\">\tcontent += bar</span><br><span class=\"line\"></span><br><span class=\"line\">\tnow := time.Now().UTC()</span><br><span class=\"line\">\tdisplayPerC := fmt.Sprintf(<span class=\"string\">&quot;%.1f&quot;</span>, perc*<span class=\"number\">100</span>) + <span class=\"string\">&quot;%&quot;</span></span><br><span class=\"line\">\tbar = content + displayPerC + <span class=\"string\">&quot;\\nUTC时间: &quot;</span> + now.Format(<span class=\"string\">&quot;2006, Jan 02, 15:04:05&quot;</span>) + <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>变量 bar 是函数要返回的值，也是要发送给 Rum 的全部内容。经过前面的计算，生成进度条之后，干脆在这个函数里把标题和时间戳也加上，成了最后的内容。<br>这个函数的一个参数是 perc，也即percentage，百分比，顺理成章的，我们需要根据时间来计算百分比了。</p>\n<p>计算时间的百分比很简单，输入一个时间，计算从 2022 年 1 月 1 日零点，到这个时间的时间长度，再比上整个 2022 年的时间长度就好了。<br>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timePerc</span><span class=\"params\">(nextPost time.Time)</span> <span class=\"params\">(perc <span class=\"keyword\">float64</span>)</span></span> &#123; <span class=\"comment\">//calculate percentage</span></span><br><span class=\"line\">\tinitialTime := time.Date(<span class=\"number\">2022</span>, time.January, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC)</span><br><span class=\"line\">\tduration := nextPost.Sub(initialTime)</span><br><span class=\"line\">\tlog.Info(<span class=\"string\">&quot;duration is:&quot;</span>, duration)</span><br><span class=\"line\">\tperc = duration.Hours() / (<span class=\"number\">365.0</span> * <span class=\"number\">24.0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码设置了变量 initialTime ，初始的时间，即是 2022 年 1 月 1 日零点。参数是 nextPost，类型是一个时间类型。变量 duration 就是用 nextPost 减去 initialTime 得出的时长了。精确到了小时，因为我最终输出的百分比只保留了 1 位小数点，精确到小时足够了。</p>\n<h2 id=\"整合三个函数\"><a href=\"#整合三个函数\" class=\"headerlink\" title=\"整合三个函数\"></a>整合三个函数</h2><p>到这里我们基础的功能都已经有了，再做更进一步的优化调整前我们做一次整合。手上现在有三个函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一个函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">postToRum</span><span class=\"params\">(title <span class=\"keyword\">string</span>, content <span class=\"keyword\">string</span>, group <span class=\"keyword\">string</span>, url <span class=\"keyword\">string</span>)</span>//发送内容给 <span class=\"title\">Rum</span></span></span><br></pre></td></tr></table></figure>\n<p>输入参数 content，也即要发布的内容，参数 group 是指定要发到 Rum 的哪一个种子网络（群组）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第二个函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printBar</span><span class=\"params\">(perc <span class=\"keyword\">float64</span>)</span> <span class=\"params\">(bar <span class=\"keyword\">string</span>)</span>//生成要发送的进度条内容</span></span><br></pre></td></tr></table></figure>\n<p>参数 perc 是百分比，根据百分比生成内容 bar，并返回。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第三个函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timePerc</span><span class=\"params\">(nextPost time.Time)</span> <span class=\"params\">(perc <span class=\"keyword\">float64</span>)</span>//根据时间计算百分比的函数</span></span><br></pre></td></tr></table></figure>\n<p>参数 nextPost 是一个时间，输入时间，返回 perc 这个百分比。</p>\n<p>把三个函数整合到 main 函数中：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;\t</span><br><span class=\"line\">\turl := <span class=\"string\">&quot;https://127.0.0.1:8002/api/v1/group/content&quot;</span> <span class=\"comment\">//Rum 定义的 api</span></span><br><span class=\"line\">\tprogressBar := printBar(timePerc(time.Now().UTC())) <span class=\"comment\">//按照当前的UTC时间生成一个进度条</span></span><br><span class=\"line\">\tpostToRum(<span class=\"string\">&quot;进度条测试&quot;</span>, progressBar, <span class=\"string\">&quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;</span>, url) <span class=\"comment\">//发布到Go语言学习小组</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里采用了当前的 UTC 时间，传递给 timePerc 函数，生成了百分比，把百分比传递给 printBar 函数，生成要发送的内容，赋值给变量 progressBar。<br>接下来把内容传递给上一篇写的函数，postToRum，礼成！</p>\n<p>按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：</p>\n<p><a href=\"https://github.com/hawken-im/yearprogress/tree/main/Step1\">https://github.com/hawken-im/yearprogress/tree/main/Step1</a></p>\n<p>另外，最终实现自己的目标前，会出不少问题，要定位这些问题，最好的方法就是每一步都输出一个结果。这里我用了 fmt.Println()。</p>\n"},{"title":"用 Go 语言写焦虑发生器并发布到 Rum 上·第三篇","date":"2022-02-20T07:47:53.000Z","_content":"\n初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。\n于是我这就来记录这段学习经历：\n目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；\n目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；\n目的三是让更多的人能够对 Rum 这个新的东西感兴趣。\n希望能成功达成目的：\n\n## 变得更酷之定时任务\n到现在，我们已经可以给 Rum 发送进度条了。当时我本人，在写到这一步的时候已经偷偷自调闹钟，在整点向 Rum 的“去中心微博”那个种子网络发了两三次了。\n但是自己调闹钟来发内容，这根本不 bot！根本都不酷！\n这一步我们要加入定时任务这个 new feature。\n\n经过多番研究\n>（踩了不少坑，关于 cron job 的繁琐本人在 Rum 上的朋友圈里吐槽了一番）\n\n还是确定了引用这个包：\n``` Go\nimport{\n\tcron \"github.com/robfig/cron/v3\"//前面的cron是自己取的包的别名\n}\n```\n\n选定了这个包，就通过阅读官方文档，找到新建计划任务的方法：\n``` Go\nc := cron.New(cron.WithLocation(time.UTC))\n```\n\ncron.New() 可以新建一个实例，里面的参数是指定时区，我们这里就用 UTC 时间。\n接着应用实例 c 的方法 AddFunc 就好，如下：\n``` Go\nc.AddFunc([计划任务时间], func() {[要执行的函数]})\n```\n\\[计划任务时间\\]采用的是 linux 著名的 crontab 计划任务常用的格式，这个具体怎么弄除了自己去查询，还有个神奇的网站帮我们去做计划任务的时间：\nhttps://crontab.guru/\n\nAddFunc 方法可以使用多次，也就是添加多个计划，之后再用：\n``` Go\nc.Start()\n```\n才可以开始计划好的任务。\n\n一开始我是每 24 小时发送一次，感觉有些打扰别人的时间线，经过一番折腾，最终把发送进度条的频率设置为每 1% 发送一次。\n\n这个的算法是这样思考的：\n在接近一个整数百分比的时间前，每分钟一个百分比，算出 15 分钟 15 个百分比，每个百分比作一次被减数，去减下一个整数百分比的时间。直到整数百分比减去算出来的百分比小于 0.00001。那么就设定一个计划任务，在算出来的那个时间发布进度条。然后，休眠 85 个小时，因为一年的 1% 差不多是 87个小时。\n如果这 15 分钟内没有一个百分比达成这个条件，则休眠 15 分钟，在下一个 15 分钟唤醒程序，再算一次。\n打太多字读者也许会有点难读，我们放代码吧，代码配合注释可能更容易理解：\n``` Go\nfunc main() {\n\tc := cron.New(cron.WithLocation(time.UTC))\n\turl := \"https://127.0.0.1:8002/api/v1/group/content\" //Rum 定义的 api\n\n\tfor {\n\t\tstartTime := time.Date(2022, time.Now().UTC().Month(), time.Now().UTC().Day(), time.Now().UTC().Hour(), time.Now().Minute(), 0, 0, time.UTC) //开始时间\n\t\tfor x := 0; x <= 14; x++ {                                                                                                                   //循环15次，下一个15分钟每分钟一次\n\t\t\taddMinutes, _ := time.ParseDuration(fmt.Sprintf(\"%dm\", x))//每次循环，在开始时间前加x分钟\n\t\t\trealTimePerc := timePerc(startTime.Add(addMinutes))\n\t\t\troundPerc := math.Ceil(realTimePerc*100) / 100 //计算下一个整数百分比\n\t\t\tdifferVal := roundPerc - realTimePerc          //计算差值，差值接近于零代表时间接近整数百分比了\n\t\t\tif differVal < 0.00001 {                       //每分钟计算一次，每分钟是一年的0.000002，因此精确到小数点后5位\n\t\t\t\trealTime := startTime.Add(addMinutes)\n\t\t\t\tnextPostTime := fmt.Sprintf(\"%d %d %d %d *\", realTime.Minute(), realTime.Hour(), realTime.Day(), realTime.Month())\n\t\t\t\tprogressBar := printBar(roundPerc)\n\t\t\t\tc.AddFunc(nextPostTime, func() { postToRum(\"2022 进度条\", progressBar, \"fe2842cb-db6b-4e8a-b007-e83e5603131c\", url) }) //设置定时任务\n\t\t\t\tc.Start()                                                                                                           //开始定时任务\n\t\t\t\tfmt.Println(\"######## went to sleep for 85 hours ########\")                                                         //休眠85个小时，因为一个百分比大概接近87个小时\n\t\t\t\ttime.Sleep(85 * time.Hour)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tfmt.Println(\"######## went to sleep ########\") //休眠15分钟\n\t\ttime.Sleep(15 * time.Minute)\n\t\tc.Stop()\n\t\tfmt.Println(\"############ awaken ###########\") //唤醒\n\t}\n}\n```\n\n上面的 for 循环是放在 main 里，是一个死循环，我的理想情况是这个代码能够一年都不停地运行不会出错。写这篇文章的时候已经稳定运行了 3 个百分点。\n这里的变量 startTime 是每一个 15 分钟判断开始的时间。设定的是整秒数。然后嵌套一个运行 15 次的 for 循环，每次循环都会在 startTime 的基础上增加一分钟并判断这个时间和整百分点时间差多少百分比。直到相差小于 0.00001。\n再嵌套的一个 for 循环会遍历我的 config 文件里的 Rum 种子网络 ID。\n\n## 变得更酷之记录日志\n最终实现自己的目标前，会出不少问题，要定位这些问题，最好的方法就是每一步都输出一个结果。\n特别是我们上一步那种循环套循环，还要长期运行的代码，没有日志很难定位问题出在哪里。\n于是我引入了日志。\n也是老办法，查了下有哪些好用的包。试水了两三个，最后选到了这个：\n``` Go\nimport (\n\tlog \"github.com/sirupsen/logrus\"\n)\n```\n\n非常不好意思的告诉读者们，我作为小白一开始连前面的 log 是别名都不懂，有了别名，以后要引用这个包就不需要写全名，而只需要写 log 这个小短词了。\n\n阅读文档得知，将 log 输出到文件的语句如下：\n``` Go\nf, err := os.OpenFile(\"YP.log\", os.O_WRONLY|os.O_CREATE, 0755) //log file\nif err != nil {\n\tpanic(err)\n}\nlog.SetOutput(f)\n```\n\n先用 os.OpenFile 新建或打开一个文档，我这里取名叫 \"YP.log\"，将文档赋值给变量 f，然后调用 log.SetOutput(f) 就可以将日志统统输出到文档 YP.log 里了。\n在需要记录日志的地方，调用 log.Info(\\[日志内容\\]) 就可以了。\n于是我在主循环中加入了一些日志，好让我可以观察程序的运行：\n``` Go\nfunc main() {\n\tf, err := os.OpenFile(\"YP.log\", os.O_WRONLY|os.O_CREATE, 0755) //log file\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.SetOutput(f)\n\n\tc := cron.New(cron.WithLocation(time.UTC))\n\turl := \"https://127.0.0.1:8002/api/v1/group/content\" //Rum 定义的 api\n\n\tfor {\n\t\tstartTime := time.Date(2022, time.Now().UTC().Month(), time.Now().UTC().Day(), time.Now().UTC().Hour(), time.Now().Minute(), 0, 0, time.UTC) //开始时间\n\t\tlog.Info(\"startTime:\", startTime)                                                                                                            //记录一下循环开始时间\n\t\tfor x := 0; x <= 14; x++ {                                                                                                                   //循环15次，下一个15分钟每分钟一次\n\t\t\taddMinutes, _ := time.ParseDuration(fmt.Sprintf(\"%dm\", x)) //每次循环，在开始时间前加x分钟\n\t\t\tlog.Info(\"addMinutes:\", addMinutes)                        //记录一下每次加的时间对不对\n\t\t\trealTimePerc := timePerc(startTime.Add(addMinutes))\n\t\t\tlog.Info(\"realTimePerc:\", realTimePerc)        //加了时间之后的百分比，记录一下这个增长过程\n\t\t\troundPerc := math.Ceil(realTimePerc*100) / 100 //计算下一个整数百分比\n\t\t\tlog.Info(\"roundPerc:\", roundPerc)              //虽然每次都是一样的值，但还是想看看\n\t\t\tdifferVal := roundPerc - realTimePerc          //计算差值，差值接近于零代表时间接近整数百分比了\n\t\t\tlog.Info(\"differVal:\", differVal)              //看看差值的变化过程，越来越接近于零\n\t\t\tif differVal < 0.00001 {                       //每分钟计算一次，每分钟是一年的0.000002，因此精确到小数点后5位\n\t\t\t\trealTime := startTime.Add(addMinutes)\n\t\t\t\tlog.Info(\"differVal less than 0:\", differVal) //终于到整百分点了，记录一个\n\t\t\t\tnextPostTime := fmt.Sprintf(\"%d %d %d %d *\", realTime.Minute(), realTime.Hour(), realTime.Day(), realTime.Month())\n\t\t\t\tlog.Info(\"nextPostTime:\", nextPostTime) //报告具体的整百分点发布时间\n\t\t\t\tprogressBar := printBar(roundPerc)\n\t\t\t\tc.AddFunc(nextPostTime, func() { postToRum(\"2022 进度条\", progressBar, \"fe2842cb-db6b-4e8a-b007-e83e5603131c\", url) }) //设置定时任务\n\t\t\t\tc.Start()\n\t\t\t\tlog.Info(\"######## went to sleep for 85 hours ########\")    //日志里也记录一下                                                                         //开始定时任务\n\t\t\t\tfmt.Println(\"######## went to sleep for 85 hours ########\") //休眠85个小时，因为一个百分比大概接近87个小时\n\t\t\t\ttime.Sleep(85 * time.Hour)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tlog.Info(\"######## went to sleep ########\")\n\t\tfmt.Println(\"######## went to sleep ########\") //休眠15分钟\n\t\ttime.Sleep(15 * time.Minute)\n\t\tc.Stop()\n\t\tlog.Info(\"############ awaken ###########\")\n\t\tfmt.Println(\"############ awaken ###########\") //唤醒\n\t}\n}\n```\n\n按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：\n\nhttps://github.com/hawken-im/yearprogress/tree/main/Step2","source":"_posts/Go语言写的进度条bot-2.md","raw":"---\ntitle: 用 Go 语言写焦虑发生器并发布到 Rum 上·第三篇\ndate: 2022-02-20 15:47:53\ntags:\n---\n\n初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。\n于是我这就来记录这段学习经历：\n目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；\n目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；\n目的三是让更多的人能够对 Rum 这个新的东西感兴趣。\n希望能成功达成目的：\n\n## 变得更酷之定时任务\n到现在，我们已经可以给 Rum 发送进度条了。当时我本人，在写到这一步的时候已经偷偷自调闹钟，在整点向 Rum 的“去中心微博”那个种子网络发了两三次了。\n但是自己调闹钟来发内容，这根本不 bot！根本都不酷！\n这一步我们要加入定时任务这个 new feature。\n\n经过多番研究\n>（踩了不少坑，关于 cron job 的繁琐本人在 Rum 上的朋友圈里吐槽了一番）\n\n还是确定了引用这个包：\n``` Go\nimport{\n\tcron \"github.com/robfig/cron/v3\"//前面的cron是自己取的包的别名\n}\n```\n\n选定了这个包，就通过阅读官方文档，找到新建计划任务的方法：\n``` Go\nc := cron.New(cron.WithLocation(time.UTC))\n```\n\ncron.New() 可以新建一个实例，里面的参数是指定时区，我们这里就用 UTC 时间。\n接着应用实例 c 的方法 AddFunc 就好，如下：\n``` Go\nc.AddFunc([计划任务时间], func() {[要执行的函数]})\n```\n\\[计划任务时间\\]采用的是 linux 著名的 crontab 计划任务常用的格式，这个具体怎么弄除了自己去查询，还有个神奇的网站帮我们去做计划任务的时间：\nhttps://crontab.guru/\n\nAddFunc 方法可以使用多次，也就是添加多个计划，之后再用：\n``` Go\nc.Start()\n```\n才可以开始计划好的任务。\n\n一开始我是每 24 小时发送一次，感觉有些打扰别人的时间线，经过一番折腾，最终把发送进度条的频率设置为每 1% 发送一次。\n\n这个的算法是这样思考的：\n在接近一个整数百分比的时间前，每分钟一个百分比，算出 15 分钟 15 个百分比，每个百分比作一次被减数，去减下一个整数百分比的时间。直到整数百分比减去算出来的百分比小于 0.00001。那么就设定一个计划任务，在算出来的那个时间发布进度条。然后，休眠 85 个小时，因为一年的 1% 差不多是 87个小时。\n如果这 15 分钟内没有一个百分比达成这个条件，则休眠 15 分钟，在下一个 15 分钟唤醒程序，再算一次。\n打太多字读者也许会有点难读，我们放代码吧，代码配合注释可能更容易理解：\n``` Go\nfunc main() {\n\tc := cron.New(cron.WithLocation(time.UTC))\n\turl := \"https://127.0.0.1:8002/api/v1/group/content\" //Rum 定义的 api\n\n\tfor {\n\t\tstartTime := time.Date(2022, time.Now().UTC().Month(), time.Now().UTC().Day(), time.Now().UTC().Hour(), time.Now().Minute(), 0, 0, time.UTC) //开始时间\n\t\tfor x := 0; x <= 14; x++ {                                                                                                                   //循环15次，下一个15分钟每分钟一次\n\t\t\taddMinutes, _ := time.ParseDuration(fmt.Sprintf(\"%dm\", x))//每次循环，在开始时间前加x分钟\n\t\t\trealTimePerc := timePerc(startTime.Add(addMinutes))\n\t\t\troundPerc := math.Ceil(realTimePerc*100) / 100 //计算下一个整数百分比\n\t\t\tdifferVal := roundPerc - realTimePerc          //计算差值，差值接近于零代表时间接近整数百分比了\n\t\t\tif differVal < 0.00001 {                       //每分钟计算一次，每分钟是一年的0.000002，因此精确到小数点后5位\n\t\t\t\trealTime := startTime.Add(addMinutes)\n\t\t\t\tnextPostTime := fmt.Sprintf(\"%d %d %d %d *\", realTime.Minute(), realTime.Hour(), realTime.Day(), realTime.Month())\n\t\t\t\tprogressBar := printBar(roundPerc)\n\t\t\t\tc.AddFunc(nextPostTime, func() { postToRum(\"2022 进度条\", progressBar, \"fe2842cb-db6b-4e8a-b007-e83e5603131c\", url) }) //设置定时任务\n\t\t\t\tc.Start()                                                                                                           //开始定时任务\n\t\t\t\tfmt.Println(\"######## went to sleep for 85 hours ########\")                                                         //休眠85个小时，因为一个百分比大概接近87个小时\n\t\t\t\ttime.Sleep(85 * time.Hour)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tfmt.Println(\"######## went to sleep ########\") //休眠15分钟\n\t\ttime.Sleep(15 * time.Minute)\n\t\tc.Stop()\n\t\tfmt.Println(\"############ awaken ###########\") //唤醒\n\t}\n}\n```\n\n上面的 for 循环是放在 main 里，是一个死循环，我的理想情况是这个代码能够一年都不停地运行不会出错。写这篇文章的时候已经稳定运行了 3 个百分点。\n这里的变量 startTime 是每一个 15 分钟判断开始的时间。设定的是整秒数。然后嵌套一个运行 15 次的 for 循环，每次循环都会在 startTime 的基础上增加一分钟并判断这个时间和整百分点时间差多少百分比。直到相差小于 0.00001。\n再嵌套的一个 for 循环会遍历我的 config 文件里的 Rum 种子网络 ID。\n\n## 变得更酷之记录日志\n最终实现自己的目标前，会出不少问题，要定位这些问题，最好的方法就是每一步都输出一个结果。\n特别是我们上一步那种循环套循环，还要长期运行的代码，没有日志很难定位问题出在哪里。\n于是我引入了日志。\n也是老办法，查了下有哪些好用的包。试水了两三个，最后选到了这个：\n``` Go\nimport (\n\tlog \"github.com/sirupsen/logrus\"\n)\n```\n\n非常不好意思的告诉读者们，我作为小白一开始连前面的 log 是别名都不懂，有了别名，以后要引用这个包就不需要写全名，而只需要写 log 这个小短词了。\n\n阅读文档得知，将 log 输出到文件的语句如下：\n``` Go\nf, err := os.OpenFile(\"YP.log\", os.O_WRONLY|os.O_CREATE, 0755) //log file\nif err != nil {\n\tpanic(err)\n}\nlog.SetOutput(f)\n```\n\n先用 os.OpenFile 新建或打开一个文档，我这里取名叫 \"YP.log\"，将文档赋值给变量 f，然后调用 log.SetOutput(f) 就可以将日志统统输出到文档 YP.log 里了。\n在需要记录日志的地方，调用 log.Info(\\[日志内容\\]) 就可以了。\n于是我在主循环中加入了一些日志，好让我可以观察程序的运行：\n``` Go\nfunc main() {\n\tf, err := os.OpenFile(\"YP.log\", os.O_WRONLY|os.O_CREATE, 0755) //log file\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.SetOutput(f)\n\n\tc := cron.New(cron.WithLocation(time.UTC))\n\turl := \"https://127.0.0.1:8002/api/v1/group/content\" //Rum 定义的 api\n\n\tfor {\n\t\tstartTime := time.Date(2022, time.Now().UTC().Month(), time.Now().UTC().Day(), time.Now().UTC().Hour(), time.Now().Minute(), 0, 0, time.UTC) //开始时间\n\t\tlog.Info(\"startTime:\", startTime)                                                                                                            //记录一下循环开始时间\n\t\tfor x := 0; x <= 14; x++ {                                                                                                                   //循环15次，下一个15分钟每分钟一次\n\t\t\taddMinutes, _ := time.ParseDuration(fmt.Sprintf(\"%dm\", x)) //每次循环，在开始时间前加x分钟\n\t\t\tlog.Info(\"addMinutes:\", addMinutes)                        //记录一下每次加的时间对不对\n\t\t\trealTimePerc := timePerc(startTime.Add(addMinutes))\n\t\t\tlog.Info(\"realTimePerc:\", realTimePerc)        //加了时间之后的百分比，记录一下这个增长过程\n\t\t\troundPerc := math.Ceil(realTimePerc*100) / 100 //计算下一个整数百分比\n\t\t\tlog.Info(\"roundPerc:\", roundPerc)              //虽然每次都是一样的值，但还是想看看\n\t\t\tdifferVal := roundPerc - realTimePerc          //计算差值，差值接近于零代表时间接近整数百分比了\n\t\t\tlog.Info(\"differVal:\", differVal)              //看看差值的变化过程，越来越接近于零\n\t\t\tif differVal < 0.00001 {                       //每分钟计算一次，每分钟是一年的0.000002，因此精确到小数点后5位\n\t\t\t\trealTime := startTime.Add(addMinutes)\n\t\t\t\tlog.Info(\"differVal less than 0:\", differVal) //终于到整百分点了，记录一个\n\t\t\t\tnextPostTime := fmt.Sprintf(\"%d %d %d %d *\", realTime.Minute(), realTime.Hour(), realTime.Day(), realTime.Month())\n\t\t\t\tlog.Info(\"nextPostTime:\", nextPostTime) //报告具体的整百分点发布时间\n\t\t\t\tprogressBar := printBar(roundPerc)\n\t\t\t\tc.AddFunc(nextPostTime, func() { postToRum(\"2022 进度条\", progressBar, \"fe2842cb-db6b-4e8a-b007-e83e5603131c\", url) }) //设置定时任务\n\t\t\t\tc.Start()\n\t\t\t\tlog.Info(\"######## went to sleep for 85 hours ########\")    //日志里也记录一下                                                                         //开始定时任务\n\t\t\t\tfmt.Println(\"######## went to sleep for 85 hours ########\") //休眠85个小时，因为一个百分比大概接近87个小时\n\t\t\t\ttime.Sleep(85 * time.Hour)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tlog.Info(\"######## went to sleep ########\")\n\t\tfmt.Println(\"######## went to sleep ########\") //休眠15分钟\n\t\ttime.Sleep(15 * time.Minute)\n\t\tc.Stop()\n\t\tlog.Info(\"############ awaken ###########\")\n\t\tfmt.Println(\"############ awaken ###########\") //唤醒\n\t}\n}\n```\n\n按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：\n\nhttps://github.com/hawken-im/yearprogress/tree/main/Step2","slug":"Go语言写的进度条bot-2","published":1,"updated":"2022-02-23T16:16:23.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklm000835ct4tng14w7","content":"<p>初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。<br>于是我这就来记录这段学习经历：<br>目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；<br>目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；<br>目的三是让更多的人能够对 Rum 这个新的东西感兴趣。<br>希望能成功达成目的：</p>\n<h2 id=\"变得更酷之定时任务\"><a href=\"#变得更酷之定时任务\" class=\"headerlink\" title=\"变得更酷之定时任务\"></a>变得更酷之定时任务</h2><p>到现在，我们已经可以给 Rum 发送进度条了。当时我本人，在写到这一步的时候已经偷偷自调闹钟，在整点向 Rum 的“去中心微博”那个种子网络发了两三次了。<br>但是自己调闹钟来发内容，这根本不 bot！根本都不酷！<br>这一步我们要加入定时任务这个 new feature。</p>\n<p>经过多番研究</p>\n<blockquote>\n<p>（踩了不少坑，关于 cron job 的繁琐本人在 Rum 上的朋友圈里吐槽了一番）</p>\n</blockquote>\n<p>还是确定了引用这个包：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>&#123;</span><br><span class=\"line\">\tcron <span class=\"string\">&quot;github.com/robfig/cron/v3&quot;</span><span class=\"comment\">//前面的cron是自己取的包的别名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选定了这个包，就通过阅读官方文档，找到新建计划任务的方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := cron.New(cron.WithLocation(time.UTC))</span><br></pre></td></tr></table></figure>\n\n<p>cron.New() 可以新建一个实例，里面的参数是指定时区，我们这里就用 UTC 时间。<br>接着应用实例 c 的方法 AddFunc 就好，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.AddFunc([计划任务时间], <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;[要执行的函数]&#125;)</span><br></pre></td></tr></table></figure>\n<p>[计划任务时间]采用的是 linux 著名的 crontab 计划任务常用的格式，这个具体怎么弄除了自己去查询，还有个神奇的网站帮我们去做计划任务的时间：<br><a href=\"https://crontab.guru/\">https://crontab.guru/</a></p>\n<p>AddFunc 方法可以使用多次，也就是添加多个计划，之后再用：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.Start()</span><br></pre></td></tr></table></figure>\n<p>才可以开始计划好的任务。</p>\n<p>一开始我是每 24 小时发送一次，感觉有些打扰别人的时间线，经过一番折腾，最终把发送进度条的频率设置为每 1% 发送一次。</p>\n<p>这个的算法是这样思考的：<br>在接近一个整数百分比的时间前，每分钟一个百分比，算出 15 分钟 15 个百分比，每个百分比作一次被减数，去减下一个整数百分比的时间。直到整数百分比减去算出来的百分比小于 0.00001。那么就设定一个计划任务，在算出来的那个时间发布进度条。然后，休眠 85 个小时，因为一年的 1% 差不多是 87个小时。<br>如果这 15 分钟内没有一个百分比达成这个条件，则休眠 15 分钟，在下一个 15 分钟唤醒程序，再算一次。<br>打太多字读者也许会有点难读，我们放代码吧，代码配合注释可能更容易理解：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := cron.New(cron.WithLocation(time.UTC))</span><br><span class=\"line\">\turl := <span class=\"string\">&quot;https://127.0.0.1:8002/api/v1/group/content&quot;</span> <span class=\"comment\">//Rum 定义的 api</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tstartTime := time.Date(<span class=\"number\">2022</span>, time.Now().UTC().Month(), time.Now().UTC().Day(), time.Now().UTC().Hour(), time.Now().Minute(), <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC) <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt;= <span class=\"number\">14</span>; x++ &#123;                                                                                                                   <span class=\"comment\">//循环15次，下一个15分钟每分钟一次</span></span><br><span class=\"line\">\t\t\taddMinutes, _ := time.ParseDuration(fmt.Sprintf(<span class=\"string\">&quot;%dm&quot;</span>, x))<span class=\"comment\">//每次循环，在开始时间前加x分钟</span></span><br><span class=\"line\">\t\t\trealTimePerc := timePerc(startTime.Add(addMinutes))</span><br><span class=\"line\">\t\t\troundPerc := math.Ceil(realTimePerc*<span class=\"number\">100</span>) / <span class=\"number\">100</span> <span class=\"comment\">//计算下一个整数百分比</span></span><br><span class=\"line\">\t\t\tdifferVal := roundPerc - realTimePerc          <span class=\"comment\">//计算差值，差值接近于零代表时间接近整数百分比了</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> differVal &lt; <span class=\"number\">0.00001</span> &#123;                       <span class=\"comment\">//每分钟计算一次，每分钟是一年的0.000002，因此精确到小数点后5位</span></span><br><span class=\"line\">\t\t\t\trealTime := startTime.Add(addMinutes)</span><br><span class=\"line\">\t\t\t\tnextPostTime := fmt.Sprintf(<span class=\"string\">&quot;%d %d %d %d *&quot;</span>, realTime.Minute(), realTime.Hour(), realTime.Day(), realTime.Month())</span><br><span class=\"line\">\t\t\t\tprogressBar := printBar(roundPerc)</span><br><span class=\"line\">\t\t\t\tc.AddFunc(nextPostTime, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; postToRum(<span class=\"string\">&quot;2022 进度条&quot;</span>, progressBar, <span class=\"string\">&quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;</span>, url) &#125;) <span class=\"comment\">//设置定时任务</span></span><br><span class=\"line\">\t\t\t\tc.Start()                                                                                                           <span class=\"comment\">//开始定时任务</span></span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;######## went to sleep for 85 hours ########&quot;</span>)                                                         <span class=\"comment\">//休眠85个小时，因为一个百分比大概接近87个小时</span></span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">85</span> * time.Hour)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;######## went to sleep ########&quot;</span>) <span class=\"comment\">//休眠15分钟</span></span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">15</span> * time.Minute)</span><br><span class=\"line\">\t\tc.Stop()</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;############ awaken ###########&quot;</span>) <span class=\"comment\">//唤醒</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的 for 循环是放在 main 里，是一个死循环，我的理想情况是这个代码能够一年都不停地运行不会出错。写这篇文章的时候已经稳定运行了 3 个百分点。<br>这里的变量 startTime 是每一个 15 分钟判断开始的时间。设定的是整秒数。然后嵌套一个运行 15 次的 for 循环，每次循环都会在 startTime 的基础上增加一分钟并判断这个时间和整百分点时间差多少百分比。直到相差小于 0.00001。<br>再嵌套的一个 for 循环会遍历我的 config 文件里的 Rum 种子网络 ID。</p>\n<h2 id=\"变得更酷之记录日志\"><a href=\"#变得更酷之记录日志\" class=\"headerlink\" title=\"变得更酷之记录日志\"></a>变得更酷之记录日志</h2><p>最终实现自己的目标前，会出不少问题，要定位这些问题，最好的方法就是每一步都输出一个结果。<br>特别是我们上一步那种循环套循环，还要长期运行的代码，没有日志很难定位问题出在哪里。<br>于是我引入了日志。<br>也是老办法，查了下有哪些好用的包。试水了两三个，最后选到了这个：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tlog <span class=\"string\">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>非常不好意思的告诉读者们，我作为小白一开始连前面的 log 是别名都不懂，有了别名，以后要引用这个包就不需要写全名，而只需要写 log 这个小短词了。</p>\n<p>阅读文档得知，将 log 输出到文件的语句如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.OpenFile(<span class=\"string\">&quot;YP.log&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0755</span>) <span class=\"comment\">//log file</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log.SetOutput(f)</span><br></pre></td></tr></table></figure>\n\n<p>先用 os.OpenFile 新建或打开一个文档，我这里取名叫 “YP.log”，将文档赋值给变量 f，然后调用 log.SetOutput(f) 就可以将日志统统输出到文档 YP.log 里了。<br>在需要记录日志的地方，调用 log.Info([日志内容]) 就可以了。<br>于是我在主循环中加入了一些日志，好让我可以观察程序的运行：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf, err := os.OpenFile(<span class=\"string\">&quot;YP.log&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0755</span>) <span class=\"comment\">//log file</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.SetOutput(f)</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := cron.New(cron.WithLocation(time.UTC))</span><br><span class=\"line\">\turl := <span class=\"string\">&quot;https://127.0.0.1:8002/api/v1/group/content&quot;</span> <span class=\"comment\">//Rum 定义的 api</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tstartTime := time.Date(<span class=\"number\">2022</span>, time.Now().UTC().Month(), time.Now().UTC().Day(), time.Now().UTC().Hour(), time.Now().Minute(), <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC) <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">\t\tlog.Info(<span class=\"string\">&quot;startTime:&quot;</span>, startTime)                                                                                                            <span class=\"comment\">//记录一下循环开始时间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt;= <span class=\"number\">14</span>; x++ &#123;                                                                                                                   <span class=\"comment\">//循环15次，下一个15分钟每分钟一次</span></span><br><span class=\"line\">\t\t\taddMinutes, _ := time.ParseDuration(fmt.Sprintf(<span class=\"string\">&quot;%dm&quot;</span>, x)) <span class=\"comment\">//每次循环，在开始时间前加x分钟</span></span><br><span class=\"line\">\t\t\tlog.Info(<span class=\"string\">&quot;addMinutes:&quot;</span>, addMinutes)                        <span class=\"comment\">//记录一下每次加的时间对不对</span></span><br><span class=\"line\">\t\t\trealTimePerc := timePerc(startTime.Add(addMinutes))</span><br><span class=\"line\">\t\t\tlog.Info(<span class=\"string\">&quot;realTimePerc:&quot;</span>, realTimePerc)        <span class=\"comment\">//加了时间之后的百分比，记录一下这个增长过程</span></span><br><span class=\"line\">\t\t\troundPerc := math.Ceil(realTimePerc*<span class=\"number\">100</span>) / <span class=\"number\">100</span> <span class=\"comment\">//计算下一个整数百分比</span></span><br><span class=\"line\">\t\t\tlog.Info(<span class=\"string\">&quot;roundPerc:&quot;</span>, roundPerc)              <span class=\"comment\">//虽然每次都是一样的值，但还是想看看</span></span><br><span class=\"line\">\t\t\tdifferVal := roundPerc - realTimePerc          <span class=\"comment\">//计算差值，差值接近于零代表时间接近整数百分比了</span></span><br><span class=\"line\">\t\t\tlog.Info(<span class=\"string\">&quot;differVal:&quot;</span>, differVal)              <span class=\"comment\">//看看差值的变化过程，越来越接近于零</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> differVal &lt; <span class=\"number\">0.00001</span> &#123;                       <span class=\"comment\">//每分钟计算一次，每分钟是一年的0.000002，因此精确到小数点后5位</span></span><br><span class=\"line\">\t\t\t\trealTime := startTime.Add(addMinutes)</span><br><span class=\"line\">\t\t\t\tlog.Info(<span class=\"string\">&quot;differVal less than 0:&quot;</span>, differVal) <span class=\"comment\">//终于到整百分点了，记录一个</span></span><br><span class=\"line\">\t\t\t\tnextPostTime := fmt.Sprintf(<span class=\"string\">&quot;%d %d %d %d *&quot;</span>, realTime.Minute(), realTime.Hour(), realTime.Day(), realTime.Month())</span><br><span class=\"line\">\t\t\t\tlog.Info(<span class=\"string\">&quot;nextPostTime:&quot;</span>, nextPostTime) <span class=\"comment\">//报告具体的整百分点发布时间</span></span><br><span class=\"line\">\t\t\t\tprogressBar := printBar(roundPerc)</span><br><span class=\"line\">\t\t\t\tc.AddFunc(nextPostTime, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; postToRum(<span class=\"string\">&quot;2022 进度条&quot;</span>, progressBar, <span class=\"string\">&quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;</span>, url) &#125;) <span class=\"comment\">//设置定时任务</span></span><br><span class=\"line\">\t\t\t\tc.Start()</span><br><span class=\"line\">\t\t\t\tlog.Info(<span class=\"string\">&quot;######## went to sleep for 85 hours ########&quot;</span>)    <span class=\"comment\">//日志里也记录一下                                                                         //开始定时任务</span></span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;######## went to sleep for 85 hours ########&quot;</span>) <span class=\"comment\">//休眠85个小时，因为一个百分比大概接近87个小时</span></span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">85</span> * time.Hour)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlog.Info(<span class=\"string\">&quot;######## went to sleep ########&quot;</span>)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;######## went to sleep ########&quot;</span>) <span class=\"comment\">//休眠15分钟</span></span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">15</span> * time.Minute)</span><br><span class=\"line\">\t\tc.Stop()</span><br><span class=\"line\">\t\tlog.Info(<span class=\"string\">&quot;############ awaken ###########&quot;</span>)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;############ awaken ###########&quot;</span>) <span class=\"comment\">//唤醒</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：</p>\n<p><a href=\"https://github.com/hawken-im/yearprogress/tree/main/Step2\">https://github.com/hawken-im/yearprogress/tree/main/Step2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。<br>于是我这就来记录这段学习经历：<br>目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；<br>目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；<br>目的三是让更多的人能够对 Rum 这个新的东西感兴趣。<br>希望能成功达成目的：</p>\n<h2 id=\"变得更酷之定时任务\"><a href=\"#变得更酷之定时任务\" class=\"headerlink\" title=\"变得更酷之定时任务\"></a>变得更酷之定时任务</h2><p>到现在，我们已经可以给 Rum 发送进度条了。当时我本人，在写到这一步的时候已经偷偷自调闹钟，在整点向 Rum 的“去中心微博”那个种子网络发了两三次了。<br>但是自己调闹钟来发内容，这根本不 bot！根本都不酷！<br>这一步我们要加入定时任务这个 new feature。</p>\n<p>经过多番研究</p>\n<blockquote>\n<p>（踩了不少坑，关于 cron job 的繁琐本人在 Rum 上的朋友圈里吐槽了一番）</p>\n</blockquote>\n<p>还是确定了引用这个包：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>&#123;</span><br><span class=\"line\">\tcron <span class=\"string\">&quot;github.com/robfig/cron/v3&quot;</span><span class=\"comment\">//前面的cron是自己取的包的别名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选定了这个包，就通过阅读官方文档，找到新建计划任务的方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := cron.New(cron.WithLocation(time.UTC))</span><br></pre></td></tr></table></figure>\n\n<p>cron.New() 可以新建一个实例，里面的参数是指定时区，我们这里就用 UTC 时间。<br>接着应用实例 c 的方法 AddFunc 就好，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.AddFunc([计划任务时间], <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;[要执行的函数]&#125;)</span><br></pre></td></tr></table></figure>\n<p>[计划任务时间]采用的是 linux 著名的 crontab 计划任务常用的格式，这个具体怎么弄除了自己去查询，还有个神奇的网站帮我们去做计划任务的时间：<br><a href=\"https://crontab.guru/\">https://crontab.guru/</a></p>\n<p>AddFunc 方法可以使用多次，也就是添加多个计划，之后再用：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.Start()</span><br></pre></td></tr></table></figure>\n<p>才可以开始计划好的任务。</p>\n<p>一开始我是每 24 小时发送一次，感觉有些打扰别人的时间线，经过一番折腾，最终把发送进度条的频率设置为每 1% 发送一次。</p>\n<p>这个的算法是这样思考的：<br>在接近一个整数百分比的时间前，每分钟一个百分比，算出 15 分钟 15 个百分比，每个百分比作一次被减数，去减下一个整数百分比的时间。直到整数百分比减去算出来的百分比小于 0.00001。那么就设定一个计划任务，在算出来的那个时间发布进度条。然后，休眠 85 个小时，因为一年的 1% 差不多是 87个小时。<br>如果这 15 分钟内没有一个百分比达成这个条件，则休眠 15 分钟，在下一个 15 分钟唤醒程序，再算一次。<br>打太多字读者也许会有点难读，我们放代码吧，代码配合注释可能更容易理解：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := cron.New(cron.WithLocation(time.UTC))</span><br><span class=\"line\">\turl := <span class=\"string\">&quot;https://127.0.0.1:8002/api/v1/group/content&quot;</span> <span class=\"comment\">//Rum 定义的 api</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tstartTime := time.Date(<span class=\"number\">2022</span>, time.Now().UTC().Month(), time.Now().UTC().Day(), time.Now().UTC().Hour(), time.Now().Minute(), <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC) <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt;= <span class=\"number\">14</span>; x++ &#123;                                                                                                                   <span class=\"comment\">//循环15次，下一个15分钟每分钟一次</span></span><br><span class=\"line\">\t\t\taddMinutes, _ := time.ParseDuration(fmt.Sprintf(<span class=\"string\">&quot;%dm&quot;</span>, x))<span class=\"comment\">//每次循环，在开始时间前加x分钟</span></span><br><span class=\"line\">\t\t\trealTimePerc := timePerc(startTime.Add(addMinutes))</span><br><span class=\"line\">\t\t\troundPerc := math.Ceil(realTimePerc*<span class=\"number\">100</span>) / <span class=\"number\">100</span> <span class=\"comment\">//计算下一个整数百分比</span></span><br><span class=\"line\">\t\t\tdifferVal := roundPerc - realTimePerc          <span class=\"comment\">//计算差值，差值接近于零代表时间接近整数百分比了</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> differVal &lt; <span class=\"number\">0.00001</span> &#123;                       <span class=\"comment\">//每分钟计算一次，每分钟是一年的0.000002，因此精确到小数点后5位</span></span><br><span class=\"line\">\t\t\t\trealTime := startTime.Add(addMinutes)</span><br><span class=\"line\">\t\t\t\tnextPostTime := fmt.Sprintf(<span class=\"string\">&quot;%d %d %d %d *&quot;</span>, realTime.Minute(), realTime.Hour(), realTime.Day(), realTime.Month())</span><br><span class=\"line\">\t\t\t\tprogressBar := printBar(roundPerc)</span><br><span class=\"line\">\t\t\t\tc.AddFunc(nextPostTime, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; postToRum(<span class=\"string\">&quot;2022 进度条&quot;</span>, progressBar, <span class=\"string\">&quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;</span>, url) &#125;) <span class=\"comment\">//设置定时任务</span></span><br><span class=\"line\">\t\t\t\tc.Start()                                                                                                           <span class=\"comment\">//开始定时任务</span></span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;######## went to sleep for 85 hours ########&quot;</span>)                                                         <span class=\"comment\">//休眠85个小时，因为一个百分比大概接近87个小时</span></span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">85</span> * time.Hour)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;######## went to sleep ########&quot;</span>) <span class=\"comment\">//休眠15分钟</span></span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">15</span> * time.Minute)</span><br><span class=\"line\">\t\tc.Stop()</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;############ awaken ###########&quot;</span>) <span class=\"comment\">//唤醒</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的 for 循环是放在 main 里，是一个死循环，我的理想情况是这个代码能够一年都不停地运行不会出错。写这篇文章的时候已经稳定运行了 3 个百分点。<br>这里的变量 startTime 是每一个 15 分钟判断开始的时间。设定的是整秒数。然后嵌套一个运行 15 次的 for 循环，每次循环都会在 startTime 的基础上增加一分钟并判断这个时间和整百分点时间差多少百分比。直到相差小于 0.00001。<br>再嵌套的一个 for 循环会遍历我的 config 文件里的 Rum 种子网络 ID。</p>\n<h2 id=\"变得更酷之记录日志\"><a href=\"#变得更酷之记录日志\" class=\"headerlink\" title=\"变得更酷之记录日志\"></a>变得更酷之记录日志</h2><p>最终实现自己的目标前，会出不少问题，要定位这些问题，最好的方法就是每一步都输出一个结果。<br>特别是我们上一步那种循环套循环，还要长期运行的代码，没有日志很难定位问题出在哪里。<br>于是我引入了日志。<br>也是老办法，查了下有哪些好用的包。试水了两三个，最后选到了这个：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tlog <span class=\"string\">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>非常不好意思的告诉读者们，我作为小白一开始连前面的 log 是别名都不懂，有了别名，以后要引用这个包就不需要写全名，而只需要写 log 这个小短词了。</p>\n<p>阅读文档得知，将 log 输出到文件的语句如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.OpenFile(<span class=\"string\">&quot;YP.log&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0755</span>) <span class=\"comment\">//log file</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log.SetOutput(f)</span><br></pre></td></tr></table></figure>\n\n<p>先用 os.OpenFile 新建或打开一个文档，我这里取名叫 “YP.log”，将文档赋值给变量 f，然后调用 log.SetOutput(f) 就可以将日志统统输出到文档 YP.log 里了。<br>在需要记录日志的地方，调用 log.Info([日志内容]) 就可以了。<br>于是我在主循环中加入了一些日志，好让我可以观察程序的运行：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf, err := os.OpenFile(<span class=\"string\">&quot;YP.log&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0755</span>) <span class=\"comment\">//log file</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.SetOutput(f)</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := cron.New(cron.WithLocation(time.UTC))</span><br><span class=\"line\">\turl := <span class=\"string\">&quot;https://127.0.0.1:8002/api/v1/group/content&quot;</span> <span class=\"comment\">//Rum 定义的 api</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tstartTime := time.Date(<span class=\"number\">2022</span>, time.Now().UTC().Month(), time.Now().UTC().Day(), time.Now().UTC().Hour(), time.Now().Minute(), <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC) <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">\t\tlog.Info(<span class=\"string\">&quot;startTime:&quot;</span>, startTime)                                                                                                            <span class=\"comment\">//记录一下循环开始时间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt;= <span class=\"number\">14</span>; x++ &#123;                                                                                                                   <span class=\"comment\">//循环15次，下一个15分钟每分钟一次</span></span><br><span class=\"line\">\t\t\taddMinutes, _ := time.ParseDuration(fmt.Sprintf(<span class=\"string\">&quot;%dm&quot;</span>, x)) <span class=\"comment\">//每次循环，在开始时间前加x分钟</span></span><br><span class=\"line\">\t\t\tlog.Info(<span class=\"string\">&quot;addMinutes:&quot;</span>, addMinutes)                        <span class=\"comment\">//记录一下每次加的时间对不对</span></span><br><span class=\"line\">\t\t\trealTimePerc := timePerc(startTime.Add(addMinutes))</span><br><span class=\"line\">\t\t\tlog.Info(<span class=\"string\">&quot;realTimePerc:&quot;</span>, realTimePerc)        <span class=\"comment\">//加了时间之后的百分比，记录一下这个增长过程</span></span><br><span class=\"line\">\t\t\troundPerc := math.Ceil(realTimePerc*<span class=\"number\">100</span>) / <span class=\"number\">100</span> <span class=\"comment\">//计算下一个整数百分比</span></span><br><span class=\"line\">\t\t\tlog.Info(<span class=\"string\">&quot;roundPerc:&quot;</span>, roundPerc)              <span class=\"comment\">//虽然每次都是一样的值，但还是想看看</span></span><br><span class=\"line\">\t\t\tdifferVal := roundPerc - realTimePerc          <span class=\"comment\">//计算差值，差值接近于零代表时间接近整数百分比了</span></span><br><span class=\"line\">\t\t\tlog.Info(<span class=\"string\">&quot;differVal:&quot;</span>, differVal)              <span class=\"comment\">//看看差值的变化过程，越来越接近于零</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> differVal &lt; <span class=\"number\">0.00001</span> &#123;                       <span class=\"comment\">//每分钟计算一次，每分钟是一年的0.000002，因此精确到小数点后5位</span></span><br><span class=\"line\">\t\t\t\trealTime := startTime.Add(addMinutes)</span><br><span class=\"line\">\t\t\t\tlog.Info(<span class=\"string\">&quot;differVal less than 0:&quot;</span>, differVal) <span class=\"comment\">//终于到整百分点了，记录一个</span></span><br><span class=\"line\">\t\t\t\tnextPostTime := fmt.Sprintf(<span class=\"string\">&quot;%d %d %d %d *&quot;</span>, realTime.Minute(), realTime.Hour(), realTime.Day(), realTime.Month())</span><br><span class=\"line\">\t\t\t\tlog.Info(<span class=\"string\">&quot;nextPostTime:&quot;</span>, nextPostTime) <span class=\"comment\">//报告具体的整百分点发布时间</span></span><br><span class=\"line\">\t\t\t\tprogressBar := printBar(roundPerc)</span><br><span class=\"line\">\t\t\t\tc.AddFunc(nextPostTime, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; postToRum(<span class=\"string\">&quot;2022 进度条&quot;</span>, progressBar, <span class=\"string\">&quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;</span>, url) &#125;) <span class=\"comment\">//设置定时任务</span></span><br><span class=\"line\">\t\t\t\tc.Start()</span><br><span class=\"line\">\t\t\t\tlog.Info(<span class=\"string\">&quot;######## went to sleep for 85 hours ########&quot;</span>)    <span class=\"comment\">//日志里也记录一下                                                                         //开始定时任务</span></span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;######## went to sleep for 85 hours ########&quot;</span>) <span class=\"comment\">//休眠85个小时，因为一个百分比大概接近87个小时</span></span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">85</span> * time.Hour)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlog.Info(<span class=\"string\">&quot;######## went to sleep ########&quot;</span>)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;######## went to sleep ########&quot;</span>) <span class=\"comment\">//休眠15分钟</span></span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">15</span> * time.Minute)</span><br><span class=\"line\">\t\tc.Stop()</span><br><span class=\"line\">\t\tlog.Info(<span class=\"string\">&quot;############ awaken ###########&quot;</span>)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;############ awaken ###########&quot;</span>) <span class=\"comment\">//唤醒</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：</p>\n<p><a href=\"https://github.com/hawken-im/yearprogress/tree/main/Step2\">https://github.com/hawken-im/yearprogress/tree/main/Step2</a></p>\n"},{"title":"用 Go 语言写焦虑发生器并发布到 Rum 上·最终篇","date":"2022-02-23T16:22:43.000Z","_content":"\n初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。\n于是我这就来记录这段学习经历：\n目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；\n目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；\n目的三是让更多的人能够对 Rum 这个新的东西感兴趣。\n希望能成功达成目的：\n\n## 到服务器上去运行 bot\nRum 是一款建立在区块链上的去中心化的内容平台。\n\n这个定义不一定准确，因为 Rum 现在还是非常初级的阶段，想象空间非常大，提前下定义只会限制想象。这也是我选择 Rum 来学习 Go的原因吧。\n前面三篇我们做好了一个可以持续运行并给 Rum 发送内容的 bot。我们自己的电脑不一定会长期在线和联网。于是我们可以在服务器上去运行 Rum，同时再运行我们写好的 bot。\n\n我自己搭建了一个运行 Rum 服务端（Rum 服务端我们称为 quorum）的服务器环境，再用我本地的电脑去连接，以便我后续在本地写 Go 程序能够更容易地在服务器环境上去测试。这个过程我也总结了一篇文章：\n[从零开始在 Ubuntu 20.04 上Build Quorum 并用本地 Rum App 进行连接](https://blog.hawken.im/2022/01/15/run-quorum-on-ubuntu/)\n\n上面提到的文章也是写给我这样的新手小白看的，目的都是帮助新手避免踩坑，与帮助自己巩固基础并进行下一步的学习。搭建好环境之后，像我们自己在电脑上测试 bot 一样，把我们的代码放到服务器上运行就可以了。\n\n## 变得更酷之立 flag（带参数运行）\n既然到了服务器上去运行就不得不用命令行进行操作。命令行对我这个小白来说，用起来即使不方便，感觉上很酷，就够了。我们自己写的程序要是也需要输入一个带参数的命令才能运行，岂不是酷毙了。\n\n也是一番搜索，查到我们要带参数运行命令，需要一个包叫做 flag。是的，在命令行里带参数，就是立 flag。\n我们 import 这个包：\n``` Go\nimport (\n\t\"flag\"\n)\n```\n\n然后在 main 函数里立起一个新的 flag \n``` Go\n\tflagGroupID := flag.String(\"gid\", \"fe2842cb-db6b-4e8a-b007-e83e5603131c\", \"group ID, default ID is for testing\")\n\tflag.Parse()\n```\n\n调用 flag.String 方法，需要三个参数，第一个是 flag 名，这里我写的 gid，group ID 的简写；第二个是默认值，我用了“Go语言学习小组”的 ID；第三个是一个说明文档，用户用了 -h 的 flag，可以告诉用户怎么使用。\n填完了该填的参数，需要用 flag.Parse() 来解析用户传递的 flag。\n最后需要注意的一点是， flag.String 返回的是一个地址，要用上 flag 的值需要加上 * 这个符号，于是 postToRum 这个函数的第三个参数现在写成这样：\n``` Go\npostToRum(\"2022 进度条\", progressBar, *flagGroupID, url)\n```\n\n\n## 变得更酷之通过外部 config 文件配置参数\n要正式运行这个代码了，会有好多测试，每次都输入一长串的 ID 感觉很麻烦而且一点都不酷。\n看了大佬们的代码，经常都会有一个配置文件，把很多东西写好在配置文件上，再来运行。\n酷！我们也来搞这个。\n\n先设计一下我们配置文件的结构，之前学过一点 Json 的数据结构，所以也没多想，就用 Json 来作为配置文件的格式吧。然后画图进行一个简单的框架设计：\n{% asset_img struct.png %}\n\n这里面计划的功能冗余了一些，很多都没用上，比如可以选择不同的发送方法什么的，可以留给读者来加工（嗯，并不是我偷懒了），按照设计写出来的 Json 文件如下：\n``` Json\n{\n\"url\":\"https://127.0.0.1/api/v1/group/content\",\n\"groups\":[\n    {\n        \"name\":\"YearProgress 2022\",\n        \"ID\":\"[quorum seednet ID]\",\n        \"testGroup\":false,\n        \"cron\":{\n            \"method\":\"daily\",\n            \"schedule\":\"0 0 * * *\"\n        },\n        \"timeZone\":\"UTC\"\n    },\n    {\n        \"name\":\"Test Group\",\n        \"ID\":\"[quorum seednet ID]\",\n        \"testGroup\":true,\n        \"cron\":{\n            \"method\":\"percently\",\n            \"schedule\":\"default\"\n        },\n        \"timeZone\":\"UTC\"\n    }\n]\n}\n```\n\n下一步是解析并读取配置文件，把刚刚的一段 Json 保存到 config.json 文件中，和代码放在一个根目录下。\n读取 Json 文件：\n``` Go\nrawData, _ := ioutil.ReadFile(\"config.json\") \n```\n\n这个时候变量 rawData 储存的是 config.json 里面的字符串，也就是 String 格式。我们还需要解析到一个 struct 中，按照我们自己设定的格式来写 struct：\n``` Go\ntype Cron struct {\n\tMethod   string `json:\"method\"`\n\tSchedule string `json:\"schedule\"`\n}\ntype Group struct {\n\tName      string `json:\"name\"`\n\tID        string `json:\"ID\"`\n\tTestGroup bool   `json:\"testGroup\"`\n\tCron      Cron   `json:\"cron\"`\n\tTimeZone  string `json:\"timeZone\"`\n}\ntype Configs struct {\n\tURL    string  `json:\"url\"`\n\tGroups []Group `json:\"groups\"`\n}\n```\n\n这样我们就可以把 rawData 里面的字符串存到 Configs 这个我们新建的 struct 里，这次我们直接写一个读取 config 文档的函数好了：\n``` Go\nfunc ReadConfig(jsonFile string) *Configs { // to read config file\n\trawData, _ := ioutil.ReadFile(jsonFile) // filename is the JSON file \n\tvar configs Configs\n\tjson.Unmarshal(rawData, &configs)\n\treturn &configs\n}\n```\n\n\n## 更多：自定义包\n注意到我们的 ReadConfig 函数是用的大写字母开头，因为我把 ReadConfig 函数写进了一个自定义包里。所以 ReadConfig 函数是一个公共的函数，就是说我 import 了 ReadConfig 所在的包，就可以调用这个函数。\n下面就讲怎么做一个自定义包，非常简单，包名就是文件夹名，把文件夹放到根目录里。比如，我的包名就叫 readconfig，于是文件夹也叫 readconfig，文件夹里面的代码源文件名可以随便写，我就写 readconfig.go 了。\nreadconfig.go 的第一行不能随便写，要写成：\n``` Go\npackage readconfig\n```\n\n于是我们就成功自定义了一个叫 readconfig 的包。\n接下来把上一步写好的 ReadConfig 函数以及 Configs 的 struct，放置于 readconfig.go 里就好了。\n\n回到根目录的 main.go，这个时候有个特别需要注意的是，因为是自定义包，我们需要在 readconfig 前面加上主包名，我这里自定义的是 yearprogress。如下：\n``` Go\nimport (\n\t\"yearprogress/readconfig\"\n)\n```\n\n主包名 yearprogress 又是在 go.mod 文件里定义的。要生成 go.mod 需要我们在命令行里输入这样的命令：\n``` \ngo mod init yearprogress\n```\n\nGo 语言会根据我们引用的各种包自动帮我们生成一个 go.mod 文件，用来进行包管理。\n\n这样就算完结了，很快是不是？因为我就是这样学习的，会跳过很多知识点，直接去找能帮助我完成这个小项目的积木块。这是我自己总结的学习方法，我称之为敏捷学习法。\n这里贴一个我之前写的文章叫做：\n【浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。】\n是微信公众号链接，以后考虑逐步都转移到 github 吧：\nhttps://mp.weixin.qq.com/s/ZmOaU_VPwSJICqGpefiwaQ\n是去年5月份写的文章，年底就成功实践学了 Go 语言，说明这个学习方法还是有效果的。\n\n按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：\n\nhttps://github.com/hawken-im/yearprogress/tree/main/Step3\n\n## 以后的计划：\n我通过这个小项目入门了 Go 语言，下一步打算做个稍微复杂一点的项目，具体还没有想好，当然还是会和 Rum 结合起来。\n至于这个进度条小项目，我的计划是升级一个小功能，就是年末的时候可以按每 0.1% 来发布。还有就是研究 JWT，看看怎么才能稳定的远程接入 quorum（Rum 的服务器端）。\n希望能帮助到读者！\n","source":"_posts/Go语言写的进度条bot-3.md","raw":"---\ntitle: 用 Go 语言写焦虑发生器并发布到 Rum 上·最终篇\ndate: 2022-02-24 00:22:43\ntags:\n---\n\n初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。\n于是我这就来记录这段学习经历：\n目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；\n目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；\n目的三是让更多的人能够对 Rum 这个新的东西感兴趣。\n希望能成功达成目的：\n\n## 到服务器上去运行 bot\nRum 是一款建立在区块链上的去中心化的内容平台。\n\n这个定义不一定准确，因为 Rum 现在还是非常初级的阶段，想象空间非常大，提前下定义只会限制想象。这也是我选择 Rum 来学习 Go的原因吧。\n前面三篇我们做好了一个可以持续运行并给 Rum 发送内容的 bot。我们自己的电脑不一定会长期在线和联网。于是我们可以在服务器上去运行 Rum，同时再运行我们写好的 bot。\n\n我自己搭建了一个运行 Rum 服务端（Rum 服务端我们称为 quorum）的服务器环境，再用我本地的电脑去连接，以便我后续在本地写 Go 程序能够更容易地在服务器环境上去测试。这个过程我也总结了一篇文章：\n[从零开始在 Ubuntu 20.04 上Build Quorum 并用本地 Rum App 进行连接](https://blog.hawken.im/2022/01/15/run-quorum-on-ubuntu/)\n\n上面提到的文章也是写给我这样的新手小白看的，目的都是帮助新手避免踩坑，与帮助自己巩固基础并进行下一步的学习。搭建好环境之后，像我们自己在电脑上测试 bot 一样，把我们的代码放到服务器上运行就可以了。\n\n## 变得更酷之立 flag（带参数运行）\n既然到了服务器上去运行就不得不用命令行进行操作。命令行对我这个小白来说，用起来即使不方便，感觉上很酷，就够了。我们自己写的程序要是也需要输入一个带参数的命令才能运行，岂不是酷毙了。\n\n也是一番搜索，查到我们要带参数运行命令，需要一个包叫做 flag。是的，在命令行里带参数，就是立 flag。\n我们 import 这个包：\n``` Go\nimport (\n\t\"flag\"\n)\n```\n\n然后在 main 函数里立起一个新的 flag \n``` Go\n\tflagGroupID := flag.String(\"gid\", \"fe2842cb-db6b-4e8a-b007-e83e5603131c\", \"group ID, default ID is for testing\")\n\tflag.Parse()\n```\n\n调用 flag.String 方法，需要三个参数，第一个是 flag 名，这里我写的 gid，group ID 的简写；第二个是默认值，我用了“Go语言学习小组”的 ID；第三个是一个说明文档，用户用了 -h 的 flag，可以告诉用户怎么使用。\n填完了该填的参数，需要用 flag.Parse() 来解析用户传递的 flag。\n最后需要注意的一点是， flag.String 返回的是一个地址，要用上 flag 的值需要加上 * 这个符号，于是 postToRum 这个函数的第三个参数现在写成这样：\n``` Go\npostToRum(\"2022 进度条\", progressBar, *flagGroupID, url)\n```\n\n\n## 变得更酷之通过外部 config 文件配置参数\n要正式运行这个代码了，会有好多测试，每次都输入一长串的 ID 感觉很麻烦而且一点都不酷。\n看了大佬们的代码，经常都会有一个配置文件，把很多东西写好在配置文件上，再来运行。\n酷！我们也来搞这个。\n\n先设计一下我们配置文件的结构，之前学过一点 Json 的数据结构，所以也没多想，就用 Json 来作为配置文件的格式吧。然后画图进行一个简单的框架设计：\n{% asset_img struct.png %}\n\n这里面计划的功能冗余了一些，很多都没用上，比如可以选择不同的发送方法什么的，可以留给读者来加工（嗯，并不是我偷懒了），按照设计写出来的 Json 文件如下：\n``` Json\n{\n\"url\":\"https://127.0.0.1/api/v1/group/content\",\n\"groups\":[\n    {\n        \"name\":\"YearProgress 2022\",\n        \"ID\":\"[quorum seednet ID]\",\n        \"testGroup\":false,\n        \"cron\":{\n            \"method\":\"daily\",\n            \"schedule\":\"0 0 * * *\"\n        },\n        \"timeZone\":\"UTC\"\n    },\n    {\n        \"name\":\"Test Group\",\n        \"ID\":\"[quorum seednet ID]\",\n        \"testGroup\":true,\n        \"cron\":{\n            \"method\":\"percently\",\n            \"schedule\":\"default\"\n        },\n        \"timeZone\":\"UTC\"\n    }\n]\n}\n```\n\n下一步是解析并读取配置文件，把刚刚的一段 Json 保存到 config.json 文件中，和代码放在一个根目录下。\n读取 Json 文件：\n``` Go\nrawData, _ := ioutil.ReadFile(\"config.json\") \n```\n\n这个时候变量 rawData 储存的是 config.json 里面的字符串，也就是 String 格式。我们还需要解析到一个 struct 中，按照我们自己设定的格式来写 struct：\n``` Go\ntype Cron struct {\n\tMethod   string `json:\"method\"`\n\tSchedule string `json:\"schedule\"`\n}\ntype Group struct {\n\tName      string `json:\"name\"`\n\tID        string `json:\"ID\"`\n\tTestGroup bool   `json:\"testGroup\"`\n\tCron      Cron   `json:\"cron\"`\n\tTimeZone  string `json:\"timeZone\"`\n}\ntype Configs struct {\n\tURL    string  `json:\"url\"`\n\tGroups []Group `json:\"groups\"`\n}\n```\n\n这样我们就可以把 rawData 里面的字符串存到 Configs 这个我们新建的 struct 里，这次我们直接写一个读取 config 文档的函数好了：\n``` Go\nfunc ReadConfig(jsonFile string) *Configs { // to read config file\n\trawData, _ := ioutil.ReadFile(jsonFile) // filename is the JSON file \n\tvar configs Configs\n\tjson.Unmarshal(rawData, &configs)\n\treturn &configs\n}\n```\n\n\n## 更多：自定义包\n注意到我们的 ReadConfig 函数是用的大写字母开头，因为我把 ReadConfig 函数写进了一个自定义包里。所以 ReadConfig 函数是一个公共的函数，就是说我 import 了 ReadConfig 所在的包，就可以调用这个函数。\n下面就讲怎么做一个自定义包，非常简单，包名就是文件夹名，把文件夹放到根目录里。比如，我的包名就叫 readconfig，于是文件夹也叫 readconfig，文件夹里面的代码源文件名可以随便写，我就写 readconfig.go 了。\nreadconfig.go 的第一行不能随便写，要写成：\n``` Go\npackage readconfig\n```\n\n于是我们就成功自定义了一个叫 readconfig 的包。\n接下来把上一步写好的 ReadConfig 函数以及 Configs 的 struct，放置于 readconfig.go 里就好了。\n\n回到根目录的 main.go，这个时候有个特别需要注意的是，因为是自定义包，我们需要在 readconfig 前面加上主包名，我这里自定义的是 yearprogress。如下：\n``` Go\nimport (\n\t\"yearprogress/readconfig\"\n)\n```\n\n主包名 yearprogress 又是在 go.mod 文件里定义的。要生成 go.mod 需要我们在命令行里输入这样的命令：\n``` \ngo mod init yearprogress\n```\n\nGo 语言会根据我们引用的各种包自动帮我们生成一个 go.mod 文件，用来进行包管理。\n\n这样就算完结了，很快是不是？因为我就是这样学习的，会跳过很多知识点，直接去找能帮助我完成这个小项目的积木块。这是我自己总结的学习方法，我称之为敏捷学习法。\n这里贴一个我之前写的文章叫做：\n【浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。】\n是微信公众号链接，以后考虑逐步都转移到 github 吧：\nhttps://mp.weixin.qq.com/s/ZmOaU_VPwSJICqGpefiwaQ\n是去年5月份写的文章，年底就成功实践学了 Go 语言，说明这个学习方法还是有效果的。\n\n按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：\n\nhttps://github.com/hawken-im/yearprogress/tree/main/Step3\n\n## 以后的计划：\n我通过这个小项目入门了 Go 语言，下一步打算做个稍微复杂一点的项目，具体还没有想好，当然还是会和 Rum 结合起来。\n至于这个进度条小项目，我的计划是升级一个小功能，就是年末的时候可以按每 0.1% 来发布。还有就是研究 JWT，看看怎么才能稳定的远程接入 quorum（Rum 的服务器端）。\n希望能帮助到读者！\n","slug":"Go语言写的进度条bot-3","published":1,"updated":"2022-02-28T15:32:44.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekln000935ctaa3zb2kc","content":"<p>初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。<br>于是我这就来记录这段学习经历：<br>目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；<br>目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；<br>目的三是让更多的人能够对 Rum 这个新的东西感兴趣。<br>希望能成功达成目的：</p>\n<h2 id=\"到服务器上去运行-bot\"><a href=\"#到服务器上去运行-bot\" class=\"headerlink\" title=\"到服务器上去运行 bot\"></a>到服务器上去运行 bot</h2><p>Rum 是一款建立在区块链上的去中心化的内容平台。</p>\n<p>这个定义不一定准确，因为 Rum 现在还是非常初级的阶段，想象空间非常大，提前下定义只会限制想象。这也是我选择 Rum 来学习 Go的原因吧。<br>前面三篇我们做好了一个可以持续运行并给 Rum 发送内容的 bot。我们自己的电脑不一定会长期在线和联网。于是我们可以在服务器上去运行 Rum，同时再运行我们写好的 bot。</p>\n<p>我自己搭建了一个运行 Rum 服务端（Rum 服务端我们称为 quorum）的服务器环境，再用我本地的电脑去连接，以便我后续在本地写 Go 程序能够更容易地在服务器环境上去测试。这个过程我也总结了一篇文章：<br><a href=\"https://blog.hawken.im/2022/01/15/run-quorum-on-ubuntu/\">从零开始在 Ubuntu 20.04 上Build Quorum 并用本地 Rum App 进行连接</a></p>\n<p>上面提到的文章也是写给我这样的新手小白看的，目的都是帮助新手避免踩坑，与帮助自己巩固基础并进行下一步的学习。搭建好环境之后，像我们自己在电脑上测试 bot 一样，把我们的代码放到服务器上运行就可以了。</p>\n<h2 id=\"变得更酷之立-flag（带参数运行）\"><a href=\"#变得更酷之立-flag（带参数运行）\" class=\"headerlink\" title=\"变得更酷之立 flag（带参数运行）\"></a>变得更酷之立 flag（带参数运行）</h2><p>既然到了服务器上去运行就不得不用命令行进行操作。命令行对我这个小白来说，用起来即使不方便，感觉上很酷，就够了。我们自己写的程序要是也需要输入一个带参数的命令才能运行，岂不是酷毙了。</p>\n<p>也是一番搜索，查到我们要带参数运行命令，需要一个包叫做 flag。是的，在命令行里带参数，就是立 flag。<br>我们 import 这个包：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>然后在 main 函数里立起一个新的 flag </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flagGroupID := flag.String(<span class=\"string\">&quot;gid&quot;</span>, <span class=\"string\">&quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;</span>, <span class=\"string\">&quot;group ID, default ID is for testing&quot;</span>)</span><br><span class=\"line\">flag.Parse()</span><br></pre></td></tr></table></figure>\n\n<p>调用 flag.String 方法，需要三个参数，第一个是 flag 名，这里我写的 gid，group ID 的简写；第二个是默认值，我用了“Go语言学习小组”的 ID；第三个是一个说明文档，用户用了 -h 的 flag，可以告诉用户怎么使用。<br>填完了该填的参数，需要用 flag.Parse() 来解析用户传递的 flag。<br>最后需要注意的一点是， flag.String 返回的是一个地址，要用上 flag 的值需要加上 * 这个符号，于是 postToRum 这个函数的第三个参数现在写成这样：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postToRum(<span class=\"string\">&quot;2022 进度条&quot;</span>, progressBar, *flagGroupID, url)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"变得更酷之通过外部-config-文件配置参数\"><a href=\"#变得更酷之通过外部-config-文件配置参数\" class=\"headerlink\" title=\"变得更酷之通过外部 config 文件配置参数\"></a>变得更酷之通过外部 config 文件配置参数</h2><p>要正式运行这个代码了，会有好多测试，每次都输入一长串的 ID 感觉很麻烦而且一点都不酷。<br>看了大佬们的代码，经常都会有一个配置文件，把很多东西写好在配置文件上，再来运行。<br>酷！我们也来搞这个。</p>\n<p>先设计一下我们配置文件的结构，之前学过一点 Json 的数据结构，所以也没多想，就用 Json 来作为配置文件的格式吧。然后画图进行一个简单的框架设计：</p>\n<img src=\"/2022/02/24/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot-3/struct.png\" class=\"\">\n\n<p>这里面计划的功能冗余了一些，很多都没用上，比如可以选择不同的发送方法什么的，可以留给读者来加工（嗯，并不是我偷懒了），按照设计写出来的 Json 文件如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">&quot;url&quot;</span>:<span class=\"string\">&quot;https://127.0.0.1/api/v1/group/content&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;groups&quot;</span>:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;YearProgress 2022&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;ID&quot;</span>:<span class=\"string\">&quot;[quorum seednet ID]&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;testGroup&quot;</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;cron&quot;</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;method&quot;</span>:<span class=\"string\">&quot;daily&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;schedule&quot;</span>:<span class=\"string\">&quot;0 0 * * *&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;timeZone&quot;</span>:<span class=\"string\">&quot;UTC&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;Test Group&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;ID&quot;</span>:<span class=\"string\">&quot;[quorum seednet ID]&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;testGroup&quot;</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;cron&quot;</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;method&quot;</span>:<span class=\"string\">&quot;percently&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;schedule&quot;</span>:<span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;timeZone&quot;</span>:<span class=\"string\">&quot;UTC&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下一步是解析并读取配置文件，把刚刚的一段 Json 保存到 config.json 文件中，和代码放在一个根目录下。<br>读取 Json 文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rawData, _ := ioutil.ReadFile(<span class=\"string\">&quot;config.json&quot;</span>) </span><br></pre></td></tr></table></figure>\n\n<p>这个时候变量 rawData 储存的是 config.json 里面的字符串，也就是 String 格式。我们还需要解析到一个 struct 中，按照我们自己设定的格式来写 struct：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cron <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tMethod   <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;method&quot;`</span></span><br><span class=\"line\">\tSchedule <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;schedule&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Group <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName      <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tID        <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;ID&quot;`</span></span><br><span class=\"line\">\tTestGroup <span class=\"keyword\">bool</span>   <span class=\"string\">`json:&quot;testGroup&quot;`</span></span><br><span class=\"line\">\tCron      Cron   <span class=\"string\">`json:&quot;cron&quot;`</span></span><br><span class=\"line\">\tTimeZone  <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;timeZone&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Configs <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tURL    <span class=\"keyword\">string</span>  <span class=\"string\">`json:&quot;url&quot;`</span></span><br><span class=\"line\">\tGroups []Group <span class=\"string\">`json:&quot;groups&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就可以把 rawData 里面的字符串存到 Configs 这个我们新建的 struct 里，这次我们直接写一个读取 config 文档的函数好了：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadConfig</span><span class=\"params\">(jsonFile <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Configs</span></span> &#123; <span class=\"comment\">// to read config file</span></span><br><span class=\"line\">\trawData, _ := ioutil.ReadFile(jsonFile) <span class=\"comment\">// filename is the JSON file </span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> configs Configs</span><br><span class=\"line\">\tjson.Unmarshal(rawData, &amp;configs)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;configs</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"更多：自定义包\"><a href=\"#更多：自定义包\" class=\"headerlink\" title=\"更多：自定义包\"></a>更多：自定义包</h2><p>注意到我们的 ReadConfig 函数是用的大写字母开头，因为我把 ReadConfig 函数写进了一个自定义包里。所以 ReadConfig 函数是一个公共的函数，就是说我 import 了 ReadConfig 所在的包，就可以调用这个函数。<br>下面就讲怎么做一个自定义包，非常简单，包名就是文件夹名，把文件夹放到根目录里。比如，我的包名就叫 readconfig，于是文件夹也叫 readconfig，文件夹里面的代码源文件名可以随便写，我就写 readconfig.go 了。<br>readconfig.go 的第一行不能随便写，要写成：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> readconfig</span><br></pre></td></tr></table></figure>\n\n<p>于是我们就成功自定义了一个叫 readconfig 的包。<br>接下来把上一步写好的 ReadConfig 函数以及 Configs 的 struct，放置于 readconfig.go 里就好了。</p>\n<p>回到根目录的 main.go，这个时候有个特别需要注意的是，因为是自定义包，我们需要在 readconfig 前面加上主包名，我这里自定义的是 yearprogress。如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;yearprogress/readconfig&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>主包名 yearprogress 又是在 go.mod 文件里定义的。要生成 go.mod 需要我们在命令行里输入这样的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod init yearprogress</span><br></pre></td></tr></table></figure>\n\n<p>Go 语言会根据我们引用的各种包自动帮我们生成一个 go.mod 文件，用来进行包管理。</p>\n<p>这样就算完结了，很快是不是？因为我就是这样学习的，会跳过很多知识点，直接去找能帮助我完成这个小项目的积木块。这是我自己总结的学习方法，我称之为敏捷学习法。<br>这里贴一个我之前写的文章叫做：<br>【浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。】<br>是微信公众号链接，以后考虑逐步都转移到 github 吧：<br><a href=\"https://mp.weixin.qq.com/s/ZmOaU_VPwSJICqGpefiwaQ\">https://mp.weixin.qq.com/s/ZmOaU_VPwSJICqGpefiwaQ</a><br>是去年5月份写的文章，年底就成功实践学了 Go 语言，说明这个学习方法还是有效果的。</p>\n<p>按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：</p>\n<p><a href=\"https://github.com/hawken-im/yearprogress/tree/main/Step3\">https://github.com/hawken-im/yearprogress/tree/main/Step3</a></p>\n<h2 id=\"以后的计划：\"><a href=\"#以后的计划：\" class=\"headerlink\" title=\"以后的计划：\"></a>以后的计划：</h2><p>我通过这个小项目入门了 Go 语言，下一步打算做个稍微复杂一点的项目，具体还没有想好，当然还是会和 Rum 结合起来。<br>至于这个进度条小项目，我的计划是升级一个小功能，就是年末的时候可以按每 0.1% 来发布。还有就是研究 JWT，看看怎么才能稳定的远程接入 quorum（Rum 的服务器端）。<br>希望能帮助到读者！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。<br>于是我这就来记录这段学习经历：<br>目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；<br>目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；<br>目的三是让更多的人能够对 Rum 这个新的东西感兴趣。<br>希望能成功达成目的：</p>\n<h2 id=\"到服务器上去运行-bot\"><a href=\"#到服务器上去运行-bot\" class=\"headerlink\" title=\"到服务器上去运行 bot\"></a>到服务器上去运行 bot</h2><p>Rum 是一款建立在区块链上的去中心化的内容平台。</p>\n<p>这个定义不一定准确，因为 Rum 现在还是非常初级的阶段，想象空间非常大，提前下定义只会限制想象。这也是我选择 Rum 来学习 Go的原因吧。<br>前面三篇我们做好了一个可以持续运行并给 Rum 发送内容的 bot。我们自己的电脑不一定会长期在线和联网。于是我们可以在服务器上去运行 Rum，同时再运行我们写好的 bot。</p>\n<p>我自己搭建了一个运行 Rum 服务端（Rum 服务端我们称为 quorum）的服务器环境，再用我本地的电脑去连接，以便我后续在本地写 Go 程序能够更容易地在服务器环境上去测试。这个过程我也总结了一篇文章：<br><a href=\"https://blog.hawken.im/2022/01/15/run-quorum-on-ubuntu/\">从零开始在 Ubuntu 20.04 上Build Quorum 并用本地 Rum App 进行连接</a></p>\n<p>上面提到的文章也是写给我这样的新手小白看的，目的都是帮助新手避免踩坑，与帮助自己巩固基础并进行下一步的学习。搭建好环境之后，像我们自己在电脑上测试 bot 一样，把我们的代码放到服务器上运行就可以了。</p>\n<h2 id=\"变得更酷之立-flag（带参数运行）\"><a href=\"#变得更酷之立-flag（带参数运行）\" class=\"headerlink\" title=\"变得更酷之立 flag（带参数运行）\"></a>变得更酷之立 flag（带参数运行）</h2><p>既然到了服务器上去运行就不得不用命令行进行操作。命令行对我这个小白来说，用起来即使不方便，感觉上很酷，就够了。我们自己写的程序要是也需要输入一个带参数的命令才能运行，岂不是酷毙了。</p>\n<p>也是一番搜索，查到我们要带参数运行命令，需要一个包叫做 flag。是的，在命令行里带参数，就是立 flag。<br>我们 import 这个包：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>然后在 main 函数里立起一个新的 flag </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flagGroupID := flag.String(<span class=\"string\">&quot;gid&quot;</span>, <span class=\"string\">&quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;</span>, <span class=\"string\">&quot;group ID, default ID is for testing&quot;</span>)</span><br><span class=\"line\">flag.Parse()</span><br></pre></td></tr></table></figure>\n\n<p>调用 flag.String 方法，需要三个参数，第一个是 flag 名，这里我写的 gid，group ID 的简写；第二个是默认值，我用了“Go语言学习小组”的 ID；第三个是一个说明文档，用户用了 -h 的 flag，可以告诉用户怎么使用。<br>填完了该填的参数，需要用 flag.Parse() 来解析用户传递的 flag。<br>最后需要注意的一点是， flag.String 返回的是一个地址，要用上 flag 的值需要加上 * 这个符号，于是 postToRum 这个函数的第三个参数现在写成这样：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postToRum(<span class=\"string\">&quot;2022 进度条&quot;</span>, progressBar, *flagGroupID, url)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"变得更酷之通过外部-config-文件配置参数\"><a href=\"#变得更酷之通过外部-config-文件配置参数\" class=\"headerlink\" title=\"变得更酷之通过外部 config 文件配置参数\"></a>变得更酷之通过外部 config 文件配置参数</h2><p>要正式运行这个代码了，会有好多测试，每次都输入一长串的 ID 感觉很麻烦而且一点都不酷。<br>看了大佬们的代码，经常都会有一个配置文件，把很多东西写好在配置文件上，再来运行。<br>酷！我们也来搞这个。</p>\n<p>先设计一下我们配置文件的结构，之前学过一点 Json 的数据结构，所以也没多想，就用 Json 来作为配置文件的格式吧。然后画图进行一个简单的框架设计：</p>\n<img src=\"/2022/02/24/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot-3/struct.png\" class=\"\">\n\n<p>这里面计划的功能冗余了一些，很多都没用上，比如可以选择不同的发送方法什么的，可以留给读者来加工（嗯，并不是我偷懒了），按照设计写出来的 Json 文件如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">&quot;url&quot;</span>:<span class=\"string\">&quot;https://127.0.0.1/api/v1/group/content&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;groups&quot;</span>:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;YearProgress 2022&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;ID&quot;</span>:<span class=\"string\">&quot;[quorum seednet ID]&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;testGroup&quot;</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;cron&quot;</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;method&quot;</span>:<span class=\"string\">&quot;daily&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;schedule&quot;</span>:<span class=\"string\">&quot;0 0 * * *&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;timeZone&quot;</span>:<span class=\"string\">&quot;UTC&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;Test Group&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;ID&quot;</span>:<span class=\"string\">&quot;[quorum seednet ID]&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;testGroup&quot;</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;cron&quot;</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;method&quot;</span>:<span class=\"string\">&quot;percently&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;schedule&quot;</span>:<span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;timeZone&quot;</span>:<span class=\"string\">&quot;UTC&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下一步是解析并读取配置文件，把刚刚的一段 Json 保存到 config.json 文件中，和代码放在一个根目录下。<br>读取 Json 文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rawData, _ := ioutil.ReadFile(<span class=\"string\">&quot;config.json&quot;</span>) </span><br></pre></td></tr></table></figure>\n\n<p>这个时候变量 rawData 储存的是 config.json 里面的字符串，也就是 String 格式。我们还需要解析到一个 struct 中，按照我们自己设定的格式来写 struct：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cron <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tMethod   <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;method&quot;`</span></span><br><span class=\"line\">\tSchedule <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;schedule&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Group <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName      <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tID        <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;ID&quot;`</span></span><br><span class=\"line\">\tTestGroup <span class=\"keyword\">bool</span>   <span class=\"string\">`json:&quot;testGroup&quot;`</span></span><br><span class=\"line\">\tCron      Cron   <span class=\"string\">`json:&quot;cron&quot;`</span></span><br><span class=\"line\">\tTimeZone  <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;timeZone&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Configs <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tURL    <span class=\"keyword\">string</span>  <span class=\"string\">`json:&quot;url&quot;`</span></span><br><span class=\"line\">\tGroups []Group <span class=\"string\">`json:&quot;groups&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就可以把 rawData 里面的字符串存到 Configs 这个我们新建的 struct 里，这次我们直接写一个读取 config 文档的函数好了：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadConfig</span><span class=\"params\">(jsonFile <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Configs</span></span> &#123; <span class=\"comment\">// to read config file</span></span><br><span class=\"line\">\trawData, _ := ioutil.ReadFile(jsonFile) <span class=\"comment\">// filename is the JSON file </span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> configs Configs</span><br><span class=\"line\">\tjson.Unmarshal(rawData, &amp;configs)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;configs</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"更多：自定义包\"><a href=\"#更多：自定义包\" class=\"headerlink\" title=\"更多：自定义包\"></a>更多：自定义包</h2><p>注意到我们的 ReadConfig 函数是用的大写字母开头，因为我把 ReadConfig 函数写进了一个自定义包里。所以 ReadConfig 函数是一个公共的函数，就是说我 import 了 ReadConfig 所在的包，就可以调用这个函数。<br>下面就讲怎么做一个自定义包，非常简单，包名就是文件夹名，把文件夹放到根目录里。比如，我的包名就叫 readconfig，于是文件夹也叫 readconfig，文件夹里面的代码源文件名可以随便写，我就写 readconfig.go 了。<br>readconfig.go 的第一行不能随便写，要写成：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> readconfig</span><br></pre></td></tr></table></figure>\n\n<p>于是我们就成功自定义了一个叫 readconfig 的包。<br>接下来把上一步写好的 ReadConfig 函数以及 Configs 的 struct，放置于 readconfig.go 里就好了。</p>\n<p>回到根目录的 main.go，这个时候有个特别需要注意的是，因为是自定义包，我们需要在 readconfig 前面加上主包名，我这里自定义的是 yearprogress。如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;yearprogress/readconfig&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>主包名 yearprogress 又是在 go.mod 文件里定义的。要生成 go.mod 需要我们在命令行里输入这样的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod init yearprogress</span><br></pre></td></tr></table></figure>\n\n<p>Go 语言会根据我们引用的各种包自动帮我们生成一个 go.mod 文件，用来进行包管理。</p>\n<p>这样就算完结了，很快是不是？因为我就是这样学习的，会跳过很多知识点，直接去找能帮助我完成这个小项目的积木块。这是我自己总结的学习方法，我称之为敏捷学习法。<br>这里贴一个我之前写的文章叫做：<br>【浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。】<br>是微信公众号链接，以后考虑逐步都转移到 github 吧：<br><a href=\"https://mp.weixin.qq.com/s/ZmOaU_VPwSJICqGpefiwaQ\">https://mp.weixin.qq.com/s/ZmOaU_VPwSJICqGpefiwaQ</a><br>是去年5月份写的文章，年底就成功实践学了 Go 语言，说明这个学习方法还是有效果的。</p>\n<p>按照惯例，我把代码的全貌展示在 github 上。作为小白本白，我经常复制粘贴了别人的代码再修修补补一下就没法成功运行了，所以我这里提供一个完整的可以执行的代码，修修补补出了问题可以回滚：</p>\n<p><a href=\"https://github.com/hawken-im/yearprogress/tree/main/Step3\">https://github.com/hawken-im/yearprogress/tree/main/Step3</a></p>\n<h2 id=\"以后的计划：\"><a href=\"#以后的计划：\" class=\"headerlink\" title=\"以后的计划：\"></a>以后的计划：</h2><p>我通过这个小项目入门了 Go 语言，下一步打算做个稍微复杂一点的项目，具体还没有想好，当然还是会和 Rum 结合起来。<br>至于这个进度条小项目，我的计划是升级一个小功能，就是年末的时候可以按每 0.1% 来发布。还有就是研究 JWT，看看怎么才能稳定的远程接入 quorum（Rum 的服务器端）。<br>希望能帮助到读者！</p>\n"},{"title":"用 Go 语言写焦虑发生器并发布到 Rum 上·第一篇","date":"2022-02-04T01:42:56.000Z","_content":"\n初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。\n于是我这就来记录这段学习经历：\n目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；\n目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；\n目的三是让更多的人能够对 Rum 这个新的东西感兴趣。\n希望能成功达成目的：\n\n## Go 语言基础入门\n学 Go 的出发点是因为大佬们都用 Go 语言来写链上应用。看着他们在群里交流的非常欢乐，文字我都认识，但就不懂他们在讲什么。\n这种感觉太难受，就像小矮人身在片场却眼巴巴看高等精灵们讲精灵语，脸上还是挂着围笑假装在参与对话。\n\n然后呢，因为自己喜欢游戏，找了本书叫：[Pac Go: A Pac Man clone written in Go\n](https://xue.cn/hub/app/books/236)\n就是用 Go 语言写吃豆人游戏。好，从这本书开始入门 Go。\n并不是因为作者是美丽的女程序员我才选择的这本书。\n{% asset_img author_danicat.png %}\n\n>**并不是**\n\n```P.S. 这本书的链接是链到  [xue.cn](https://xue.cn)  的，是一个可以一边阅读编程教程一边在当前书页运行代码的学习网站。```\n\n一边做实例，一边学编程，也非常符合我自己的学习理念。很快我从  [xue.cn](https://xue.cn) 转移到了 github 去学习，上面有 Pac Go 的开源代码。自己 clone 了一份到电脑上，然后通过读 readme 继续学习。\n\n老实说 Pac Go 的前 5 章我认真跟着学了，后面就没有认真学，而是略读之后，感觉基础语法已经掌握差不多了，就开始用 Go 做自己的项目。\n因为新的一年快要到了，如何让人即便是年初，也要焦虑起来呢？想到了在 Twitter 上见过的 year progress。把人习以为常的日期，转变成百分比的进度条，会发现，时间怎么这么不经用？这么不经意的流逝掉了？这会让人产生巨大的焦虑感。于是我打算做一个这样的 bot 并到 Rum 上去运行。\n\n## Go 语言发送 HTTP request\n理性的角度出发我应该规划一下这个程序的各个功能零件，以及工作流程，然后从生成进度条这一步开始，最后再做发布到 Rum 的 HTTP 请求。但我是小白啊，我野路子啊！我有搞着玩的特权啊！\n先试着用 Go 写 HTTP 的 Post 请求，发布到 Rum 上看看再说。\n\n导入Go 语言的 HTTP 包：\n``` Go\nimport \"net/http\"\n```\n\n有了这个包，就可以调用 Go 语言的 HTTP 方法了，这里我是随便 google 了一下，了解到 HTTP 到底是个什么东西，HTTP 请求又是怎么发送的。\n在此建议像我一样的新手小白也自己去研究 HTTP，这个并不难。本文不再花篇幅来讲 HTTP。\n当然深入研究也会花大量时间，这里用不到那么深入的知识，单独看看 Post 和 Get 两种最常用的 HTTP 请求就好了。\n\n简单理解了 HTTP 请求，回来继续写自己的代码。\n\n建立一个 client 用来发送 request。代码是：\n``` Go\ntr := &http.Transport{\n\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n}\nclient := &http.Client{Transport: tr}\n```\n上面这一段代码简单的解释是这样的：\n变量 client 是一个地址，指向了 http 包内的 struct，名为 Client。而这个 Client 里的一个值，也是一个 struct，名为 Transport。将 Transport 里的一个 TLSClientConfig 写入一个 tls 设置，把 InsecureSkipVerify 设置为 true。\n这里的 tls 是把 HTTP 变成 HTTPS 的一层协议。我们这个设置是为了跳过一个 tls 的验证。因为这个 HTTP 请求的地址就在本地，我们可以不用进行验证。\n\nclient 建立之后我们需要用 client 来发送请求。这段代码是：\n``` Go\nreq, err := http.NewRequest(\"POST\", \"https://127.0.0.1:[Rum节点的端口号]/api/v1/group/content\", body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer resp.Body.Close()\n```\n\n变量 req 就是我们要发送请求的一个实例了。通过 http.NewRequest 来建立，有三个参数，分别是：\n\"POST\"，表示我们的请求是 POST 方法；\n第二个参数是 URL，端口号可以在 Rum 客户端的“节点与网络”菜单中的“节点参数”中找到；\n{% asset_img portnumber.png %}\n\n第三个 body 变量是要 Post 给 Rum 的具体内容。\n\n接下来设置一个 header，把 header 设置为一个 json 的内容。这是因为 Rum 需要我们发送 json 内容。\n最后就通过 client.Do(req) 来执行我们设置好的一切，并将请求到的返回值赋值给 resp 变量。这样就通过 Go 完成了一个完整的 HTTP request。\n\n我把这个完整的 HTTP request 提供如下，整个 request 写成了一个叫 postToRum 的函数，请注意函数里面定义的叫 Payload 的 struct 数据结构是按照 quorum 的格式要求来声明的，内容格式可以自定义的是标题，正文，然后目标种子网络的ID，其他的不用修改：\n``` Go\nfunc postToRum(title string, content string, group string, url string) {\n\ttype Object struct {\n\t\tType    string `json:\"type\"`\n\t\tContent string `json:\"content\"`\n\t\tName    string `json:\"name\"`\n\t}\n\ttype Target struct {\n\t\tID   string `json:\"id\"`\n\t\tType string `json:\"type\"`\n\t}\n\ttype Payload struct {//按照 quorum 要求的数据结构进行声明\n\t\tType   string `json:\"type\"`\n\t\tObject Object `json:\"object\"`\n\t\tTarget Target `json:\"target\"`\n\t}\n\n\ttr := &http.Transport{\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t}\n\tclient := &http.Client{Transport: tr}\n\n\tdata := Payload{\n\t\tType: \"Add\",\n\t\tObject: Object{\n\t\t\tType:    \"Note\",\n\t\t\tContent: content,\n\t\t\tName:    title,\n\t\t},\n\t\tTarget: Target{\n\t\t\tID:   group,\n\t\t\tType: \"Group\",\n\t\t},\n\t}\n\n\tpayloadBytes, err := json.Marshal(data)\n\tif err != nil {\n\t\tpanic(err) // handle err\n\t}\n\n\tfmt.Println(string(payloadBytes))\n\n\tbody := bytes.NewReader(payloadBytes)\n\n\treq, err := http.NewRequest(\"POST\", url, body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer resp.Body.Close()\n\n\treceived, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(received))\n}\n```\n\n函数的四个参数分别是 title 表示标题，content 表示内容，group 用于指定要发布内容的种子网络 ID，最后 url 是要发 POST 请求的目标 url，这里的地址是根据 Rum 的 api 要求来的，读者感兴趣可以自己在 Rum 的 github 主页去看看，这里的话可以直接用我提供的地址。\n\n值得注意的是，请求的内容主体：body 变量，经过了两次加工：\n最初是一个 struct，这个 struct 要符合 Rum 的格式要求，我们取名叫 Payload。\n然后用 Payload 来创建一个叫 data 的实例，给 data 填入了具体的内容。\n再接下来，用 json.Marshal(data) 方法，把 data 解析成了 json 格式，并赋值给变量 payloadBytes。\n最后再把 payloadBytes 通过 bytes 包的 bytes.NewReader(payloadBytes) 方法，转变成了能够通过 HTTP POST 方法发送给 Rum 的字符。\n\n既然写好了这个函数，我也迫不及待的往 Rum 上发了一个 Hello Rum 的消息。\n于是在 mian 函数里写下如下代码：\n``` Go\nfunc main() {\n\turl := \"https://127.0.0.1:[端口号]/api/v1/group/content\"\n\tpostToRum(\"Hello Rum\", \"Hello Rum\", \"[目标种子网络的ID]\", url)\n\n}\n```\n目标种子网络的 ID 可以在种子网络的详情处获取到，比如“Go语言学习小组”的 ID 是 \n>fe2842cb-db6b-4e8a-b007-e83e5603131c\n\n{% asset_img groupID.png %}\n\n我们填入 ID 就可以往“Go语言学习小组”发送 Hello Rum 了。\n以上代码的片段忽略掉了一些 Go 语言的一些前置语句，比如包管理的 package 语句，比如引入依赖的包的 import 语句。这里我把代码完整的提供到了 github 仓库里。本系列文章的第一步骤放在了 Step0 文件夹里（因为我们程序员要习惯从零开始）：\n\nhttps://github.com/hawken-im/yearprogress/tree/main/Step0\n\nclone 完整代码或者复制粘贴也行，之后在 Step0 目录下执行：\n```\ngo run main.go\n```\n\n就能看到结果了。\n\n非常欢迎读者们发送 Hello Rum 到“Go语言学习小组”，小组的种子提供于此：\n```\n{\n  \"genesis_block\": {\n    \"BlockId\": \"7016d356-b42f-421c-a086-094e1f35dbeb\",\n    \"GroupId\": \"fe2842cb-db6b-4e8a-b007-e83e5603131c\",\n    \"ProducerPubKey\": \"CAISIQOU1kDjMc3cCZRKV/r2bU/IUPukEcdFkIqkFe3Gbqfy+w==\",\n    \"Hash\": \"v+kfzMMuwNgb2h1PUAktBk1K9DZbN9pEdcfg2rG1Zys=\",\n    \"Signature\": \"MEUCIAZ8A4fgP5TWjXZoAe47qqfktrMrP1/2MMsOM5QsaFiQAiEAn8i8SzpdbGd4wlbbtk6Dws32Ea6aBWtcam+VdUzeHBg=\",\n    \"TimeStamp\": \"1637338394235167000\"\n  },\n  \"group_id\": \"fe2842cb-db6b-4e8a-b007-e83e5603131c\",\n  \"group_name\": \"GO语言学习小组\",\n  \"owner_pubkey\": \"CAISIQOU1kDjMc3cCZRKV/r2bU/IUPukEcdFkIqkFe3Gbqfy+w==\",\n  \"consensus_type\": \"poa\",\n  \"encryption_type\": \"public\",\n  \"cipher_key\": \"835360cc49a5faf385b906b8fd1fb16f31a73c652c65398513070c27a3920550\",\n  \"app_key\": \"group_post\",\n  \"signature\": \"304502204baef7f83e01af403791a96024413deb59ecec7b92f9ae2c18377917e127e6c1022100a4529dc2542aa3f6dc9afd8d14d8bfbcbb3ac33a3a32ca993805a13a77942efe\"\n}\n```\n","source":"_posts/Go语言写的进度条bot.md","raw":"---\ntitle: 用 Go 语言写焦虑发生器并发布到 Rum 上·第一篇\ndate: 2022-02-04 09:42:56\ntags:\n---\n\n初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。\n于是我这就来记录这段学习经历：\n目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；\n目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；\n目的三是让更多的人能够对 Rum 这个新的东西感兴趣。\n希望能成功达成目的：\n\n## Go 语言基础入门\n学 Go 的出发点是因为大佬们都用 Go 语言来写链上应用。看着他们在群里交流的非常欢乐，文字我都认识，但就不懂他们在讲什么。\n这种感觉太难受，就像小矮人身在片场却眼巴巴看高等精灵们讲精灵语，脸上还是挂着围笑假装在参与对话。\n\n然后呢，因为自己喜欢游戏，找了本书叫：[Pac Go: A Pac Man clone written in Go\n](https://xue.cn/hub/app/books/236)\n就是用 Go 语言写吃豆人游戏。好，从这本书开始入门 Go。\n并不是因为作者是美丽的女程序员我才选择的这本书。\n{% asset_img author_danicat.png %}\n\n>**并不是**\n\n```P.S. 这本书的链接是链到  [xue.cn](https://xue.cn)  的，是一个可以一边阅读编程教程一边在当前书页运行代码的学习网站。```\n\n一边做实例，一边学编程，也非常符合我自己的学习理念。很快我从  [xue.cn](https://xue.cn) 转移到了 github 去学习，上面有 Pac Go 的开源代码。自己 clone 了一份到电脑上，然后通过读 readme 继续学习。\n\n老实说 Pac Go 的前 5 章我认真跟着学了，后面就没有认真学，而是略读之后，感觉基础语法已经掌握差不多了，就开始用 Go 做自己的项目。\n因为新的一年快要到了，如何让人即便是年初，也要焦虑起来呢？想到了在 Twitter 上见过的 year progress。把人习以为常的日期，转变成百分比的进度条，会发现，时间怎么这么不经用？这么不经意的流逝掉了？这会让人产生巨大的焦虑感。于是我打算做一个这样的 bot 并到 Rum 上去运行。\n\n## Go 语言发送 HTTP request\n理性的角度出发我应该规划一下这个程序的各个功能零件，以及工作流程，然后从生成进度条这一步开始，最后再做发布到 Rum 的 HTTP 请求。但我是小白啊，我野路子啊！我有搞着玩的特权啊！\n先试着用 Go 写 HTTP 的 Post 请求，发布到 Rum 上看看再说。\n\n导入Go 语言的 HTTP 包：\n``` Go\nimport \"net/http\"\n```\n\n有了这个包，就可以调用 Go 语言的 HTTP 方法了，这里我是随便 google 了一下，了解到 HTTP 到底是个什么东西，HTTP 请求又是怎么发送的。\n在此建议像我一样的新手小白也自己去研究 HTTP，这个并不难。本文不再花篇幅来讲 HTTP。\n当然深入研究也会花大量时间，这里用不到那么深入的知识，单独看看 Post 和 Get 两种最常用的 HTTP 请求就好了。\n\n简单理解了 HTTP 请求，回来继续写自己的代码。\n\n建立一个 client 用来发送 request。代码是：\n``` Go\ntr := &http.Transport{\n\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n}\nclient := &http.Client{Transport: tr}\n```\n上面这一段代码简单的解释是这样的：\n变量 client 是一个地址，指向了 http 包内的 struct，名为 Client。而这个 Client 里的一个值，也是一个 struct，名为 Transport。将 Transport 里的一个 TLSClientConfig 写入一个 tls 设置，把 InsecureSkipVerify 设置为 true。\n这里的 tls 是把 HTTP 变成 HTTPS 的一层协议。我们这个设置是为了跳过一个 tls 的验证。因为这个 HTTP 请求的地址就在本地，我们可以不用进行验证。\n\nclient 建立之后我们需要用 client 来发送请求。这段代码是：\n``` Go\nreq, err := http.NewRequest(\"POST\", \"https://127.0.0.1:[Rum节点的端口号]/api/v1/group/content\", body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer resp.Body.Close()\n```\n\n变量 req 就是我们要发送请求的一个实例了。通过 http.NewRequest 来建立，有三个参数，分别是：\n\"POST\"，表示我们的请求是 POST 方法；\n第二个参数是 URL，端口号可以在 Rum 客户端的“节点与网络”菜单中的“节点参数”中找到；\n{% asset_img portnumber.png %}\n\n第三个 body 变量是要 Post 给 Rum 的具体内容。\n\n接下来设置一个 header，把 header 设置为一个 json 的内容。这是因为 Rum 需要我们发送 json 内容。\n最后就通过 client.Do(req) 来执行我们设置好的一切，并将请求到的返回值赋值给 resp 变量。这样就通过 Go 完成了一个完整的 HTTP request。\n\n我把这个完整的 HTTP request 提供如下，整个 request 写成了一个叫 postToRum 的函数，请注意函数里面定义的叫 Payload 的 struct 数据结构是按照 quorum 的格式要求来声明的，内容格式可以自定义的是标题，正文，然后目标种子网络的ID，其他的不用修改：\n``` Go\nfunc postToRum(title string, content string, group string, url string) {\n\ttype Object struct {\n\t\tType    string `json:\"type\"`\n\t\tContent string `json:\"content\"`\n\t\tName    string `json:\"name\"`\n\t}\n\ttype Target struct {\n\t\tID   string `json:\"id\"`\n\t\tType string `json:\"type\"`\n\t}\n\ttype Payload struct {//按照 quorum 要求的数据结构进行声明\n\t\tType   string `json:\"type\"`\n\t\tObject Object `json:\"object\"`\n\t\tTarget Target `json:\"target\"`\n\t}\n\n\ttr := &http.Transport{\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t}\n\tclient := &http.Client{Transport: tr}\n\n\tdata := Payload{\n\t\tType: \"Add\",\n\t\tObject: Object{\n\t\t\tType:    \"Note\",\n\t\t\tContent: content,\n\t\t\tName:    title,\n\t\t},\n\t\tTarget: Target{\n\t\t\tID:   group,\n\t\t\tType: \"Group\",\n\t\t},\n\t}\n\n\tpayloadBytes, err := json.Marshal(data)\n\tif err != nil {\n\t\tpanic(err) // handle err\n\t}\n\n\tfmt.Println(string(payloadBytes))\n\n\tbody := bytes.NewReader(payloadBytes)\n\n\treq, err := http.NewRequest(\"POST\", url, body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer resp.Body.Close()\n\n\treceived, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(received))\n}\n```\n\n函数的四个参数分别是 title 表示标题，content 表示内容，group 用于指定要发布内容的种子网络 ID，最后 url 是要发 POST 请求的目标 url，这里的地址是根据 Rum 的 api 要求来的，读者感兴趣可以自己在 Rum 的 github 主页去看看，这里的话可以直接用我提供的地址。\n\n值得注意的是，请求的内容主体：body 变量，经过了两次加工：\n最初是一个 struct，这个 struct 要符合 Rum 的格式要求，我们取名叫 Payload。\n然后用 Payload 来创建一个叫 data 的实例，给 data 填入了具体的内容。\n再接下来，用 json.Marshal(data) 方法，把 data 解析成了 json 格式，并赋值给变量 payloadBytes。\n最后再把 payloadBytes 通过 bytes 包的 bytes.NewReader(payloadBytes) 方法，转变成了能够通过 HTTP POST 方法发送给 Rum 的字符。\n\n既然写好了这个函数，我也迫不及待的往 Rum 上发了一个 Hello Rum 的消息。\n于是在 mian 函数里写下如下代码：\n``` Go\nfunc main() {\n\turl := \"https://127.0.0.1:[端口号]/api/v1/group/content\"\n\tpostToRum(\"Hello Rum\", \"Hello Rum\", \"[目标种子网络的ID]\", url)\n\n}\n```\n目标种子网络的 ID 可以在种子网络的详情处获取到，比如“Go语言学习小组”的 ID 是 \n>fe2842cb-db6b-4e8a-b007-e83e5603131c\n\n{% asset_img groupID.png %}\n\n我们填入 ID 就可以往“Go语言学习小组”发送 Hello Rum 了。\n以上代码的片段忽略掉了一些 Go 语言的一些前置语句，比如包管理的 package 语句，比如引入依赖的包的 import 语句。这里我把代码完整的提供到了 github 仓库里。本系列文章的第一步骤放在了 Step0 文件夹里（因为我们程序员要习惯从零开始）：\n\nhttps://github.com/hawken-im/yearprogress/tree/main/Step0\n\nclone 完整代码或者复制粘贴也行，之后在 Step0 目录下执行：\n```\ngo run main.go\n```\n\n就能看到结果了。\n\n非常欢迎读者们发送 Hello Rum 到“Go语言学习小组”，小组的种子提供于此：\n```\n{\n  \"genesis_block\": {\n    \"BlockId\": \"7016d356-b42f-421c-a086-094e1f35dbeb\",\n    \"GroupId\": \"fe2842cb-db6b-4e8a-b007-e83e5603131c\",\n    \"ProducerPubKey\": \"CAISIQOU1kDjMc3cCZRKV/r2bU/IUPukEcdFkIqkFe3Gbqfy+w==\",\n    \"Hash\": \"v+kfzMMuwNgb2h1PUAktBk1K9DZbN9pEdcfg2rG1Zys=\",\n    \"Signature\": \"MEUCIAZ8A4fgP5TWjXZoAe47qqfktrMrP1/2MMsOM5QsaFiQAiEAn8i8SzpdbGd4wlbbtk6Dws32Ea6aBWtcam+VdUzeHBg=\",\n    \"TimeStamp\": \"1637338394235167000\"\n  },\n  \"group_id\": \"fe2842cb-db6b-4e8a-b007-e83e5603131c\",\n  \"group_name\": \"GO语言学习小组\",\n  \"owner_pubkey\": \"CAISIQOU1kDjMc3cCZRKV/r2bU/IUPukEcdFkIqkFe3Gbqfy+w==\",\n  \"consensus_type\": \"poa\",\n  \"encryption_type\": \"public\",\n  \"cipher_key\": \"835360cc49a5faf385b906b8fd1fb16f31a73c652c65398513070c27a3920550\",\n  \"app_key\": \"group_post\",\n  \"signature\": \"304502204baef7f83e01af403791a96024413deb59ecec7b92f9ae2c18377917e127e6c1022100a4529dc2542aa3f6dc9afd8d14d8bfbcbb3ac33a3a32ca993805a13a77942efe\"\n}\n```\n","slug":"Go语言写的进度条bot","published":1,"updated":"2022-02-17T10:35:49.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekln000a35ct2168a3oj","content":"<p>初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。<br>于是我这就来记录这段学习经历：<br>目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；<br>目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；<br>目的三是让更多的人能够对 Rum 这个新的东西感兴趣。<br>希望能成功达成目的：</p>\n<h2 id=\"Go-语言基础入门\"><a href=\"#Go-语言基础入门\" class=\"headerlink\" title=\"Go 语言基础入门\"></a>Go 语言基础入门</h2><p>学 Go 的出发点是因为大佬们都用 Go 语言来写链上应用。看着他们在群里交流的非常欢乐，文字我都认识，但就不懂他们在讲什么。<br>这种感觉太难受，就像小矮人身在片场却眼巴巴看高等精灵们讲精灵语，脸上还是挂着围笑假装在参与对话。</p>\n<p>然后呢，因为自己喜欢游戏，找了本书叫：<a href=\"https://xue.cn/hub/app/books/236\">Pac Go: A Pac Man clone written in Go\n</a><br>就是用 Go 语言写吃豆人游戏。好，从这本书开始入门 Go。<br>并不是因为作者是美丽的女程序员我才选择的这本书。</p>\n<img src=\"/2022/02/04/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot/author_danicat.png\" class=\"\">\n\n<blockquote>\n<p><strong>并不是</strong></p>\n</blockquote>\n<p><code>P.S. 这本书的链接是链到  [xue.cn](https://xue.cn)  的，是一个可以一边阅读编程教程一边在当前书页运行代码的学习网站。</code></p>\n<p>一边做实例，一边学编程，也非常符合我自己的学习理念。很快我从  <a href=\"https://xue.cn/\">xue.cn</a> 转移到了 github 去学习，上面有 Pac Go 的开源代码。自己 clone 了一份到电脑上，然后通过读 readme 继续学习。</p>\n<p>老实说 Pac Go 的前 5 章我认真跟着学了，后面就没有认真学，而是略读之后，感觉基础语法已经掌握差不多了，就开始用 Go 做自己的项目。<br>因为新的一年快要到了，如何让人即便是年初，也要焦虑起来呢？想到了在 Twitter 上见过的 year progress。把人习以为常的日期，转变成百分比的进度条，会发现，时间怎么这么不经用？这么不经意的流逝掉了？这会让人产生巨大的焦虑感。于是我打算做一个这样的 bot 并到 Rum 上去运行。</p>\n<h2 id=\"Go-语言发送-HTTP-request\"><a href=\"#Go-语言发送-HTTP-request\" class=\"headerlink\" title=\"Go 语言发送 HTTP request\"></a>Go 语言发送 HTTP request</h2><p>理性的角度出发我应该规划一下这个程序的各个功能零件，以及工作流程，然后从生成进度条这一步开始，最后再做发布到 Rum 的 HTTP 请求。但我是小白啊，我野路子啊！我有搞着玩的特权啊！<br>先试着用 Go 写 HTTP 的 Post 请求，发布到 Rum 上看看再说。</p>\n<p>导入Go 语言的 HTTP 包：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;net/http&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>有了这个包，就可以调用 Go 语言的 HTTP 方法了，这里我是随便 google 了一下，了解到 HTTP 到底是个什么东西，HTTP 请求又是怎么发送的。<br>在此建议像我一样的新手小白也自己去研究 HTTP，这个并不难。本文不再花篇幅来讲 HTTP。<br>当然深入研究也会花大量时间，这里用不到那么深入的知识，单独看看 Post 和 Get 两种最常用的 HTTP 请求就好了。</p>\n<p>简单理解了 HTTP 请求，回来继续写自己的代码。</p>\n<p>建立一个 client 用来发送 request。代码是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tr := &amp;http.Transport&#123;</span><br><span class=\"line\">\tTLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">client := &amp;http.Client&#123;Transport: tr&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这一段代码简单的解释是这样的：<br>变量 client 是一个地址，指向了 http 包内的 struct，名为 Client。而这个 Client 里的一个值，也是一个 struct，名为 Transport。将 Transport 里的一个 TLSClientConfig 写入一个 tls 设置，把 InsecureSkipVerify 设置为 true。<br>这里的 tls 是把 HTTP 变成 HTTPS 的一层协议。我们这个设置是为了跳过一个 tls 的验证。因为这个 HTTP 请求的地址就在本地，我们可以不用进行验证。</p>\n<p>client 建立之后我们需要用 client 来发送请求。这段代码是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req, err := http.NewRequest(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;https://127.0.0.1:[Rum节点的端口号]/api/v1/group/content&quot;</span>, body)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treq.Header.Set(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tresp, err := client.Do(req)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> resp.Body.Close()</span><br></pre></td></tr></table></figure>\n\n<p>变量 req 就是我们要发送请求的一个实例了。通过 http.NewRequest 来建立，有三个参数，分别是：<br>“POST”，表示我们的请求是 POST 方法；<br>第二个参数是 URL，端口号可以在 Rum 客户端的“节点与网络”菜单中的“节点参数”中找到；</p>\n<img src=\"/2022/02/04/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot/portnumber.png\" class=\"\">\n\n<p>第三个 body 变量是要 Post 给 Rum 的具体内容。</p>\n<p>接下来设置一个 header，把 header 设置为一个 json 的内容。这是因为 Rum 需要我们发送 json 内容。<br>最后就通过 client.Do(req) 来执行我们设置好的一切，并将请求到的返回值赋值给 resp 变量。这样就通过 Go 完成了一个完整的 HTTP request。</p>\n<p>我把这个完整的 HTTP request 提供如下，整个 request 写成了一个叫 postToRum 的函数，请注意函数里面定义的叫 Payload 的 struct 数据结构是按照 quorum 的格式要求来声明的，内容格式可以自定义的是标题，正文，然后目标种子网络的ID，其他的不用修改：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">postToRum</span><span class=\"params\">(title <span class=\"keyword\">string</span>, content <span class=\"keyword\">string</span>, group <span class=\"keyword\">string</span>, url <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Object <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tType    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;type&quot;`</span></span><br><span class=\"line\">\t\tContent <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;content&quot;`</span></span><br><span class=\"line\">\t\tName    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Target <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tID   <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">\t\tType <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;type&quot;`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Payload <span class=\"keyword\">struct</span> &#123;<span class=\"comment\">//按照 quorum 要求的数据结构进行声明</span></span><br><span class=\"line\">\t\tType   <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;type&quot;`</span></span><br><span class=\"line\">\t\tObject Object <span class=\"string\">`json:&quot;object&quot;`</span></span><br><span class=\"line\">\t\tTarget Target <span class=\"string\">`json:&quot;target&quot;`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttr := &amp;http.Transport&#123;</span><br><span class=\"line\">\t\tTLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclient := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdata := Payload&#123;</span><br><span class=\"line\">\t\tType: <span class=\"string\">&quot;Add&quot;</span>,</span><br><span class=\"line\">\t\tObject: Object&#123;</span><br><span class=\"line\">\t\t\tType:    <span class=\"string\">&quot;Note&quot;</span>,</span><br><span class=\"line\">\t\t\tContent: content,</span><br><span class=\"line\">\t\t\tName:    title,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tTarget: Target&#123;</span><br><span class=\"line\">\t\t\tID:   group,</span><br><span class=\"line\">\t\t\tType: <span class=\"string\">&quot;Group&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpayloadBytes, err := json.Marshal(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err) <span class=\"comment\">// handle err</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(payloadBytes))</span><br><span class=\"line\"></span><br><span class=\"line\">\tbody := bytes.NewReader(payloadBytes)</span><br><span class=\"line\"></span><br><span class=\"line\">\treq, err := http.NewRequest(<span class=\"string\">&quot;POST&quot;</span>, url, body)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treq.Header.Set(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tresp, err := client.Do(req)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> resp.Body.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\treceived, err := ioutil.ReadAll(resp.Body)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(received))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数的四个参数分别是 title 表示标题，content 表示内容，group 用于指定要发布内容的种子网络 ID，最后 url 是要发 POST 请求的目标 url，这里的地址是根据 Rum 的 api 要求来的，读者感兴趣可以自己在 Rum 的 github 主页去看看，这里的话可以直接用我提供的地址。</p>\n<p>值得注意的是，请求的内容主体：body 变量，经过了两次加工：<br>最初是一个 struct，这个 struct 要符合 Rum 的格式要求，我们取名叫 Payload。<br>然后用 Payload 来创建一个叫 data 的实例，给 data 填入了具体的内容。<br>再接下来，用 json.Marshal(data) 方法，把 data 解析成了 json 格式，并赋值给变量 payloadBytes。<br>最后再把 payloadBytes 通过 bytes 包的 bytes.NewReader(payloadBytes) 方法，转变成了能够通过 HTTP POST 方法发送给 Rum 的字符。</p>\n<p>既然写好了这个函数，我也迫不及待的往 Rum 上发了一个 Hello Rum 的消息。<br>于是在 mian 函数里写下如下代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\turl := <span class=\"string\">&quot;https://127.0.0.1:[端口号]/api/v1/group/content&quot;</span></span><br><span class=\"line\">\tpostToRum(<span class=\"string\">&quot;Hello Rum&quot;</span>, <span class=\"string\">&quot;Hello Rum&quot;</span>, <span class=\"string\">&quot;[目标种子网络的ID]&quot;</span>, url)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目标种子网络的 ID 可以在种子网络的详情处获取到，比如“Go语言学习小组”的 ID 是 </p>\n<blockquote>\n<p>fe2842cb-db6b-4e8a-b007-e83e5603131c</p>\n</blockquote>\n<img src=\"/2022/02/04/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot/groupID.png\" class=\"\">\n\n<p>我们填入 ID 就可以往“Go语言学习小组”发送 Hello Rum 了。<br>以上代码的片段忽略掉了一些 Go 语言的一些前置语句，比如包管理的 package 语句，比如引入依赖的包的 import 语句。这里我把代码完整的提供到了 github 仓库里。本系列文章的第一步骤放在了 Step0 文件夹里（因为我们程序员要习惯从零开始）：</p>\n<p><a href=\"https://github.com/hawken-im/yearprogress/tree/main/Step0\">https://github.com/hawken-im/yearprogress/tree/main/Step0</a></p>\n<p>clone 完整代码或者复制粘贴也行，之后在 Step0 目录下执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run main.go</span><br></pre></td></tr></table></figure>\n\n<p>就能看到结果了。</p>\n<p>非常欢迎读者们发送 Hello Rum 到“Go语言学习小组”，小组的种子提供于此：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;genesis_block&quot;: &#123;</span><br><span class=\"line\">    &quot;BlockId&quot;: &quot;7016d356-b42f-421c-a086-094e1f35dbeb&quot;,</span><br><span class=\"line\">    &quot;GroupId&quot;: &quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;,</span><br><span class=\"line\">    &quot;ProducerPubKey&quot;: &quot;CAISIQOU1kDjMc3cCZRKV/r2bU/IUPukEcdFkIqkFe3Gbqfy+w==&quot;,</span><br><span class=\"line\">    &quot;Hash&quot;: &quot;v+kfzMMuwNgb2h1PUAktBk1K9DZbN9pEdcfg2rG1Zys=&quot;,</span><br><span class=\"line\">    &quot;Signature&quot;: &quot;MEUCIAZ8A4fgP5TWjXZoAe47qqfktrMrP1/2MMsOM5QsaFiQAiEAn8i8SzpdbGd4wlbbtk6Dws32Ea6aBWtcam+VdUzeHBg=&quot;,</span><br><span class=\"line\">    &quot;TimeStamp&quot;: &quot;1637338394235167000&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;group_id&quot;: &quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;,</span><br><span class=\"line\">  &quot;group_name&quot;: &quot;GO语言学习小组&quot;,</span><br><span class=\"line\">  &quot;owner_pubkey&quot;: &quot;CAISIQOU1kDjMc3cCZRKV/r2bU/IUPukEcdFkIqkFe3Gbqfy+w==&quot;,</span><br><span class=\"line\">  &quot;consensus_type&quot;: &quot;poa&quot;,</span><br><span class=\"line\">  &quot;encryption_type&quot;: &quot;public&quot;,</span><br><span class=\"line\">  &quot;cipher_key&quot;: &quot;835360cc49a5faf385b906b8fd1fb16f31a73c652c65398513070c27a3920550&quot;,</span><br><span class=\"line\">  &quot;app_key&quot;: &quot;group_post&quot;,</span><br><span class=\"line\">  &quot;signature&quot;: &quot;304502204baef7f83e01af403791a96024413deb59ecec7b92f9ae2c18377917e127e6c1022100a4529dc2542aa3f6dc9afd8d14d8bfbcbb3ac33a3a32ca993805a13a77942efe&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>初学 Go 语言是在去年 11 月 20 日。到今年 2022 年的 2 月 3 日，我写了一个小 bot 连续运行成功，发布到了 github 上开源。花了两个多月时间。我感觉效率还是不错的。<br>于是我这就来记录这段学习经历：<br>目的一是让同样正在跨编程入门这道薛定谔之忽高忽低门槛的小白同学一些参考，更顺利的入门编程；<br>目的二是回顾并巩固自己过去的学习，为下一步继续学习打好基础；<br>目的三是让更多的人能够对 Rum 这个新的东西感兴趣。<br>希望能成功达成目的：</p>\n<h2 id=\"Go-语言基础入门\"><a href=\"#Go-语言基础入门\" class=\"headerlink\" title=\"Go 语言基础入门\"></a>Go 语言基础入门</h2><p>学 Go 的出发点是因为大佬们都用 Go 语言来写链上应用。看着他们在群里交流的非常欢乐，文字我都认识，但就不懂他们在讲什么。<br>这种感觉太难受，就像小矮人身在片场却眼巴巴看高等精灵们讲精灵语，脸上还是挂着围笑假装在参与对话。</p>\n<p>然后呢，因为自己喜欢游戏，找了本书叫：<a href=\"https://xue.cn/hub/app/books/236\">Pac Go: A Pac Man clone written in Go\n</a><br>就是用 Go 语言写吃豆人游戏。好，从这本书开始入门 Go。<br>并不是因为作者是美丽的女程序员我才选择的这本书。</p>\n<img src=\"/2022/02/04/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot/author_danicat.png\" class=\"\">\n\n<blockquote>\n<p><strong>并不是</strong></p>\n</blockquote>\n<p><code>P.S. 这本书的链接是链到  [xue.cn](https://xue.cn)  的，是一个可以一边阅读编程教程一边在当前书页运行代码的学习网站。</code></p>\n<p>一边做实例，一边学编程，也非常符合我自己的学习理念。很快我从  <a href=\"https://xue.cn/\">xue.cn</a> 转移到了 github 去学习，上面有 Pac Go 的开源代码。自己 clone 了一份到电脑上，然后通过读 readme 继续学习。</p>\n<p>老实说 Pac Go 的前 5 章我认真跟着学了，后面就没有认真学，而是略读之后，感觉基础语法已经掌握差不多了，就开始用 Go 做自己的项目。<br>因为新的一年快要到了，如何让人即便是年初，也要焦虑起来呢？想到了在 Twitter 上见过的 year progress。把人习以为常的日期，转变成百分比的进度条，会发现，时间怎么这么不经用？这么不经意的流逝掉了？这会让人产生巨大的焦虑感。于是我打算做一个这样的 bot 并到 Rum 上去运行。</p>\n<h2 id=\"Go-语言发送-HTTP-request\"><a href=\"#Go-语言发送-HTTP-request\" class=\"headerlink\" title=\"Go 语言发送 HTTP request\"></a>Go 语言发送 HTTP request</h2><p>理性的角度出发我应该规划一下这个程序的各个功能零件，以及工作流程，然后从生成进度条这一步开始，最后再做发布到 Rum 的 HTTP 请求。但我是小白啊，我野路子啊！我有搞着玩的特权啊！<br>先试着用 Go 写 HTTP 的 Post 请求，发布到 Rum 上看看再说。</p>\n<p>导入Go 语言的 HTTP 包：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;net/http&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>有了这个包，就可以调用 Go 语言的 HTTP 方法了，这里我是随便 google 了一下，了解到 HTTP 到底是个什么东西，HTTP 请求又是怎么发送的。<br>在此建议像我一样的新手小白也自己去研究 HTTP，这个并不难。本文不再花篇幅来讲 HTTP。<br>当然深入研究也会花大量时间，这里用不到那么深入的知识，单独看看 Post 和 Get 两种最常用的 HTTP 请求就好了。</p>\n<p>简单理解了 HTTP 请求，回来继续写自己的代码。</p>\n<p>建立一个 client 用来发送 request。代码是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tr := &amp;http.Transport&#123;</span><br><span class=\"line\">\tTLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">client := &amp;http.Client&#123;Transport: tr&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这一段代码简单的解释是这样的：<br>变量 client 是一个地址，指向了 http 包内的 struct，名为 Client。而这个 Client 里的一个值，也是一个 struct，名为 Transport。将 Transport 里的一个 TLSClientConfig 写入一个 tls 设置，把 InsecureSkipVerify 设置为 true。<br>这里的 tls 是把 HTTP 变成 HTTPS 的一层协议。我们这个设置是为了跳过一个 tls 的验证。因为这个 HTTP 请求的地址就在本地，我们可以不用进行验证。</p>\n<p>client 建立之后我们需要用 client 来发送请求。这段代码是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req, err := http.NewRequest(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;https://127.0.0.1:[Rum节点的端口号]/api/v1/group/content&quot;</span>, body)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treq.Header.Set(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tresp, err := client.Do(req)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> resp.Body.Close()</span><br></pre></td></tr></table></figure>\n\n<p>变量 req 就是我们要发送请求的一个实例了。通过 http.NewRequest 来建立，有三个参数，分别是：<br>“POST”，表示我们的请求是 POST 方法；<br>第二个参数是 URL，端口号可以在 Rum 客户端的“节点与网络”菜单中的“节点参数”中找到；</p>\n<img src=\"/2022/02/04/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot/portnumber.png\" class=\"\">\n\n<p>第三个 body 变量是要 Post 给 Rum 的具体内容。</p>\n<p>接下来设置一个 header，把 header 设置为一个 json 的内容。这是因为 Rum 需要我们发送 json 内容。<br>最后就通过 client.Do(req) 来执行我们设置好的一切，并将请求到的返回值赋值给 resp 变量。这样就通过 Go 完成了一个完整的 HTTP request。</p>\n<p>我把这个完整的 HTTP request 提供如下，整个 request 写成了一个叫 postToRum 的函数，请注意函数里面定义的叫 Payload 的 struct 数据结构是按照 quorum 的格式要求来声明的，内容格式可以自定义的是标题，正文，然后目标种子网络的ID，其他的不用修改：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">postToRum</span><span class=\"params\">(title <span class=\"keyword\">string</span>, content <span class=\"keyword\">string</span>, group <span class=\"keyword\">string</span>, url <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Object <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tType    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;type&quot;`</span></span><br><span class=\"line\">\t\tContent <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;content&quot;`</span></span><br><span class=\"line\">\t\tName    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Target <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tID   <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">\t\tType <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;type&quot;`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Payload <span class=\"keyword\">struct</span> &#123;<span class=\"comment\">//按照 quorum 要求的数据结构进行声明</span></span><br><span class=\"line\">\t\tType   <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;type&quot;`</span></span><br><span class=\"line\">\t\tObject Object <span class=\"string\">`json:&quot;object&quot;`</span></span><br><span class=\"line\">\t\tTarget Target <span class=\"string\">`json:&quot;target&quot;`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttr := &amp;http.Transport&#123;</span><br><span class=\"line\">\t\tTLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclient := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdata := Payload&#123;</span><br><span class=\"line\">\t\tType: <span class=\"string\">&quot;Add&quot;</span>,</span><br><span class=\"line\">\t\tObject: Object&#123;</span><br><span class=\"line\">\t\t\tType:    <span class=\"string\">&quot;Note&quot;</span>,</span><br><span class=\"line\">\t\t\tContent: content,</span><br><span class=\"line\">\t\t\tName:    title,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tTarget: Target&#123;</span><br><span class=\"line\">\t\t\tID:   group,</span><br><span class=\"line\">\t\t\tType: <span class=\"string\">&quot;Group&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpayloadBytes, err := json.Marshal(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err) <span class=\"comment\">// handle err</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(payloadBytes))</span><br><span class=\"line\"></span><br><span class=\"line\">\tbody := bytes.NewReader(payloadBytes)</span><br><span class=\"line\"></span><br><span class=\"line\">\treq, err := http.NewRequest(<span class=\"string\">&quot;POST&quot;</span>, url, body)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treq.Header.Set(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tresp, err := client.Do(req)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> resp.Body.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\treceived, err := ioutil.ReadAll(resp.Body)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(received))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数的四个参数分别是 title 表示标题，content 表示内容，group 用于指定要发布内容的种子网络 ID，最后 url 是要发 POST 请求的目标 url，这里的地址是根据 Rum 的 api 要求来的，读者感兴趣可以自己在 Rum 的 github 主页去看看，这里的话可以直接用我提供的地址。</p>\n<p>值得注意的是，请求的内容主体：body 变量，经过了两次加工：<br>最初是一个 struct，这个 struct 要符合 Rum 的格式要求，我们取名叫 Payload。<br>然后用 Payload 来创建一个叫 data 的实例，给 data 填入了具体的内容。<br>再接下来，用 json.Marshal(data) 方法，把 data 解析成了 json 格式，并赋值给变量 payloadBytes。<br>最后再把 payloadBytes 通过 bytes 包的 bytes.NewReader(payloadBytes) 方法，转变成了能够通过 HTTP POST 方法发送给 Rum 的字符。</p>\n<p>既然写好了这个函数，我也迫不及待的往 Rum 上发了一个 Hello Rum 的消息。<br>于是在 mian 函数里写下如下代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\turl := <span class=\"string\">&quot;https://127.0.0.1:[端口号]/api/v1/group/content&quot;</span></span><br><span class=\"line\">\tpostToRum(<span class=\"string\">&quot;Hello Rum&quot;</span>, <span class=\"string\">&quot;Hello Rum&quot;</span>, <span class=\"string\">&quot;[目标种子网络的ID]&quot;</span>, url)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目标种子网络的 ID 可以在种子网络的详情处获取到，比如“Go语言学习小组”的 ID 是 </p>\n<blockquote>\n<p>fe2842cb-db6b-4e8a-b007-e83e5603131c</p>\n</blockquote>\n<img src=\"/2022/02/04/Go%E8%AF%AD%E8%A8%80%E5%86%99%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1bot/groupID.png\" class=\"\">\n\n<p>我们填入 ID 就可以往“Go语言学习小组”发送 Hello Rum 了。<br>以上代码的片段忽略掉了一些 Go 语言的一些前置语句，比如包管理的 package 语句，比如引入依赖的包的 import 语句。这里我把代码完整的提供到了 github 仓库里。本系列文章的第一步骤放在了 Step0 文件夹里（因为我们程序员要习惯从零开始）：</p>\n<p><a href=\"https://github.com/hawken-im/yearprogress/tree/main/Step0\">https://github.com/hawken-im/yearprogress/tree/main/Step0</a></p>\n<p>clone 完整代码或者复制粘贴也行，之后在 Step0 目录下执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run main.go</span><br></pre></td></tr></table></figure>\n\n<p>就能看到结果了。</p>\n<p>非常欢迎读者们发送 Hello Rum 到“Go语言学习小组”，小组的种子提供于此：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;genesis_block&quot;: &#123;</span><br><span class=\"line\">    &quot;BlockId&quot;: &quot;7016d356-b42f-421c-a086-094e1f35dbeb&quot;,</span><br><span class=\"line\">    &quot;GroupId&quot;: &quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;,</span><br><span class=\"line\">    &quot;ProducerPubKey&quot;: &quot;CAISIQOU1kDjMc3cCZRKV/r2bU/IUPukEcdFkIqkFe3Gbqfy+w==&quot;,</span><br><span class=\"line\">    &quot;Hash&quot;: &quot;v+kfzMMuwNgb2h1PUAktBk1K9DZbN9pEdcfg2rG1Zys=&quot;,</span><br><span class=\"line\">    &quot;Signature&quot;: &quot;MEUCIAZ8A4fgP5TWjXZoAe47qqfktrMrP1/2MMsOM5QsaFiQAiEAn8i8SzpdbGd4wlbbtk6Dws32Ea6aBWtcam+VdUzeHBg=&quot;,</span><br><span class=\"line\">    &quot;TimeStamp&quot;: &quot;1637338394235167000&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;group_id&quot;: &quot;fe2842cb-db6b-4e8a-b007-e83e5603131c&quot;,</span><br><span class=\"line\">  &quot;group_name&quot;: &quot;GO语言学习小组&quot;,</span><br><span class=\"line\">  &quot;owner_pubkey&quot;: &quot;CAISIQOU1kDjMc3cCZRKV/r2bU/IUPukEcdFkIqkFe3Gbqfy+w==&quot;,</span><br><span class=\"line\">  &quot;consensus_type&quot;: &quot;poa&quot;,</span><br><span class=\"line\">  &quot;encryption_type&quot;: &quot;public&quot;,</span><br><span class=\"line\">  &quot;cipher_key&quot;: &quot;835360cc49a5faf385b906b8fd1fb16f31a73c652c65398513070c27a3920550&quot;,</span><br><span class=\"line\">  &quot;app_key&quot;: &quot;group_post&quot;,</span><br><span class=\"line\">  &quot;signature&quot;: &quot;304502204baef7f83e01af403791a96024413deb59ecec7b92f9ae2c18377917e127e6c1022100a4529dc2542aa3f6dc9afd8d14d8bfbcbb3ac33a3a32ca993805a13a77942efe&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"MAC osx 永久设置zsh的locale为en-US.UTF-8","excerpt":"","date":"2021-01-15T02:28:00.000Z","_content":"\n 之前每次都要输入export locale=en-US.UTF-8\n\n网上的教程也没有讲清楚zsh启动的配置文件到底在哪里。\n\n我这次找到了。\n\n在/etc/zshrc\n\n在这个文件后面加入\n\nexport locale=en-US.UTF-8\n\n就好了。\n\n当然这个文件权限是readonly，要在vim前面加个sudo，这个也是教程没有提到的。","source":"_posts/MAC-osx-永久设置zsh的locale为en-US-UTF-8.md","raw":"---\ntitle: MAC osx 永久设置zsh的locale为en-US.UTF-8\ntags: []\nexcerpt: ''\ndate: 2021-01-15 10:28:00\n---\n\n 之前每次都要输入export locale=en-US.UTF-8\n\n网上的教程也没有讲清楚zsh启动的配置文件到底在哪里。\n\n我这次找到了。\n\n在/etc/zshrc\n\n在这个文件后面加入\n\nexport locale=en-US.UTF-8\n\n就好了。\n\n当然这个文件权限是readonly，要在vim前面加个sudo，这个也是教程没有提到的。","slug":"MAC-osx-永久设置zsh的locale为en-US-UTF-8","published":1,"updated":"2021-07-29T15:17:08.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklp000b35ct2t9eh7jf","content":"<p> 之前每次都要输入export locale&#x3D;en-US.UTF-8</p>\n<p>网上的教程也没有讲清楚zsh启动的配置文件到底在哪里。</p>\n<p>我这次找到了。</p>\n<p>在&#x2F;etc&#x2F;zshrc</p>\n<p>在这个文件后面加入</p>\n<p>export locale&#x3D;en-US.UTF-8</p>\n<p>就好了。</p>\n<p>当然这个文件权限是readonly，要在vim前面加个sudo，这个也是教程没有提到的。</p>\n","site":{"data":{}},"more":"<p> 之前每次都要输入export locale&#x3D;en-US.UTF-8</p>\n<p>网上的教程也没有讲清楚zsh启动的配置文件到底在哪里。</p>\n<p>我这次找到了。</p>\n<p>在&#x2F;etc&#x2F;zshrc</p>\n<p>在这个文件后面加入</p>\n<p>export locale&#x3D;en-US.UTF-8</p>\n<p>就好了。</p>\n<p>当然这个文件权限是readonly，要在vim前面加个sudo，这个也是教程没有提到的。</p>\n"},{"title":"Nginx and Certbot to build a server to support multiple web sites","date":"2021-08-01T08:57:00.000Z","_content":"### Install and config nginx first.\nI followed these two instructions:\n[](https://phoenixnap.com/kb/how-to-install-nginx-on-ubuntu-20-04)\n[](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04)\n\nRemember to config \"sites-available\" seperately, try not to config the global config file, for two reasons:\n1. It'll be easier to maintain.\n2. Certbot is not that clever, so we want to leave the global config file to Certbot.\n\n### Read Certbot manual first then follow quick instructions from Certbot homepage\nFollow the official instructions to install Certbot correctly.\n[](https://certbot.eff.org/instructions)\nThen we need to choose a command to call a plugin to get CA.\nAfter I finished reading, I found out many unofficial instructions online are outdated. \n[](https://certbot.eff.org/docs/using.html#nginx)\nIf we install Certbot correctly, we only need to use command:\n```\ncertbot --nginx\n```\nThen Certbot can do all for you. Even can create a cron job to renew certificate automatically.","source":"_posts/Nginx-and-Certbot-to-build-a-server-to-support-multiple-web-sites.md","raw":"---\ntitle: Nginx and Certbot to build a server to support multiple web sites\ndate: 2021-08-01 16:57:00\ntags:\n---\n### Install and config nginx first.\nI followed these two instructions:\n[](https://phoenixnap.com/kb/how-to-install-nginx-on-ubuntu-20-04)\n[](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04)\n\nRemember to config \"sites-available\" seperately, try not to config the global config file, for two reasons:\n1. It'll be easier to maintain.\n2. Certbot is not that clever, so we want to leave the global config file to Certbot.\n\n### Read Certbot manual first then follow quick instructions from Certbot homepage\nFollow the official instructions to install Certbot correctly.\n[](https://certbot.eff.org/instructions)\nThen we need to choose a command to call a plugin to get CA.\nAfter I finished reading, I found out many unofficial instructions online are outdated. \n[](https://certbot.eff.org/docs/using.html#nginx)\nIf we install Certbot correctly, we only need to use command:\n```\ncertbot --nginx\n```\nThen Certbot can do all for you. Even can create a cron job to renew certificate automatically.","slug":"Nginx-and-Certbot-to-build-a-server-to-support-multiple-web-sites","published":1,"updated":"2021-08-01T09:20:33.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklq000c35ct5m4f4w6w","content":"<h3 id=\"Install-and-config-nginx-first\"><a href=\"#Install-and-config-nginx-first\" class=\"headerlink\" title=\"Install and config nginx first.\"></a>Install and config nginx first.</h3><p>I followed these two instructions:<br><a href=\"https://phoenixnap.com/kb/how-to-install-nginx-on-ubuntu-20-04\"></a><br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\"></a></p>\n<p>Remember to config “sites-available” seperately, try not to config the global config file, for two reasons:</p>\n<ol>\n<li>It’ll be easier to maintain.</li>\n<li>Certbot is not that clever, so we want to leave the global config file to Certbot.</li>\n</ol>\n<h3 id=\"Read-Certbot-manual-first-then-follow-quick-instructions-from-Certbot-homepage\"><a href=\"#Read-Certbot-manual-first-then-follow-quick-instructions-from-Certbot-homepage\" class=\"headerlink\" title=\"Read Certbot manual first then follow quick instructions from Certbot homepage\"></a>Read Certbot manual first then follow quick instructions from Certbot homepage</h3><p>Follow the official instructions to install Certbot correctly.<br><a href=\"https://certbot.eff.org/instructions\"></a><br>Then we need to choose a command to call a plugin to get CA.<br>After I finished reading, I found out many unofficial instructions online are outdated.<br><a href=\"https://certbot.eff.org/docs/using.html#nginx\"></a><br>If we install Certbot correctly, we only need to use command:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot --nginx</span><br></pre></td></tr></table></figure>\n<p>Then Certbot can do all for you. Even can create a cron job to renew certificate automatically.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Install-and-config-nginx-first\"><a href=\"#Install-and-config-nginx-first\" class=\"headerlink\" title=\"Install and config nginx first.\"></a>Install and config nginx first.</h3><p>I followed these two instructions:<br><a href=\"https://phoenixnap.com/kb/how-to-install-nginx-on-ubuntu-20-04\"></a><br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\"></a></p>\n<p>Remember to config “sites-available” seperately, try not to config the global config file, for two reasons:</p>\n<ol>\n<li>It’ll be easier to maintain.</li>\n<li>Certbot is not that clever, so we want to leave the global config file to Certbot.</li>\n</ol>\n<h3 id=\"Read-Certbot-manual-first-then-follow-quick-instructions-from-Certbot-homepage\"><a href=\"#Read-Certbot-manual-first-then-follow-quick-instructions-from-Certbot-homepage\" class=\"headerlink\" title=\"Read Certbot manual first then follow quick instructions from Certbot homepage\"></a>Read Certbot manual first then follow quick instructions from Certbot homepage</h3><p>Follow the official instructions to install Certbot correctly.<br><a href=\"https://certbot.eff.org/instructions\"></a><br>Then we need to choose a command to call a plugin to get CA.<br>After I finished reading, I found out many unofficial instructions online are outdated.<br><a href=\"https://certbot.eff.org/docs/using.html#nginx\"></a><br>If we install Certbot correctly, we only need to use command:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot --nginx</span><br></pre></td></tr></table></figure>\n<p>Then Certbot can do all for you. Even can create a cron job to renew certificate automatically.</p>\n"},{"title":"Notes Of Learning Go","date":"2021-11-18T16:31:26.000Z","_content":"\n---\n\nSun Nov 21\n今天的 Leetcode 练习是：\n把罗马数字转化成整数，很有趣的一个小练习（也许是简单容易理解才觉得有趣哈哈）。\n然后我对 Go 还不熟悉，还不知道 Go 里面也有类似 Json 的数据结构。\n最后看了solution。发现别人的解题思路很棒，很直接。最后采用了她的思路。\n\n---\n\nSat Nov 20\n\n今天打算开始每天一个 Leetcode。\n试着做了一个递归小函数，这种在以前初学编程的时候感觉好难好难，在 Leetcode 上居然是 easy 级别。程序员真厉害。\nhttps://github.com/hawken-im/GoLeetCode\n\n---\n\nSat Nov 19\n\n先是在 xue.cn 上找了书但是发现有bug，然后在github上找到了该repo的地址就干脆在 github 里学习了吧。\nhttps://github.com/danicat/pacgo/\n\n函数中有个叫“defer”的东西，后来去研究了，是一个很方便的语句，可以记录当前的状态但是延迟到函数结束再执行。\n\n然后还学了ansi escape code，一个很奇怪的控制命令行窗口的代码……掌握这个奇怪的知识有啥用吗，还是说这个知识点背后还有点别的有连续性的知识体系，暂时没有继续研究下去。\n","source":"_posts/NotesOfLearningGo.md","raw":"---\ntitle: Notes Of Learning Go\ndate: 2021-11-19 00:31:26\ntags:\n---\n\n---\n\nSun Nov 21\n今天的 Leetcode 练习是：\n把罗马数字转化成整数，很有趣的一个小练习（也许是简单容易理解才觉得有趣哈哈）。\n然后我对 Go 还不熟悉，还不知道 Go 里面也有类似 Json 的数据结构。\n最后看了solution。发现别人的解题思路很棒，很直接。最后采用了她的思路。\n\n---\n\nSat Nov 20\n\n今天打算开始每天一个 Leetcode。\n试着做了一个递归小函数，这种在以前初学编程的时候感觉好难好难，在 Leetcode 上居然是 easy 级别。程序员真厉害。\nhttps://github.com/hawken-im/GoLeetCode\n\n---\n\nSat Nov 19\n\n先是在 xue.cn 上找了书但是发现有bug，然后在github上找到了该repo的地址就干脆在 github 里学习了吧。\nhttps://github.com/danicat/pacgo/\n\n函数中有个叫“defer”的东西，后来去研究了，是一个很方便的语句，可以记录当前的状态但是延迟到函数结束再执行。\n\n然后还学了ansi escape code，一个很奇怪的控制命令行窗口的代码……掌握这个奇怪的知识有啥用吗，还是说这个知识点背后还有点别的有连续性的知识体系，暂时没有继续研究下去。\n","slug":"NotesOfLearningGo","published":1,"updated":"2021-11-21T06:46:11.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklq000d35ct3hdve58q","content":"<hr>\n<p>Sun Nov 21<br>今天的 Leetcode 练习是：<br>把罗马数字转化成整数，很有趣的一个小练习（也许是简单容易理解才觉得有趣哈哈）。<br>然后我对 Go 还不熟悉，还不知道 Go 里面也有类似 Json 的数据结构。<br>最后看了solution。发现别人的解题思路很棒，很直接。最后采用了她的思路。</p>\n<hr>\n<p>Sat Nov 20</p>\n<p>今天打算开始每天一个 Leetcode。<br>试着做了一个递归小函数，这种在以前初学编程的时候感觉好难好难，在 Leetcode 上居然是 easy 级别。程序员真厉害。<br><a href=\"https://github.com/hawken-im/GoLeetCode\">https://github.com/hawken-im/GoLeetCode</a></p>\n<hr>\n<p>Sat Nov 19</p>\n<p>先是在 xue.cn 上找了书但是发现有bug，然后在github上找到了该repo的地址就干脆在 github 里学习了吧。<br><a href=\"https://github.com/danicat/pacgo/\">https://github.com/danicat/pacgo/</a></p>\n<p>函数中有个叫“defer”的东西，后来去研究了，是一个很方便的语句，可以记录当前的状态但是延迟到函数结束再执行。</p>\n<p>然后还学了ansi escape code，一个很奇怪的控制命令行窗口的代码……掌握这个奇怪的知识有啥用吗，还是说这个知识点背后还有点别的有连续性的知识体系，暂时没有继续研究下去。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>Sun Nov 21<br>今天的 Leetcode 练习是：<br>把罗马数字转化成整数，很有趣的一个小练习（也许是简单容易理解才觉得有趣哈哈）。<br>然后我对 Go 还不熟悉，还不知道 Go 里面也有类似 Json 的数据结构。<br>最后看了solution。发现别人的解题思路很棒，很直接。最后采用了她的思路。</p>\n<hr>\n<p>Sat Nov 20</p>\n<p>今天打算开始每天一个 Leetcode。<br>试着做了一个递归小函数，这种在以前初学编程的时候感觉好难好难，在 Leetcode 上居然是 easy 级别。程序员真厉害。<br><a href=\"https://github.com/hawken-im/GoLeetCode\">https://github.com/hawken-im/GoLeetCode</a></p>\n<hr>\n<p>Sat Nov 19</p>\n<p>先是在 xue.cn 上找了书但是发现有bug，然后在github上找到了该repo的地址就干脆在 github 里学习了吧。<br><a href=\"https://github.com/danicat/pacgo/\">https://github.com/danicat/pacgo/</a></p>\n<p>函数中有个叫“defer”的东西，后来去研究了，是一个很方便的语句，可以记录当前的状态但是延迟到函数结束再执行。</p>\n<p>然后还学了ansi escape code，一个很奇怪的控制命令行窗口的代码……掌握这个奇怪的知识有啥用吗，还是说这个知识点背后还有点别的有连续性的知识体系，暂时没有继续研究下去。</p>\n"},{"title":"SSH创建密钥登陆远程服务器","excerpt":"","date":"2019-11-23T16:53:00.000Z","_content":"\n网上教程太多了，这里简单做个笔记好了：  \n在本地terminal输入：  \nssh-keygen  \n生成密钥对  \n要不要给密钥加密，我选择的是加密  \n输入了一个超长超难的密码，“就不告诉你密码系列”，图个开心  \n然后把密钥上传到服务器就好  \n上传方法是，本地terminal输入：  \nssh-copy-id user@host  \n输入成功后可以到服务器上把ssh配置修改为不允许密码登陆  \n方法是，登入服务器找到ssh配置文件，通常在/etc/ssh/ssh\\_config  \n在文件内找到  \n\\# PasswordAuthentication yes  \n去掉注释后把yes改成no  \n完毕","source":"_posts/SSH创建密钥登陆远程服务器.md","raw":"---\ntitle: SSH创建密钥登陆远程服务器\ntags: []\nexcerpt: ''\ndate: 2019-11-24 00:53:00\n---\n\n网上教程太多了，这里简单做个笔记好了：  \n在本地terminal输入：  \nssh-keygen  \n生成密钥对  \n要不要给密钥加密，我选择的是加密  \n输入了一个超长超难的密码，“就不告诉你密码系列”，图个开心  \n然后把密钥上传到服务器就好  \n上传方法是，本地terminal输入：  \nssh-copy-id user@host  \n输入成功后可以到服务器上把ssh配置修改为不允许密码登陆  \n方法是，登入服务器找到ssh配置文件，通常在/etc/ssh/ssh\\_config  \n在文件内找到  \n\\# PasswordAuthentication yes  \n去掉注释后把yes改成no  \n完毕","slug":"SSH创建密钥登陆远程服务器","published":1,"updated":"2021-07-29T15:17:08.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklr000e35ctahjq5ons","content":"<p>网上教程太多了，这里简单做个笔记好了：<br>在本地terminal输入：<br>ssh-keygen<br>生成密钥对<br>要不要给密钥加密，我选择的是加密<br>输入了一个超长超难的密码，“就不告诉你密码系列”，图个开心<br>然后把密钥上传到服务器就好<br>上传方法是，本地terminal输入：<br>ssh-copy-id user@host<br>输入成功后可以到服务器上把ssh配置修改为不允许密码登陆<br>方法是，登入服务器找到ssh配置文件，通常在&#x2F;etc&#x2F;ssh&#x2F;ssh_config<br>在文件内找到<br># PasswordAuthentication yes<br>去掉注释后把yes改成no<br>完毕</p>\n","site":{"data":{}},"more":"<p>网上教程太多了，这里简单做个笔记好了：<br>在本地terminal输入：<br>ssh-keygen<br>生成密钥对<br>要不要给密钥加密，我选择的是加密<br>输入了一个超长超难的密码，“就不告诉你密码系列”，图个开心<br>然后把密钥上传到服务器就好<br>上传方法是，本地terminal输入：<br>ssh-copy-id user@host<br>输入成功后可以到服务器上把ssh配置修改为不允许密码登陆<br>方法是，登入服务器找到ssh配置文件，通常在&#x2F;etc&#x2F;ssh&#x2F;ssh_config<br>在文件内找到<br># PasswordAuthentication yes<br>去掉注释后把yes改成no<br>完毕</p>\n"},{"title":"Setting up another Mosh for my another server: lol.o0o.lol","excerpt":"","date":"2021-05-13T14:43:00.000Z","_content":"\nfollow the instructions showing on the website of mosh: \n\nmosh.org","source":"_posts/Setting-up-another-Mosh-for-my-another-server-lol-o0o-lol.md","raw":"---\ntitle: 'Setting up another Mosh for my another server: lol.o0o.lol'\ntags: []\nexcerpt: ''\ndate: 2021-05-13 22:43:00\n---\n\nfollow the instructions showing on the website of mosh: \n\nmosh.org","slug":"Setting-up-another-Mosh-for-my-another-server-lol-o0o-lol","published":1,"updated":"2021-07-29T15:17:08.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekls000f35ct2yjfdgl0","content":"<p>follow the instructions showing on the website of mosh: </p>\n<p>mosh.org</p>\n","site":{"data":{}},"more":"<p>follow the instructions showing on the website of mosh: </p>\n<p>mosh.org</p>\n"},{"title":"This instruction for install docker is better than the official docs:","excerpt":"","date":"2021-05-14T16:15:00.000Z","_content":"\n https://linuxize.com/post/how-to-install-and-use-docker-on-ubuntu-20-04/","source":"_posts/This-instruction-for-install-docker-is-better-than-the-official-docs.md","raw":"---\ntitle: 'This instruction for install docker is better than the official docs:'\ntags: []\nexcerpt: ''\ndate: 2021-05-15 00:15:00\n---\n\n https://linuxize.com/post/how-to-install-and-use-docker-on-ubuntu-20-04/","slug":"This-instruction-for-install-docker-is-better-than-the-official-docs","published":1,"updated":"2021-07-29T15:17:08.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklu000g35ctfv3w7voc","content":"<p> <a href=\"https://linuxize.com/post/how-to-install-and-use-docker-on-ubuntu-20-04/\">https://linuxize.com/post/how-to-install-and-use-docker-on-ubuntu-20-04/</a></p>\n","site":{"data":{}},"more":"<p> <a href=\"https://linuxize.com/post/how-to-install-and-use-docker-on-ubuntu-20-04/\">https://linuxize.com/post/how-to-install-and-use-docker-on-ubuntu-20-04/</a></p>\n"},{"title":"Untitled Post - 1","excerpt":"","date":"2020-03-19T16:21:00.000Z","_content":"\n在虚拟环境运行已经成功了。但是链接nginx出现了502错误。  \n找了这个教程。明天再来研究吧。  \n  \n[https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-gunicorn/](https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-gunicorn/)  \n  \n  \n成功解决了这个问题，教程用的是：  \n[https://linoxide.com/linux-how-to/install-flask-python-ubuntu/](https://linoxide.com/linux-how-to/install-flask-python-ubuntu/)  \n[https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04](https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04)  \n  \n两个互相看一下。  \n一开始我用的root账号，后来自己新建了一个账号就成功了。","source":"_posts/Untitled-Post-1.md","raw":"---\ntitle: Untitled Post - 1\ntags: []\nexcerpt: ''\ndate: 2020-03-20 00:21:00\n---\n\n在虚拟环境运行已经成功了。但是链接nginx出现了502错误。  \n找了这个教程。明天再来研究吧。  \n  \n[https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-gunicorn/](https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-gunicorn/)  \n  \n  \n成功解决了这个问题，教程用的是：  \n[https://linoxide.com/linux-how-to/install-flask-python-ubuntu/](https://linoxide.com/linux-how-to/install-flask-python-ubuntu/)  \n[https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04](https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04)  \n  \n两个互相看一下。  \n一开始我用的root账号，后来自己新建了一个账号就成功了。","slug":"Untitled-Post-1","published":1,"updated":"2021-07-29T15:17:08.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklu000h35ctdvjd89no","content":"<p>在虚拟环境运行已经成功了。但是链接nginx出现了502错误。<br>找了这个教程。明天再来研究吧。  </p>\n<p><a href=\"https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-gunicorn/\">https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-gunicorn/</a>  </p>\n<p>成功解决了这个问题，教程用的是：<br><a href=\"https://linoxide.com/linux-how-to/install-flask-python-ubuntu/\">https://linoxide.com/linux-how-to/install-flask-python-ubuntu/</a><br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04\">https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04</a>  </p>\n<p>两个互相看一下。<br>一开始我用的root账号，后来自己新建了一个账号就成功了。</p>\n","site":{"data":{}},"more":"<p>在虚拟环境运行已经成功了。但是链接nginx出现了502错误。<br>找了这个教程。明天再来研究吧。  </p>\n<p><a href=\"https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-gunicorn/\">https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-gunicorn/</a>  </p>\n<p>成功解决了这个问题，教程用的是：<br><a href=\"https://linoxide.com/linux-how-to/install-flask-python-ubuntu/\">https://linoxide.com/linux-how-to/install-flask-python-ubuntu/</a><br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04\">https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04</a>  </p>\n<p>两个互相看一下。<br>一开始我用的root账号，后来自己新建了一个账号就成功了。</p>\n"},{"title":"how to fix apt-get","excerpt":"","date":"2021-05-13T09:55:00.000Z","_content":"\n https://futurestud.io/tutorials/how-to-fix-ubuntu-debian-apt-get-404-not-found-repository-errors","source":"_posts/how-to-fix-apt-get.md","raw":"---\ntitle: how to fix apt-get\ntags: []\nexcerpt: ''\ndate: 2021-05-13 17:55:00\n---\n\n https://futurestud.io/tutorials/how-to-fix-ubuntu-debian-apt-get-404-not-found-repository-errors","slug":"how-to-fix-apt-get","published":1,"updated":"2021-07-29T15:17:08.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklv000i35ct0m9fhmfz","content":"<p> <a href=\"https://futurestud.io/tutorials/how-to-fix-ubuntu-debian-apt-get-404-not-found-repository-errors\">https://futurestud.io/tutorials/how-to-fix-ubuntu-debian-apt-get-404-not-found-repository-errors</a></p>\n","site":{"data":{}},"more":"<p> <a href=\"https://futurestud.io/tutorials/how-to-fix-ubuntu-debian-apt-get-404-not-found-repository-errors\">https://futurestud.io/tutorials/how-to-fix-ubuntu-debian-apt-get-404-not-found-repository-errors</a></p>\n"},{"title":"画 - 思绪大乱炖","date":"2022-06-09T16:31:14.000Z","_content":"昨晚听了朱利安大王的世界历史课的第一讲。\n脑子里是一团乱麻还没有理出头绪。\n直到今天和团队的大佬聊起 AI 作画。\n\n我们知道，在 AI 擅长的领域，人类早已一败涂地。而现在艺术领域遭到 AI 的大举进攻。\n近一两年时间看到了很多很掉 san 值的 AI 作画，可以说看到 AI 画的这么烂，有点失望也有点安心。\n可就在前不久，一个叫 Disco Diffusion 的 AI 作画引擎大火。看到这个 AI 的作品，心情从失望+安心这种奇怪的混合，变成激动+担忧。\n\n这里引用西乔的文章来介绍一下这个 AI 作画工具：\n[引用]\n\n一想到这个 AI 也许在人类睡大觉的时候也不眠不休的在学习人类的绘画作品，有点渗人呢。\n\nAI 不眠不休的学习人类，这种焦虑刺激着我认真听课，学习人类：\n{% asset_img lesson1.png%}\n\n朱利安大王的人类历史课，一共有七讲。\n刚刚听完第一讲，主要是两个部分：\n一，人类作为生物这种存在本身\n二，人类早期的文明\n\n人类这种生物，可以说是进化树上开出的一朵奇葩了。\n\n门-纲-目-科-属-种。\n在属和种这两个分支，智人都是独一无二的存在。上溯到科，也仅有几种猩猩和人放在一起。相较别的物种，一个科下面上百个属上千个种，都是很正常的。\n我们在进化树这个大树上伸出一根长长的光溜溜的树枝，都快伸到外星去了。\n\n上亿年的生物进化史，智人的出现才十万年。而且这十万年间，考古查证的其他人属人种生物被排挤的一干二净。这个是 Wikipedia 上扒下来的人类种的时间线：\n{% asset_img timeline.jpg %}\n\n看看，几百万年漫长的直立人种历史，在最近2万年左右，尼安德特人消亡，只剩下智人，也就是我们。\n凭什么智人剩下来了，尼安德特人和其他人种到哪里去了，目前是未解之谜。\n\n作为一种动物，人类搞不明白人类自己。\n\n而作为一种建立了文明的智慧生物，嗨，看看人类在地球上都干了些什么。\n\n这里有个概念：世界上最长的步行路线（the Longest Walkable Distance on Earth）\n有个网站介绍了这个路线：\n[https://www.popularmechanics.com/science/a30285283/longest-walkable-distance-earth/](https://www.popularmechanics.com/science/a30285283/longest-walkable-distance-earth/)\n\n{% asset_img road.png %}\n\ntest\n![](road.png)\n\n这条路全程都可以步行通过。长度是14000英里。喜欢徒步的人应该知道，人一天大概可以走50公里，差不多是30英里。我们算一下：14000/30=466天。\n一年多。\n一个人在理想的情况下（有吃有喝有住）就这么走下去，一年多可以穿过整个亚非欧三个大陆。\n再对比智人存在的9万年时间，是不是太长了点，足够我们走遍全世界了。\n智人的迁徙路线：\n{% asset_img homo.png %}\n\n祖先在几万年前走遍全世界，看看我们现在，有了汽车，飞机，火车，远洋巨轮。我们却被自己在地图上画的那一根根线，圈了起来，哪儿都去不了。\n\n我在[元宇宙三问]这篇文章中就说，人类以后也许再也没有自由迁徙的日子了，统统到虚拟世界去当电池，赚取维持肉身存活的营养液吧。\n\n朱利安大王讲到史前文明的壁画。\n首先这是3万年前的史前壁画，发现于法国拉斯科洞穴。\n{% asset_img lsk1.jpg %}\n一头充满细节的牛\n\n{% asset_img lsk2.jpg %}\n整体观感\n\n大王还提到了另一处史前壁画：\n阿根廷平图拉斯河，手洞。\n叫它手洞是因为真的有很多只手：\n{% asset_img hand.jpg %}\n\n跟前面的法国拉斯科洞穴一样，也有动物：\n{% asset_img sd2.jpg %}\n\n甚至还有涂鸦：\n{% asset_img sd3.jpg %}\n\n我看了第一反应，和其他同学一样，觉得法国拉斯科洞穴的画更漂亮。\n我们来对比一下两处壁画的年代：\n- 法国拉斯科洞穴，3万年前。\n- 阿根廷平图拉斯河手洞，复杂些：\n动物（其实是大羊驼），9000年前；\n涂鸦，7300多年前；\n手，公元前550年左右……\n\n3万年前的壁画比两万年以后的涂鸦明显漂亮，说明3万年前的人类更聪明吗？\n\n来看看身边有多少孩子到处乱涂乱画吧。\n合理的解释是，后来的人类技术更先进，更容易获得颜料和作画工具，更多不专业的人都可以画壁画，甚至是熊孩子。\n{% asset_img dingjinhao.jpg %}\n\n以前的画家，为了赚取生活费，要给王公贵族打工，给他们画肖像画。或者给神仙打工，给上帝画壁画。那时候颜料也贵，没人付钱的话，画家不太可能自己凭借兴趣爱好画个什么风景画。\n\n周末去参观了印象派的绘画展。\n\n{% asset_img yxp.jpg %}\n激发印象派画家开创印象派的很重要的一个动因是，相机的发明。\n对啊，都有照片，我没必要以写实为目的来画画了。或者，不是没必要而是没需求了。那个时候的画家面对相机的心情是怎样的呢？是否跟现在的艺术家们面对 AI 绘画的心情一样呢？\n\n至少，我看到艺术家们从此开创了越来越多的艺术形式，开始奔放地表达着自己，无论是好坏美丑善恶或者表达不好不坏反正就什么都不是的或者表达凭什么要这样非要是什么不是什么的艺术。\n\n现在我请 AI 帮我画了一幅画来具象化我们当前的一种状态：\n{% asset_img qrp.png %}\n\n感谢 AI 帮我这样一艺术白丁也能用艺术创作来表达自己。\n总之，我们走着瞧吧。","source":"_posts/itsgettingbadorbetter.md","raw":"---\ntitle: 画 - 思绪大乱炖\ndate: 2022-06-10 00:31:14\ntags:\n---\n昨晚听了朱利安大王的世界历史课的第一讲。\n脑子里是一团乱麻还没有理出头绪。\n直到今天和团队的大佬聊起 AI 作画。\n\n我们知道，在 AI 擅长的领域，人类早已一败涂地。而现在艺术领域遭到 AI 的大举进攻。\n近一两年时间看到了很多很掉 san 值的 AI 作画，可以说看到 AI 画的这么烂，有点失望也有点安心。\n可就在前不久，一个叫 Disco Diffusion 的 AI 作画引擎大火。看到这个 AI 的作品，心情从失望+安心这种奇怪的混合，变成激动+担忧。\n\n这里引用西乔的文章来介绍一下这个 AI 作画工具：\n[引用]\n\n一想到这个 AI 也许在人类睡大觉的时候也不眠不休的在学习人类的绘画作品，有点渗人呢。\n\nAI 不眠不休的学习人类，这种焦虑刺激着我认真听课，学习人类：\n{% asset_img lesson1.png%}\n\n朱利安大王的人类历史课，一共有七讲。\n刚刚听完第一讲，主要是两个部分：\n一，人类作为生物这种存在本身\n二，人类早期的文明\n\n人类这种生物，可以说是进化树上开出的一朵奇葩了。\n\n门-纲-目-科-属-种。\n在属和种这两个分支，智人都是独一无二的存在。上溯到科，也仅有几种猩猩和人放在一起。相较别的物种，一个科下面上百个属上千个种，都是很正常的。\n我们在进化树这个大树上伸出一根长长的光溜溜的树枝，都快伸到外星去了。\n\n上亿年的生物进化史，智人的出现才十万年。而且这十万年间，考古查证的其他人属人种生物被排挤的一干二净。这个是 Wikipedia 上扒下来的人类种的时间线：\n{% asset_img timeline.jpg %}\n\n看看，几百万年漫长的直立人种历史，在最近2万年左右，尼安德特人消亡，只剩下智人，也就是我们。\n凭什么智人剩下来了，尼安德特人和其他人种到哪里去了，目前是未解之谜。\n\n作为一种动物，人类搞不明白人类自己。\n\n而作为一种建立了文明的智慧生物，嗨，看看人类在地球上都干了些什么。\n\n这里有个概念：世界上最长的步行路线（the Longest Walkable Distance on Earth）\n有个网站介绍了这个路线：\n[https://www.popularmechanics.com/science/a30285283/longest-walkable-distance-earth/](https://www.popularmechanics.com/science/a30285283/longest-walkable-distance-earth/)\n\n{% asset_img road.png %}\n\ntest\n![](road.png)\n\n这条路全程都可以步行通过。长度是14000英里。喜欢徒步的人应该知道，人一天大概可以走50公里，差不多是30英里。我们算一下：14000/30=466天。\n一年多。\n一个人在理想的情况下（有吃有喝有住）就这么走下去，一年多可以穿过整个亚非欧三个大陆。\n再对比智人存在的9万年时间，是不是太长了点，足够我们走遍全世界了。\n智人的迁徙路线：\n{% asset_img homo.png %}\n\n祖先在几万年前走遍全世界，看看我们现在，有了汽车，飞机，火车，远洋巨轮。我们却被自己在地图上画的那一根根线，圈了起来，哪儿都去不了。\n\n我在[元宇宙三问]这篇文章中就说，人类以后也许再也没有自由迁徙的日子了，统统到虚拟世界去当电池，赚取维持肉身存活的营养液吧。\n\n朱利安大王讲到史前文明的壁画。\n首先这是3万年前的史前壁画，发现于法国拉斯科洞穴。\n{% asset_img lsk1.jpg %}\n一头充满细节的牛\n\n{% asset_img lsk2.jpg %}\n整体观感\n\n大王还提到了另一处史前壁画：\n阿根廷平图拉斯河，手洞。\n叫它手洞是因为真的有很多只手：\n{% asset_img hand.jpg %}\n\n跟前面的法国拉斯科洞穴一样，也有动物：\n{% asset_img sd2.jpg %}\n\n甚至还有涂鸦：\n{% asset_img sd3.jpg %}\n\n我看了第一反应，和其他同学一样，觉得法国拉斯科洞穴的画更漂亮。\n我们来对比一下两处壁画的年代：\n- 法国拉斯科洞穴，3万年前。\n- 阿根廷平图拉斯河手洞，复杂些：\n动物（其实是大羊驼），9000年前；\n涂鸦，7300多年前；\n手，公元前550年左右……\n\n3万年前的壁画比两万年以后的涂鸦明显漂亮，说明3万年前的人类更聪明吗？\n\n来看看身边有多少孩子到处乱涂乱画吧。\n合理的解释是，后来的人类技术更先进，更容易获得颜料和作画工具，更多不专业的人都可以画壁画，甚至是熊孩子。\n{% asset_img dingjinhao.jpg %}\n\n以前的画家，为了赚取生活费，要给王公贵族打工，给他们画肖像画。或者给神仙打工，给上帝画壁画。那时候颜料也贵，没人付钱的话，画家不太可能自己凭借兴趣爱好画个什么风景画。\n\n周末去参观了印象派的绘画展。\n\n{% asset_img yxp.jpg %}\n激发印象派画家开创印象派的很重要的一个动因是，相机的发明。\n对啊，都有照片，我没必要以写实为目的来画画了。或者，不是没必要而是没需求了。那个时候的画家面对相机的心情是怎样的呢？是否跟现在的艺术家们面对 AI 绘画的心情一样呢？\n\n至少，我看到艺术家们从此开创了越来越多的艺术形式，开始奔放地表达着自己，无论是好坏美丑善恶或者表达不好不坏反正就什么都不是的或者表达凭什么要这样非要是什么不是什么的艺术。\n\n现在我请 AI 帮我画了一幅画来具象化我们当前的一种状态：\n{% asset_img qrp.png %}\n\n感谢 AI 帮我这样一艺术白丁也能用艺术创作来表达自己。\n总之，我们走着瞧吧。","slug":"itsgettingbadorbetter","published":1,"updated":"2022-07-20T17:46:21.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklv000j35ctakz7d2eq","content":"<p>昨晚听了朱利安大王的世界历史课的第一讲。<br>脑子里是一团乱麻还没有理出头绪。<br>直到今天和团队的大佬聊起 AI 作画。</p>\n<p>我们知道，在 AI 擅长的领域，人类早已一败涂地。而现在艺术领域遭到 AI 的大举进攻。<br>近一两年时间看到了很多很掉 san 值的 AI 作画，可以说看到 AI 画的这么烂，有点失望也有点安心。<br>可就在前不久，一个叫 Disco Diffusion 的 AI 作画引擎大火。看到这个 AI 的作品，心情从失望+安心这种奇怪的混合，变成激动+担忧。</p>\n<p>这里引用西乔的文章来介绍一下这个 AI 作画工具：<br>[引用]</p>\n<p>一想到这个 AI 也许在人类睡大觉的时候也不眠不休的在学习人类的绘画作品，有点渗人呢。</p>\n<p>AI 不眠不休的学习人类，这种焦虑刺激着我认真听课，学习人类：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/lesson1.png\" class=\"\">\n\n<p>朱利安大王的人类历史课，一共有七讲。<br>刚刚听完第一讲，主要是两个部分：<br>一，人类作为生物这种存在本身<br>二，人类早期的文明</p>\n<p>人类这种生物，可以说是进化树上开出的一朵奇葩了。</p>\n<p>门-纲-目-科-属-种。<br>在属和种这两个分支，智人都是独一无二的存在。上溯到科，也仅有几种猩猩和人放在一起。相较别的物种，一个科下面上百个属上千个种，都是很正常的。<br>我们在进化树这个大树上伸出一根长长的光溜溜的树枝，都快伸到外星去了。</p>\n<p>上亿年的生物进化史，智人的出现才十万年。而且这十万年间，考古查证的其他人属人种生物被排挤的一干二净。这个是 Wikipedia 上扒下来的人类种的时间线：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/timeline.jpg\" class=\"\">\n\n<p>看看，几百万年漫长的直立人种历史，在最近2万年左右，尼安德特人消亡，只剩下智人，也就是我们。<br>凭什么智人剩下来了，尼安德特人和其他人种到哪里去了，目前是未解之谜。</p>\n<p>作为一种动物，人类搞不明白人类自己。</p>\n<p>而作为一种建立了文明的智慧生物，嗨，看看人类在地球上都干了些什么。</p>\n<p>这里有个概念：世界上最长的步行路线（the Longest Walkable Distance on Earth）<br>有个网站介绍了这个路线：<br><a href=\"https://www.popularmechanics.com/science/a30285283/longest-walkable-distance-earth/\">https://www.popularmechanics.com/science/a30285283/longest-walkable-distance-earth/</a></p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/road.png\" class=\"\">\n\n<p>test<br><img src=\"/2022/06/10/itsgettingbadorbetter/road.png\"></p>\n<p>这条路全程都可以步行通过。长度是14000英里。喜欢徒步的人应该知道，人一天大概可以走50公里，差不多是30英里。我们算一下：14000&#x2F;30&#x3D;466天。<br>一年多。<br>一个人在理想的情况下（有吃有喝有住）就这么走下去，一年多可以穿过整个亚非欧三个大陆。<br>再对比智人存在的9万年时间，是不是太长了点，足够我们走遍全世界了。<br>智人的迁徙路线：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/homo.png\" class=\"\">\n\n<p>祖先在几万年前走遍全世界，看看我们现在，有了汽车，飞机，火车，远洋巨轮。我们却被自己在地图上画的那一根根线，圈了起来，哪儿都去不了。</p>\n<p>我在[元宇宙三问]这篇文章中就说，人类以后也许再也没有自由迁徙的日子了，统统到虚拟世界去当电池，赚取维持肉身存活的营养液吧。</p>\n<p>朱利安大王讲到史前文明的壁画。<br>首先这是3万年前的史前壁画，发现于法国拉斯科洞穴。</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/lsk1.jpg\" class=\"\">\n<p>一头充满细节的牛</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/lsk2.jpg\" class=\"\">\n<p>整体观感</p>\n<p>大王还提到了另一处史前壁画：<br>阿根廷平图拉斯河，手洞。<br>叫它手洞是因为真的有很多只手：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/hand.jpg\" class=\"\">\n\n<p>跟前面的法国拉斯科洞穴一样，也有动物：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/sd2.jpg\" class=\"\">\n\n<p>甚至还有涂鸦：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/sd3.jpg\" class=\"\">\n\n<p>我看了第一反应，和其他同学一样，觉得法国拉斯科洞穴的画更漂亮。<br>我们来对比一下两处壁画的年代：</p>\n<ul>\n<li>法国拉斯科洞穴，3万年前。</li>\n<li>阿根廷平图拉斯河手洞，复杂些：<br>动物（其实是大羊驼），9000年前；<br>涂鸦，7300多年前；<br>手，公元前550年左右……</li>\n</ul>\n<p>3万年前的壁画比两万年以后的涂鸦明显漂亮，说明3万年前的人类更聪明吗？</p>\n<p>来看看身边有多少孩子到处乱涂乱画吧。<br>合理的解释是，后来的人类技术更先进，更容易获得颜料和作画工具，更多不专业的人都可以画壁画，甚至是熊孩子。</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/dingjinhao.jpg\" class=\"\">\n\n<p>以前的画家，为了赚取生活费，要给王公贵族打工，给他们画肖像画。或者给神仙打工，给上帝画壁画。那时候颜料也贵，没人付钱的话，画家不太可能自己凭借兴趣爱好画个什么风景画。</p>\n<p>周末去参观了印象派的绘画展。</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/yxp.jpg\" class=\"\">\n<p>激发印象派画家开创印象派的很重要的一个动因是，相机的发明。<br>对啊，都有照片，我没必要以写实为目的来画画了。或者，不是没必要而是没需求了。那个时候的画家面对相机的心情是怎样的呢？是否跟现在的艺术家们面对 AI 绘画的心情一样呢？</p>\n<p>至少，我看到艺术家们从此开创了越来越多的艺术形式，开始奔放地表达着自己，无论是好坏美丑善恶或者表达不好不坏反正就什么都不是的或者表达凭什么要这样非要是什么不是什么的艺术。</p>\n<p>现在我请 AI 帮我画了一幅画来具象化我们当前的一种状态：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/qrp.png\" class=\"\">\n\n<p>感谢 AI 帮我这样一艺术白丁也能用艺术创作来表达自己。<br>总之，我们走着瞧吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨晚听了朱利安大王的世界历史课的第一讲。<br>脑子里是一团乱麻还没有理出头绪。<br>直到今天和团队的大佬聊起 AI 作画。</p>\n<p>我们知道，在 AI 擅长的领域，人类早已一败涂地。而现在艺术领域遭到 AI 的大举进攻。<br>近一两年时间看到了很多很掉 san 值的 AI 作画，可以说看到 AI 画的这么烂，有点失望也有点安心。<br>可就在前不久，一个叫 Disco Diffusion 的 AI 作画引擎大火。看到这个 AI 的作品，心情从失望+安心这种奇怪的混合，变成激动+担忧。</p>\n<p>这里引用西乔的文章来介绍一下这个 AI 作画工具：<br>[引用]</p>\n<p>一想到这个 AI 也许在人类睡大觉的时候也不眠不休的在学习人类的绘画作品，有点渗人呢。</p>\n<p>AI 不眠不休的学习人类，这种焦虑刺激着我认真听课，学习人类：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/lesson1.png\" class=\"\">\n\n<p>朱利安大王的人类历史课，一共有七讲。<br>刚刚听完第一讲，主要是两个部分：<br>一，人类作为生物这种存在本身<br>二，人类早期的文明</p>\n<p>人类这种生物，可以说是进化树上开出的一朵奇葩了。</p>\n<p>门-纲-目-科-属-种。<br>在属和种这两个分支，智人都是独一无二的存在。上溯到科，也仅有几种猩猩和人放在一起。相较别的物种，一个科下面上百个属上千个种，都是很正常的。<br>我们在进化树这个大树上伸出一根长长的光溜溜的树枝，都快伸到外星去了。</p>\n<p>上亿年的生物进化史，智人的出现才十万年。而且这十万年间，考古查证的其他人属人种生物被排挤的一干二净。这个是 Wikipedia 上扒下来的人类种的时间线：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/timeline.jpg\" class=\"\">\n\n<p>看看，几百万年漫长的直立人种历史，在最近2万年左右，尼安德特人消亡，只剩下智人，也就是我们。<br>凭什么智人剩下来了，尼安德特人和其他人种到哪里去了，目前是未解之谜。</p>\n<p>作为一种动物，人类搞不明白人类自己。</p>\n<p>而作为一种建立了文明的智慧生物，嗨，看看人类在地球上都干了些什么。</p>\n<p>这里有个概念：世界上最长的步行路线（the Longest Walkable Distance on Earth）<br>有个网站介绍了这个路线：<br><a href=\"https://www.popularmechanics.com/science/a30285283/longest-walkable-distance-earth/\">https://www.popularmechanics.com/science/a30285283/longest-walkable-distance-earth/</a></p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/road.png\" class=\"\">\n\n<p>test<br><img src=\"/2022/06/10/itsgettingbadorbetter/road.png\"></p>\n<p>这条路全程都可以步行通过。长度是14000英里。喜欢徒步的人应该知道，人一天大概可以走50公里，差不多是30英里。我们算一下：14000&#x2F;30&#x3D;466天。<br>一年多。<br>一个人在理想的情况下（有吃有喝有住）就这么走下去，一年多可以穿过整个亚非欧三个大陆。<br>再对比智人存在的9万年时间，是不是太长了点，足够我们走遍全世界了。<br>智人的迁徙路线：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/homo.png\" class=\"\">\n\n<p>祖先在几万年前走遍全世界，看看我们现在，有了汽车，飞机，火车，远洋巨轮。我们却被自己在地图上画的那一根根线，圈了起来，哪儿都去不了。</p>\n<p>我在[元宇宙三问]这篇文章中就说，人类以后也许再也没有自由迁徙的日子了，统统到虚拟世界去当电池，赚取维持肉身存活的营养液吧。</p>\n<p>朱利安大王讲到史前文明的壁画。<br>首先这是3万年前的史前壁画，发现于法国拉斯科洞穴。</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/lsk1.jpg\" class=\"\">\n<p>一头充满细节的牛</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/lsk2.jpg\" class=\"\">\n<p>整体观感</p>\n<p>大王还提到了另一处史前壁画：<br>阿根廷平图拉斯河，手洞。<br>叫它手洞是因为真的有很多只手：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/hand.jpg\" class=\"\">\n\n<p>跟前面的法国拉斯科洞穴一样，也有动物：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/sd2.jpg\" class=\"\">\n\n<p>甚至还有涂鸦：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/sd3.jpg\" class=\"\">\n\n<p>我看了第一反应，和其他同学一样，觉得法国拉斯科洞穴的画更漂亮。<br>我们来对比一下两处壁画的年代：</p>\n<ul>\n<li>法国拉斯科洞穴，3万年前。</li>\n<li>阿根廷平图拉斯河手洞，复杂些：<br>动物（其实是大羊驼），9000年前；<br>涂鸦，7300多年前；<br>手，公元前550年左右……</li>\n</ul>\n<p>3万年前的壁画比两万年以后的涂鸦明显漂亮，说明3万年前的人类更聪明吗？</p>\n<p>来看看身边有多少孩子到处乱涂乱画吧。<br>合理的解释是，后来的人类技术更先进，更容易获得颜料和作画工具，更多不专业的人都可以画壁画，甚至是熊孩子。</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/dingjinhao.jpg\" class=\"\">\n\n<p>以前的画家，为了赚取生活费，要给王公贵族打工，给他们画肖像画。或者给神仙打工，给上帝画壁画。那时候颜料也贵，没人付钱的话，画家不太可能自己凭借兴趣爱好画个什么风景画。</p>\n<p>周末去参观了印象派的绘画展。</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/yxp.jpg\" class=\"\">\n<p>激发印象派画家开创印象派的很重要的一个动因是，相机的发明。<br>对啊，都有照片，我没必要以写实为目的来画画了。或者，不是没必要而是没需求了。那个时候的画家面对相机的心情是怎样的呢？是否跟现在的艺术家们面对 AI 绘画的心情一样呢？</p>\n<p>至少，我看到艺术家们从此开创了越来越多的艺术形式，开始奔放地表达着自己，无论是好坏美丑善恶或者表达不好不坏反正就什么都不是的或者表达凭什么要这样非要是什么不是什么的艺术。</p>\n<p>现在我请 AI 帮我画了一幅画来具象化我们当前的一种状态：</p>\n<img src=\"/2022/06/10/itsgettingbadorbetter/qrp.png\" class=\"\">\n\n<p>感谢 AI 帮我这样一艺术白丁也能用艺术创作来表达自己。<br>总之，我们走着瞧吧。</p>\n"},{"title":"把kindle的书全部下载到电脑上！","date":"2022-06-19T15:40:46.000Z","_content":"\n亚马逊宣布 Kindle 将退出中国市场。\n买了的书咋个办？亚马逊给的说法是书仍然可以下载并在阅读器中阅读。\n但是我的泡面盖子已经好多年历史了，Pad 上的 APP 又给人不踏实的感觉——想起之前还经历过 Pad 版本太旧，Kindle APP 不支持的情况。\n\n所以趁自己在恐慌期间有动力，把下载 kindle 电子书的方法研究出来了：\n（有拖延症的朋友也不必太着急，官宣是在2023年6月30日才正式停止运营。）\n\n第一步，工具下载：\n首先要感谢这位大佬，这个工具是他创始的，还要感谢之后涌来的一群程序员大佬，做出了图形化界面，才有我们小白的操作空间：\n{% asset_img credit.png %}\n下载地址在这里：\nhttps://github.com/yihong0618/Kindle_download_helper/releases\n\n如果某种不明原因打不开这个网站，可以公众号回复“kindle”获取下载链接。\n\n{% asset_img guifiles.png %}\n找到自己操作系统所对应的文件进行下载。\n第一个是 linux，第二个是 macOS，第三个是 windows。\n\n第二步，打开下载工具：\n{% asset_img steps.png %}\n\n第二.1步，点击登录（1 号红圈处），进入自己的 Kindle 图书管理页面：\n{% asset_img f122.png %}\n\n在这个页面按 F12 按键。以我对小白的了解（我就是），我认为有必要讲一下 F12 在哪里：\n{% asset_img f12.jpg %}\n\n第二.2步，在调试窗口中找两串神秘文本，粘贴到相应的位置：\n出现了调试窗口，在这个窗口中搜索“csrf”，可以看到“csrfToken=\"\"”这一串文本。\n{% asset_img csrf.png %}\n\n把双引号里面的文本复制下来，粘贴到下图 3 号圆圈处。注意不能复制双引号。\n{% asset_img steps.png %}\n\n回到调试窗口，找到“network”这一栏，随便找一个带有 200 这个数字的数据，打开：\n{% asset_img network.png %}\n\n在小窗口中找到“cookie”，鼠标右键，复制下来：\n{% asset_img cookievalue.png %}\n\n粘贴到下图 2 号圆圈出：\n{% asset_img steps.png %}\n\n第二.3步，点击 4 号圆圈处，获取下载列表，等一小会儿，就会出现自己的书了；\n第二.4步，点击 5 号圆圈处“浏览”按钮，指定自己的书要下载到哪里（如果是苹果电脑，必须点一次浏览，这样才能给电脑授权）：\n{% asset_img steps.png %}\n\n第二.5步，点击 6 号圆圈处的下载全部按钮。\n这个时候会出现进度条，和一些进度提示，耐心等待完成就好了。\n\n第三步，转换成 epub 文件：\n下载下来了后缀名是“.azw”的文件，用 Kindle APP 就可以打开了，但是我还是觉得 epub 文件更通用一点，这里提供一个转换工具：\nhttps://www.neat-reader.cn/downloads/converter\n{% asset_img neatconverter.png %}\n","source":"_posts/kindledownload.md","raw":"---\ntitle: 把kindle的书全部下载到电脑上！\ndate: 2022-06-19 23:40:46\ntags:\n---\n\n亚马逊宣布 Kindle 将退出中国市场。\n买了的书咋个办？亚马逊给的说法是书仍然可以下载并在阅读器中阅读。\n但是我的泡面盖子已经好多年历史了，Pad 上的 APP 又给人不踏实的感觉——想起之前还经历过 Pad 版本太旧，Kindle APP 不支持的情况。\n\n所以趁自己在恐慌期间有动力，把下载 kindle 电子书的方法研究出来了：\n（有拖延症的朋友也不必太着急，官宣是在2023年6月30日才正式停止运营。）\n\n第一步，工具下载：\n首先要感谢这位大佬，这个工具是他创始的，还要感谢之后涌来的一群程序员大佬，做出了图形化界面，才有我们小白的操作空间：\n{% asset_img credit.png %}\n下载地址在这里：\nhttps://github.com/yihong0618/Kindle_download_helper/releases\n\n如果某种不明原因打不开这个网站，可以公众号回复“kindle”获取下载链接。\n\n{% asset_img guifiles.png %}\n找到自己操作系统所对应的文件进行下载。\n第一个是 linux，第二个是 macOS，第三个是 windows。\n\n第二步，打开下载工具：\n{% asset_img steps.png %}\n\n第二.1步，点击登录（1 号红圈处），进入自己的 Kindle 图书管理页面：\n{% asset_img f122.png %}\n\n在这个页面按 F12 按键。以我对小白的了解（我就是），我认为有必要讲一下 F12 在哪里：\n{% asset_img f12.jpg %}\n\n第二.2步，在调试窗口中找两串神秘文本，粘贴到相应的位置：\n出现了调试窗口，在这个窗口中搜索“csrf”，可以看到“csrfToken=\"\"”这一串文本。\n{% asset_img csrf.png %}\n\n把双引号里面的文本复制下来，粘贴到下图 3 号圆圈处。注意不能复制双引号。\n{% asset_img steps.png %}\n\n回到调试窗口，找到“network”这一栏，随便找一个带有 200 这个数字的数据，打开：\n{% asset_img network.png %}\n\n在小窗口中找到“cookie”，鼠标右键，复制下来：\n{% asset_img cookievalue.png %}\n\n粘贴到下图 2 号圆圈出：\n{% asset_img steps.png %}\n\n第二.3步，点击 4 号圆圈处，获取下载列表，等一小会儿，就会出现自己的书了；\n第二.4步，点击 5 号圆圈处“浏览”按钮，指定自己的书要下载到哪里（如果是苹果电脑，必须点一次浏览，这样才能给电脑授权）：\n{% asset_img steps.png %}\n\n第二.5步，点击 6 号圆圈处的下载全部按钮。\n这个时候会出现进度条，和一些进度提示，耐心等待完成就好了。\n\n第三步，转换成 epub 文件：\n下载下来了后缀名是“.azw”的文件，用 Kindle APP 就可以打开了，但是我还是觉得 epub 文件更通用一点，这里提供一个转换工具：\nhttps://www.neat-reader.cn/downloads/converter\n{% asset_img neatconverter.png %}\n","slug":"kindledownload","published":1,"updated":"2022-06-19T16:34:05.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklw000k35cthgln1o6a","content":"<p>亚马逊宣布 Kindle 将退出中国市场。<br>买了的书咋个办？亚马逊给的说法是书仍然可以下载并在阅读器中阅读。<br>但是我的泡面盖子已经好多年历史了，Pad 上的 APP 又给人不踏实的感觉——想起之前还经历过 Pad 版本太旧，Kindle APP 不支持的情况。</p>\n<p>所以趁自己在恐慌期间有动力，把下载 kindle 电子书的方法研究出来了：<br>（有拖延症的朋友也不必太着急，官宣是在2023年6月30日才正式停止运营。）</p>\n<p>第一步，工具下载：<br>首先要感谢这位大佬，这个工具是他创始的，还要感谢之后涌来的一群程序员大佬，做出了图形化界面，才有我们小白的操作空间：</p>\n<img src=\"/2022/06/19/kindledownload/credit.png\" class=\"\">\n<p>下载地址在这里：<br><a href=\"https://github.com/yihong0618/Kindle_download_helper/releases\">https://github.com/yihong0618/Kindle_download_helper/releases</a></p>\n<p>如果某种不明原因打不开这个网站，可以公众号回复“kindle”获取下载链接。</p>\n<img src=\"/2022/06/19/kindledownload/guifiles.png\" class=\"\">\n<p>找到自己操作系统所对应的文件进行下载。<br>第一个是 linux，第二个是 macOS，第三个是 windows。</p>\n<p>第二步，打开下载工具：</p>\n<img src=\"/2022/06/19/kindledownload/steps.png\" class=\"\">\n\n<p>第二.1步，点击登录（1 号红圈处），进入自己的 Kindle 图书管理页面：</p>\n<img src=\"/2022/06/19/kindledownload/f122.png\" class=\"\">\n\n<p>在这个页面按 F12 按键。以我对小白的了解（我就是），我认为有必要讲一下 F12 在哪里：</p>\n<img src=\"/2022/06/19/kindledownload/f12.jpg\" class=\"\">\n\n<p>第二.2步，在调试窗口中找两串神秘文本，粘贴到相应的位置：<br>出现了调试窗口，在这个窗口中搜索“csrf”，可以看到“csrfToken&#x3D;”””这一串文本。</p>\n<img src=\"/2022/06/19/kindledownload/csrf.png\" class=\"\">\n\n<p>把双引号里面的文本复制下来，粘贴到下图 3 号圆圈处。注意不能复制双引号。</p>\n<img src=\"/2022/06/19/kindledownload/steps.png\" class=\"\">\n\n<p>回到调试窗口，找到“network”这一栏，随便找一个带有 200 这个数字的数据，打开：</p>\n<img src=\"/2022/06/19/kindledownload/network.png\" class=\"\">\n\n<p>在小窗口中找到“cookie”，鼠标右键，复制下来：</p>\n<img src=\"/2022/06/19/kindledownload/cookievalue.png\" class=\"\">\n\n<p>粘贴到下图 2 号圆圈出：</p>\n<img src=\"/2022/06/19/kindledownload/steps.png\" class=\"\">\n\n<p>第二.3步，点击 4 号圆圈处，获取下载列表，等一小会儿，就会出现自己的书了；<br>第二.4步，点击 5 号圆圈处“浏览”按钮，指定自己的书要下载到哪里（如果是苹果电脑，必须点一次浏览，这样才能给电脑授权）：</p>\n<img src=\"/2022/06/19/kindledownload/steps.png\" class=\"\">\n\n<p>第二.5步，点击 6 号圆圈处的下载全部按钮。<br>这个时候会出现进度条，和一些进度提示，耐心等待完成就好了。</p>\n<p>第三步，转换成 epub 文件：<br>下载下来了后缀名是“.azw”的文件，用 Kindle APP 就可以打开了，但是我还是觉得 epub 文件更通用一点，这里提供一个转换工具：<br><a href=\"https://www.neat-reader.cn/downloads/converter\">https://www.neat-reader.cn/downloads/converter</a></p>\n<img src=\"/2022/06/19/kindledownload/neatconverter.png\" class=\"\">\n","site":{"data":{}},"excerpt":"","more":"<p>亚马逊宣布 Kindle 将退出中国市场。<br>买了的书咋个办？亚马逊给的说法是书仍然可以下载并在阅读器中阅读。<br>但是我的泡面盖子已经好多年历史了，Pad 上的 APP 又给人不踏实的感觉——想起之前还经历过 Pad 版本太旧，Kindle APP 不支持的情况。</p>\n<p>所以趁自己在恐慌期间有动力，把下载 kindle 电子书的方法研究出来了：<br>（有拖延症的朋友也不必太着急，官宣是在2023年6月30日才正式停止运营。）</p>\n<p>第一步，工具下载：<br>首先要感谢这位大佬，这个工具是他创始的，还要感谢之后涌来的一群程序员大佬，做出了图形化界面，才有我们小白的操作空间：</p>\n<img src=\"/2022/06/19/kindledownload/credit.png\" class=\"\">\n<p>下载地址在这里：<br><a href=\"https://github.com/yihong0618/Kindle_download_helper/releases\">https://github.com/yihong0618/Kindle_download_helper/releases</a></p>\n<p>如果某种不明原因打不开这个网站，可以公众号回复“kindle”获取下载链接。</p>\n<img src=\"/2022/06/19/kindledownload/guifiles.png\" class=\"\">\n<p>找到自己操作系统所对应的文件进行下载。<br>第一个是 linux，第二个是 macOS，第三个是 windows。</p>\n<p>第二步，打开下载工具：</p>\n<img src=\"/2022/06/19/kindledownload/steps.png\" class=\"\">\n\n<p>第二.1步，点击登录（1 号红圈处），进入自己的 Kindle 图书管理页面：</p>\n<img src=\"/2022/06/19/kindledownload/f122.png\" class=\"\">\n\n<p>在这个页面按 F12 按键。以我对小白的了解（我就是），我认为有必要讲一下 F12 在哪里：</p>\n<img src=\"/2022/06/19/kindledownload/f12.jpg\" class=\"\">\n\n<p>第二.2步，在调试窗口中找两串神秘文本，粘贴到相应的位置：<br>出现了调试窗口，在这个窗口中搜索“csrf”，可以看到“csrfToken&#x3D;”””这一串文本。</p>\n<img src=\"/2022/06/19/kindledownload/csrf.png\" class=\"\">\n\n<p>把双引号里面的文本复制下来，粘贴到下图 3 号圆圈处。注意不能复制双引号。</p>\n<img src=\"/2022/06/19/kindledownload/steps.png\" class=\"\">\n\n<p>回到调试窗口，找到“network”这一栏，随便找一个带有 200 这个数字的数据，打开：</p>\n<img src=\"/2022/06/19/kindledownload/network.png\" class=\"\">\n\n<p>在小窗口中找到“cookie”，鼠标右键，复制下来：</p>\n<img src=\"/2022/06/19/kindledownload/cookievalue.png\" class=\"\">\n\n<p>粘贴到下图 2 号圆圈出：</p>\n<img src=\"/2022/06/19/kindledownload/steps.png\" class=\"\">\n\n<p>第二.3步，点击 4 号圆圈处，获取下载列表，等一小会儿，就会出现自己的书了；<br>第二.4步，点击 5 号圆圈处“浏览”按钮，指定自己的书要下载到哪里（如果是苹果电脑，必须点一次浏览，这样才能给电脑授权）：</p>\n<img src=\"/2022/06/19/kindledownload/steps.png\" class=\"\">\n\n<p>第二.5步，点击 6 号圆圈处的下载全部按钮。<br>这个时候会出现进度条，和一些进度提示，耐心等待完成就好了。</p>\n<p>第三步，转换成 epub 文件：<br>下载下来了后缀名是“.azw”的文件，用 Kindle APP 就可以打开了，但是我还是觉得 epub 文件更通用一点，这里提供一个转换工具：<br><a href=\"https://www.neat-reader.cn/downloads/converter\">https://www.neat-reader.cn/downloads/converter</a></p>\n<img src=\"/2022/06/19/kindledownload/neatconverter.png\" class=\"\">\n"},{"title":"学 go 语言的一些小笔记","date":"2022-01-22T03:48:32.000Z","_content":"\n### Thu-Feb-3 2022 终于弄好了包管理 YearProgress 2022 这个项目暂时告一段落\n在度假，网不好，因此没法翻墙，断断续续 baidu 了好几天，被弄到 CSDN 里兜兜转转了好几天！鬼打墙一样。\n今天好不容易找了个咖啡店，翻出去了，立刻！马上！看到了这句话：\n>\"In the most basic terms, A package is nothing but a directory inside your Go workspace containing one or more Go source files, or other Go packages.\" \n划重点是\"is nothing but\" \n\n这个太关键了\n中文文章要么就是高深莫测，搞得小白不知道他们是不是在故弄玄虚，要么就觉得包管理是不是太习以为常就干脆跳过。\n这篇文章就叫深入浅出。即便是可能会很高深，但是文章也说了， \"In the most basic terms\"。 对，可以很难，但是本小白要的就是\"most basic terms\"。 文章链接在此： [https://www.callicoder.com/golang-packages/](https://www.callicoder.com/golang-packages/)\n\n### Mon-Jan-24 2022\n继续学了 flag 和 arguement，这样就可以在命令行输入酷酷的命令了。\ngo 的两个包分别是：\n```\n\"flag\"\n\"os\"\n```\n\n### Sun-Jan-23 2022\n昨天跑通了 json 的解析，今天开始系统的学习 struct 以及指针，这样就能在函数中读取 struct 并返回一整个 struct\n今天主要看的书是 Head First Go\n下一步应该要把包管理学了，不然现在所有的代码都是堆在一个文件里面\n学完小半本 Head First Go 之前应该暂时不会更新 Year Progress 2022 代码了\n\n### Sat-Jan-22 2022\n今天学 go 语言解析 json，这两个教程解答了我很多问题：\nhttps://eager.io/blog/go-and-json/\nhttps://golangbyexample.com/struct-json-golang/\n","source":"_posts/learning-go.md","raw":"---\ntitle: 学 go 语言的一些小笔记\ndate: 2022-01-22 11:48:32\ntags:\n---\n\n### Thu-Feb-3 2022 终于弄好了包管理 YearProgress 2022 这个项目暂时告一段落\n在度假，网不好，因此没法翻墙，断断续续 baidu 了好几天，被弄到 CSDN 里兜兜转转了好几天！鬼打墙一样。\n今天好不容易找了个咖啡店，翻出去了，立刻！马上！看到了这句话：\n>\"In the most basic terms, A package is nothing but a directory inside your Go workspace containing one or more Go source files, or other Go packages.\" \n划重点是\"is nothing but\" \n\n这个太关键了\n中文文章要么就是高深莫测，搞得小白不知道他们是不是在故弄玄虚，要么就觉得包管理是不是太习以为常就干脆跳过。\n这篇文章就叫深入浅出。即便是可能会很高深，但是文章也说了， \"In the most basic terms\"。 对，可以很难，但是本小白要的就是\"most basic terms\"。 文章链接在此： [https://www.callicoder.com/golang-packages/](https://www.callicoder.com/golang-packages/)\n\n### Mon-Jan-24 2022\n继续学了 flag 和 arguement，这样就可以在命令行输入酷酷的命令了。\ngo 的两个包分别是：\n```\n\"flag\"\n\"os\"\n```\n\n### Sun-Jan-23 2022\n昨天跑通了 json 的解析，今天开始系统的学习 struct 以及指针，这样就能在函数中读取 struct 并返回一整个 struct\n今天主要看的书是 Head First Go\n下一步应该要把包管理学了，不然现在所有的代码都是堆在一个文件里面\n学完小半本 Head First Go 之前应该暂时不会更新 Year Progress 2022 代码了\n\n### Sat-Jan-22 2022\n今天学 go 语言解析 json，这两个教程解答了我很多问题：\nhttps://eager.io/blog/go-and-json/\nhttps://golangbyexample.com/struct-json-golang/\n","slug":"learning-go","published":1,"updated":"2022-02-04T01:22:37.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklx000l35ct30s1delb","content":"<h3 id=\"Thu-Feb-3-2022-终于弄好了包管理-YearProgress-2022-这个项目暂时告一段落\"><a href=\"#Thu-Feb-3-2022-终于弄好了包管理-YearProgress-2022-这个项目暂时告一段落\" class=\"headerlink\" title=\"Thu-Feb-3 2022 终于弄好了包管理 YearProgress 2022 这个项目暂时告一段落\"></a>Thu-Feb-3 2022 终于弄好了包管理 YearProgress 2022 这个项目暂时告一段落</h3><p>在度假，网不好，因此没法翻墙，断断续续 baidu 了好几天，被弄到 CSDN 里兜兜转转了好几天！鬼打墙一样。<br>今天好不容易找了个咖啡店，翻出去了，立刻！马上！看到了这句话：</p>\n<blockquote>\n<p>“In the most basic terms, A package is nothing but a directory inside your Go workspace containing one or more Go source files, or other Go packages.”<br>划重点是”is nothing but” </p>\n</blockquote>\n<p>这个太关键了<br>中文文章要么就是高深莫测，搞得小白不知道他们是不是在故弄玄虚，要么就觉得包管理是不是太习以为常就干脆跳过。<br>这篇文章就叫深入浅出。即便是可能会很高深，但是文章也说了， “In the most basic terms”。 对，可以很难，但是本小白要的就是”most basic terms”。 文章链接在此： <a href=\"https://www.callicoder.com/golang-packages/\">https://www.callicoder.com/golang-packages/</a></p>\n<h3 id=\"Mon-Jan-24-2022\"><a href=\"#Mon-Jan-24-2022\" class=\"headerlink\" title=\"Mon-Jan-24 2022\"></a>Mon-Jan-24 2022</h3><p>继续学了 flag 和 arguement，这样就可以在命令行输入酷酷的命令了。<br>go 的两个包分别是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;flag&quot;</span><br><span class=\"line\">&quot;os&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sun-Jan-23-2022\"><a href=\"#Sun-Jan-23-2022\" class=\"headerlink\" title=\"Sun-Jan-23 2022\"></a>Sun-Jan-23 2022</h3><p>昨天跑通了 json 的解析，今天开始系统的学习 struct 以及指针，这样就能在函数中读取 struct 并返回一整个 struct<br>今天主要看的书是 Head First Go<br>下一步应该要把包管理学了，不然现在所有的代码都是堆在一个文件里面<br>学完小半本 Head First Go 之前应该暂时不会更新 Year Progress 2022 代码了</p>\n<h3 id=\"Sat-Jan-22-2022\"><a href=\"#Sat-Jan-22-2022\" class=\"headerlink\" title=\"Sat-Jan-22 2022\"></a>Sat-Jan-22 2022</h3><p>今天学 go 语言解析 json，这两个教程解答了我很多问题：<br><a href=\"https://eager.io/blog/go-and-json/\">https://eager.io/blog/go-and-json/</a><br><a href=\"https://golangbyexample.com/struct-json-golang/\">https://golangbyexample.com/struct-json-golang/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Thu-Feb-3-2022-终于弄好了包管理-YearProgress-2022-这个项目暂时告一段落\"><a href=\"#Thu-Feb-3-2022-终于弄好了包管理-YearProgress-2022-这个项目暂时告一段落\" class=\"headerlink\" title=\"Thu-Feb-3 2022 终于弄好了包管理 YearProgress 2022 这个项目暂时告一段落\"></a>Thu-Feb-3 2022 终于弄好了包管理 YearProgress 2022 这个项目暂时告一段落</h3><p>在度假，网不好，因此没法翻墙，断断续续 baidu 了好几天，被弄到 CSDN 里兜兜转转了好几天！鬼打墙一样。<br>今天好不容易找了个咖啡店，翻出去了，立刻！马上！看到了这句话：</p>\n<blockquote>\n<p>“In the most basic terms, A package is nothing but a directory inside your Go workspace containing one or more Go source files, or other Go packages.”<br>划重点是”is nothing but” </p>\n</blockquote>\n<p>这个太关键了<br>中文文章要么就是高深莫测，搞得小白不知道他们是不是在故弄玄虚，要么就觉得包管理是不是太习以为常就干脆跳过。<br>这篇文章就叫深入浅出。即便是可能会很高深，但是文章也说了， “In the most basic terms”。 对，可以很难，但是本小白要的就是”most basic terms”。 文章链接在此： <a href=\"https://www.callicoder.com/golang-packages/\">https://www.callicoder.com/golang-packages/</a></p>\n<h3 id=\"Mon-Jan-24-2022\"><a href=\"#Mon-Jan-24-2022\" class=\"headerlink\" title=\"Mon-Jan-24 2022\"></a>Mon-Jan-24 2022</h3><p>继续学了 flag 和 arguement，这样就可以在命令行输入酷酷的命令了。<br>go 的两个包分别是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;flag&quot;</span><br><span class=\"line\">&quot;os&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sun-Jan-23-2022\"><a href=\"#Sun-Jan-23-2022\" class=\"headerlink\" title=\"Sun-Jan-23 2022\"></a>Sun-Jan-23 2022</h3><p>昨天跑通了 json 的解析，今天开始系统的学习 struct 以及指针，这样就能在函数中读取 struct 并返回一整个 struct<br>今天主要看的书是 Head First Go<br>下一步应该要把包管理学了，不然现在所有的代码都是堆在一个文件里面<br>学完小半本 Head First Go 之前应该暂时不会更新 Year Progress 2022 代码了</p>\n<h3 id=\"Sat-Jan-22-2022\"><a href=\"#Sat-Jan-22-2022\" class=\"headerlink\" title=\"Sat-Jan-22 2022\"></a>Sat-Jan-22 2022</h3><p>今天学 go 语言解析 json，这两个教程解答了我很多问题：<br><a href=\"https://eager.io/blog/go-and-json/\">https://eager.io/blog/go-and-json/</a><br><a href=\"https://golangbyexample.com/struct-json-golang/\">https://golangbyexample.com/struct-json-golang/</a></p>\n"},{"title":"从零开始在 Ubuntu 20.04 上Build Quorum 并用本地 Rum App 进行连接","date":"2022-01-14T16:47:28.000Z","_content":"\n### 2022 Feb 13版本更新：\n新版 quorum 里 jwt token 是可选项，如果留空的话系统会自动生成一个。\n\n---\n\nRum App 发布后我搭建了一个 windows server 运行，但一直感觉不够炫酷，于是折腾了一台 Ubuntu 主机。在主机上自己 Build Quorum，并运行，并在两位大佬轮番指导下才通过本地 Rum App 连接成功。两位大佬一位是 samson 一位是 wanming，这篇文章圈不出来他们本人。但是真的很感谢他们的热心帮助。如果大佬看到希望可以在评论区留言认领我的感谢。\n\n正文开始\n\n##  1. 从零开始的第一步 - 在服务器上获取 Rum System\n\n这一步我们会通过 git 命令从 github 上直接克隆一个 Rum System 到我们的服务器上。\n所以你需要先在服务器上安装 git：\n```\nsudo apt-get install git\n```\n\n安装完成输入命令：\n```\ngit --version\n```\n\n检查一下是否安装成功。\n接下来就是从 github 上通过 git clone 命令来克隆 Rum System。\nRum System 在 github 上的地址是：\nhttps://github.com/rumsystem/quorum\n\n点击“Code”按钮会出现下拉菜单，菜单中选择“SSH”这一栏，就会出现仓库地址了。\n{% asset_img ScreenShot.png %}\n\n将仓库地址放到克隆命令后，回车执行命令行：\n```\ngit clone git@github.com:rumsystem/quorum.git\n```\n\n如果发现系统提示我们无法连接，是因为 git clone 命令是通过 SSH 进行连接的，我们需要在自己的 github 账号里加入我们的 SSH 公钥。\n\n步骤可以参考 github 的官方教程，链接如下：\nhttps://docs.github.com/en/authentication/connecting-to-github-with-ssh\n\n克隆完成后可以“ls”一下看看是不是有了“quorum”这个文件夹。\n\n## 2. Build\n\n现在可以进入文件夹去 build 我们的 Rum System。\n```\ncd quorum\n```\n\n在根目录里执行开发人员准备好的脚本文件就好：\n```\n./scripts/build.sh\n```\n\n这个时候有可能会报错，是说我们还没有安装 go 语言。那我们就安装一下好了。\ngo 语言的官方下载页面在这里：\nhttps://go.dev/dl/\n\n进去后下载 linux 的版本就好：\n{% asset_img go.png %}\n\n你可以通过 scp 命令上传到服务器，也可以在服务器上用 curl 命令把这个文件下载下来。\n我这里是在本地用的 scp 命令：\n```\nscp [本地tar.gz] [用户]@[服务器地址]:[服务器文件路径]\n```\n\n上传成功后，到文件所在位置输入如下命令：\n```\nrm -rf /usr/local/go && tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz\n```\n\n然后把 go/bin 输入到环境变量中，只需要把下面的语句放到 /etc/profile 文件内：\n```\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n确认一下是否安装成功：\n```\ngo version\n```\n\ngo 语言的官方安装教程在这里：\nhttps://go.dev/doc/install\n\n再次 Build 成功，进入下一步。\n\n## 3. 在服务器上运行 Quorum\n\nBuild 成功的可执行文件存在 dist 文件夹中。cd 进 dist 去，ls 看到 dist 里面的文件夹里有个 linux 文件夹，再次 cd 进去，就到了 linux 系统的可执行文件的所在地了。\n\n{% asset_img dist.png %}\n\n直接 ./quorum 运行是不行的，需要加一些参数，我的带参数的运行命令是这样的：\n```\nRUM_KSPASSWD=[我的密码] ./quorum -peername [我的节点名] -listen /ip4/0.0.0.0/tcp/7000  -apilisten 0.0.0.0:8002 -peer /ip4/94.23.17.189/tcp/10666/p2p/16Uiu2HAmGTcDnhj3KVQUwVx8SGLyKBXQwfAxNayJdEwfsnUYKK4u -peer /ip4/132.145.109.63/tcp/10666/p2p/16Uiu2HAmTovb8kAJiYK8saskzz7cRQhb45NRK5AsbtdmYsLfD3RM -ips [服务器的公网IP] -ips 127.0.0.1\n```\n\n这样就能运行成功了。\n运行成功的界面应该长这样：\n{% asset_img successed.png %}\n\n会跳出一些 warning 什么的，可以暂时忽略掉。\n\n这个时候可以输入一个 curl 命令检查一下是否连接成功：\n```\ncurl -k https://127.0.0.1:8002/api/v1/groups\n```\n\n成功的话会返回一个当前种子网络的状态的消息。\n\n进入下一步之前再保存一个密钥，它位于 quorum 文件所在的文件夹里，cd 进 cert 文件夹，里面有两个文件分别是 server.key 和 server.crt。输入命令：\n```\ncat server.crt\n```\n\n把返回的密钥复制保存在本地。\n\n新版本里 jwt token 不是必须的，这里也可以去存一个备用，jwt 位于 quorum 运行根目录所在的 config 文件夹里，里面有个后缀为 .toml 的文件，cat 或 vi 打开就能找到 jwt。\n\n## 4. 本地 Rum APP 连接服务器\n\n这下万事俱备了，我们在本地打开 Rum APP，从菜单项“节点与网络”中选中“外部节点”。\n{% asset_img outterpeer.png %}\n\n到了填入节点信息的步骤，把我们在上一步收集到的 jwt 和 server.crt 填进去就好了：\n{% asset_img peerinfo.png %}\n\n顺利的话，应该可以看到“外部节点模式”亮绿灯了：\n{% asset_img green.png %}\n\n不顺利的话，比如我，踩到的坑我在下一个小节总结一下，看看读者能不能顺利回避：\n\n## 踩到的坑：\n\n1. 如果是新手小白的话可能会在各种文件夹和目录之间反复横跳找不到方向。这个看仔细一点就好了。\n2. 防火墙可能会阻止本地 APP 连接服务器。解决办法是打开端口 433，7000，8002。\n3. 最坑我的是我的云主机买的内存太小，如果内存溢出 quorum 进程马上就会被杀死。这个问题我一直无法定位，走了好多弯路，最后是求助大佬帮我发现的。解决办法是加了 1G swap。\n4. 最后是一个很好用的工具 tmux，可以帮我们保持住 quorum 的运行的同时开启别的命令行界面进行测试。","source":"_posts/run-quorum-on-ubuntu.md","raw":"---\ntitle: 从零开始在 Ubuntu 20.04 上Build Quorum 并用本地 Rum App 进行连接\ndate: 2022-01-15 00:47:28\ntags:\n---\n\n### 2022 Feb 13版本更新：\n新版 quorum 里 jwt token 是可选项，如果留空的话系统会自动生成一个。\n\n---\n\nRum App 发布后我搭建了一个 windows server 运行，但一直感觉不够炫酷，于是折腾了一台 Ubuntu 主机。在主机上自己 Build Quorum，并运行，并在两位大佬轮番指导下才通过本地 Rum App 连接成功。两位大佬一位是 samson 一位是 wanming，这篇文章圈不出来他们本人。但是真的很感谢他们的热心帮助。如果大佬看到希望可以在评论区留言认领我的感谢。\n\n正文开始\n\n##  1. 从零开始的第一步 - 在服务器上获取 Rum System\n\n这一步我们会通过 git 命令从 github 上直接克隆一个 Rum System 到我们的服务器上。\n所以你需要先在服务器上安装 git：\n```\nsudo apt-get install git\n```\n\n安装完成输入命令：\n```\ngit --version\n```\n\n检查一下是否安装成功。\n接下来就是从 github 上通过 git clone 命令来克隆 Rum System。\nRum System 在 github 上的地址是：\nhttps://github.com/rumsystem/quorum\n\n点击“Code”按钮会出现下拉菜单，菜单中选择“SSH”这一栏，就会出现仓库地址了。\n{% asset_img ScreenShot.png %}\n\n将仓库地址放到克隆命令后，回车执行命令行：\n```\ngit clone git@github.com:rumsystem/quorum.git\n```\n\n如果发现系统提示我们无法连接，是因为 git clone 命令是通过 SSH 进行连接的，我们需要在自己的 github 账号里加入我们的 SSH 公钥。\n\n步骤可以参考 github 的官方教程，链接如下：\nhttps://docs.github.com/en/authentication/connecting-to-github-with-ssh\n\n克隆完成后可以“ls”一下看看是不是有了“quorum”这个文件夹。\n\n## 2. Build\n\n现在可以进入文件夹去 build 我们的 Rum System。\n```\ncd quorum\n```\n\n在根目录里执行开发人员准备好的脚本文件就好：\n```\n./scripts/build.sh\n```\n\n这个时候有可能会报错，是说我们还没有安装 go 语言。那我们就安装一下好了。\ngo 语言的官方下载页面在这里：\nhttps://go.dev/dl/\n\n进去后下载 linux 的版本就好：\n{% asset_img go.png %}\n\n你可以通过 scp 命令上传到服务器，也可以在服务器上用 curl 命令把这个文件下载下来。\n我这里是在本地用的 scp 命令：\n```\nscp [本地tar.gz] [用户]@[服务器地址]:[服务器文件路径]\n```\n\n上传成功后，到文件所在位置输入如下命令：\n```\nrm -rf /usr/local/go && tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz\n```\n\n然后把 go/bin 输入到环境变量中，只需要把下面的语句放到 /etc/profile 文件内：\n```\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n确认一下是否安装成功：\n```\ngo version\n```\n\ngo 语言的官方安装教程在这里：\nhttps://go.dev/doc/install\n\n再次 Build 成功，进入下一步。\n\n## 3. 在服务器上运行 Quorum\n\nBuild 成功的可执行文件存在 dist 文件夹中。cd 进 dist 去，ls 看到 dist 里面的文件夹里有个 linux 文件夹，再次 cd 进去，就到了 linux 系统的可执行文件的所在地了。\n\n{% asset_img dist.png %}\n\n直接 ./quorum 运行是不行的，需要加一些参数，我的带参数的运行命令是这样的：\n```\nRUM_KSPASSWD=[我的密码] ./quorum -peername [我的节点名] -listen /ip4/0.0.0.0/tcp/7000  -apilisten 0.0.0.0:8002 -peer /ip4/94.23.17.189/tcp/10666/p2p/16Uiu2HAmGTcDnhj3KVQUwVx8SGLyKBXQwfAxNayJdEwfsnUYKK4u -peer /ip4/132.145.109.63/tcp/10666/p2p/16Uiu2HAmTovb8kAJiYK8saskzz7cRQhb45NRK5AsbtdmYsLfD3RM -ips [服务器的公网IP] -ips 127.0.0.1\n```\n\n这样就能运行成功了。\n运行成功的界面应该长这样：\n{% asset_img successed.png %}\n\n会跳出一些 warning 什么的，可以暂时忽略掉。\n\n这个时候可以输入一个 curl 命令检查一下是否连接成功：\n```\ncurl -k https://127.0.0.1:8002/api/v1/groups\n```\n\n成功的话会返回一个当前种子网络的状态的消息。\n\n进入下一步之前再保存一个密钥，它位于 quorum 文件所在的文件夹里，cd 进 cert 文件夹，里面有两个文件分别是 server.key 和 server.crt。输入命令：\n```\ncat server.crt\n```\n\n把返回的密钥复制保存在本地。\n\n新版本里 jwt token 不是必须的，这里也可以去存一个备用，jwt 位于 quorum 运行根目录所在的 config 文件夹里，里面有个后缀为 .toml 的文件，cat 或 vi 打开就能找到 jwt。\n\n## 4. 本地 Rum APP 连接服务器\n\n这下万事俱备了，我们在本地打开 Rum APP，从菜单项“节点与网络”中选中“外部节点”。\n{% asset_img outterpeer.png %}\n\n到了填入节点信息的步骤，把我们在上一步收集到的 jwt 和 server.crt 填进去就好了：\n{% asset_img peerinfo.png %}\n\n顺利的话，应该可以看到“外部节点模式”亮绿灯了：\n{% asset_img green.png %}\n\n不顺利的话，比如我，踩到的坑我在下一个小节总结一下，看看读者能不能顺利回避：\n\n## 踩到的坑：\n\n1. 如果是新手小白的话可能会在各种文件夹和目录之间反复横跳找不到方向。这个看仔细一点就好了。\n2. 防火墙可能会阻止本地 APP 连接服务器。解决办法是打开端口 433，7000，8002。\n3. 最坑我的是我的云主机买的内存太小，如果内存溢出 quorum 进程马上就会被杀死。这个问题我一直无法定位，走了好多弯路，最后是求助大佬帮我发现的。解决办法是加了 1G swap。\n4. 最后是一个很好用的工具 tmux，可以帮我们保持住 quorum 的运行的同时开启别的命令行界面进行测试。","slug":"run-quorum-on-ubuntu","published":1,"updated":"2022-02-13T09:20:34.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekly000m35ct0vw3dp11","content":"<h3 id=\"2022-Feb-13版本更新：\"><a href=\"#2022-Feb-13版本更新：\" class=\"headerlink\" title=\"2022 Feb 13版本更新：\"></a>2022 Feb 13版本更新：</h3><p>新版 quorum 里 jwt token 是可选项，如果留空的话系统会自动生成一个。</p>\n<hr>\n<p>Rum App 发布后我搭建了一个 windows server 运行，但一直感觉不够炫酷，于是折腾了一台 Ubuntu 主机。在主机上自己 Build Quorum，并运行，并在两位大佬轮番指导下才通过本地 Rum App 连接成功。两位大佬一位是 samson 一位是 wanming，这篇文章圈不出来他们本人。但是真的很感谢他们的热心帮助。如果大佬看到希望可以在评论区留言认领我的感谢。</p>\n<p>正文开始</p>\n<h2 id=\"1-从零开始的第一步-在服务器上获取-Rum-System\"><a href=\"#1-从零开始的第一步-在服务器上获取-Rum-System\" class=\"headerlink\" title=\"1. 从零开始的第一步 - 在服务器上获取 Rum System\"></a>1. 从零开始的第一步 - 在服务器上获取 Rum System</h2><p>这一步我们会通过 git 命令从 github 上直接克隆一个 Rum System 到我们的服务器上。<br>所以你需要先在服务器上安装 git：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>安装完成输入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p>检查一下是否安装成功。<br>接下来就是从 github 上通过 git clone 命令来克隆 Rum System。<br>Rum System 在 github 上的地址是：<br><a href=\"https://github.com/rumsystem/quorum\">https://github.com/rumsystem/quorum</a></p>\n<p>点击“Code”按钮会出现下拉菜单，菜单中选择“SSH”这一栏，就会出现仓库地址了。</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/ScreenShot.png\" class=\"\">\n\n<p>将仓库地址放到克隆命令后，回车执行命令行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:rumsystem/quorum.git</span><br></pre></td></tr></table></figure>\n\n<p>如果发现系统提示我们无法连接，是因为 git clone 命令是通过 SSH 进行连接的，我们需要在自己的 github 账号里加入我们的 SSH 公钥。</p>\n<p>步骤可以参考 github 的官方教程，链接如下：<br><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh\">https://docs.github.com/en/authentication/connecting-to-github-with-ssh</a></p>\n<p>克隆完成后可以“ls”一下看看是不是有了“quorum”这个文件夹。</p>\n<h2 id=\"2-Build\"><a href=\"#2-Build\" class=\"headerlink\" title=\"2. Build\"></a>2. Build</h2><p>现在可以进入文件夹去 build 我们的 Rum System。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd quorum</span><br></pre></td></tr></table></figure>\n\n<p>在根目录里执行开发人员准备好的脚本文件就好：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./scripts/build.sh</span><br></pre></td></tr></table></figure>\n\n<p>这个时候有可能会报错，是说我们还没有安装 go 语言。那我们就安装一下好了。<br>go 语言的官方下载页面在这里：<br><a href=\"https://go.dev/dl/\">https://go.dev/dl/</a></p>\n<p>进去后下载 linux 的版本就好：</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/go.png\" class=\"\">\n\n<p>你可以通过 scp 命令上传到服务器，也可以在服务器上用 curl 命令把这个文件下载下来。<br>我这里是在本地用的 scp 命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [本地tar.gz] [用户]@[服务器地址]:[服务器文件路径]</span><br></pre></td></tr></table></figure>\n\n<p>上传成功后，到文件所在位置输入如下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>然后把 go&#x2F;bin 输入到环境变量中，只需要把下面的语句放到 &#x2F;etc&#x2F;profile 文件内：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/go/bin</span><br></pre></td></tr></table></figure>\n\n<p>确认一下是否安装成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go version</span><br></pre></td></tr></table></figure>\n\n<p>go 语言的官方安装教程在这里：<br><a href=\"https://go.dev/doc/install\">https://go.dev/doc/install</a></p>\n<p>再次 Build 成功，进入下一步。</p>\n<h2 id=\"3-在服务器上运行-Quorum\"><a href=\"#3-在服务器上运行-Quorum\" class=\"headerlink\" title=\"3. 在服务器上运行 Quorum\"></a>3. 在服务器上运行 Quorum</h2><p>Build 成功的可执行文件存在 dist 文件夹中。cd 进 dist 去，ls 看到 dist 里面的文件夹里有个 linux 文件夹，再次 cd 进去，就到了 linux 系统的可执行文件的所在地了。</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/dist.png\" class=\"\">\n\n<p>直接 .&#x2F;quorum 运行是不行的，需要加一些参数，我的带参数的运行命令是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUM_KSPASSWD=[我的密码] ./quorum -peername [我的节点名] -listen /ip4/0.0.0.0/tcp/7000  -apilisten 0.0.0.0:8002 -peer /ip4/94.23.17.189/tcp/10666/p2p/16Uiu2HAmGTcDnhj3KVQUwVx8SGLyKBXQwfAxNayJdEwfsnUYKK4u -peer /ip4/132.145.109.63/tcp/10666/p2p/16Uiu2HAmTovb8kAJiYK8saskzz7cRQhb45NRK5AsbtdmYsLfD3RM -ips [服务器的公网IP] -ips 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>这样就能运行成功了。<br>运行成功的界面应该长这样：</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/successed.png\" class=\"\">\n\n<p>会跳出一些 warning 什么的，可以暂时忽略掉。</p>\n<p>这个时候可以输入一个 curl 命令检查一下是否连接成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -k https://127.0.0.1:8002/api/v1/groups</span><br></pre></td></tr></table></figure>\n\n<p>成功的话会返回一个当前种子网络的状态的消息。</p>\n<p>进入下一步之前再保存一个密钥，它位于 quorum 文件所在的文件夹里，cd 进 cert 文件夹，里面有两个文件分别是 server.key 和 server.crt。输入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat server.crt</span><br></pre></td></tr></table></figure>\n\n<p>把返回的密钥复制保存在本地。</p>\n<p>新版本里 jwt token 不是必须的，这里也可以去存一个备用，jwt 位于 quorum 运行根目录所在的 config 文件夹里，里面有个后缀为 .toml 的文件，cat 或 vi 打开就能找到 jwt。</p>\n<h2 id=\"4-本地-Rum-APP-连接服务器\"><a href=\"#4-本地-Rum-APP-连接服务器\" class=\"headerlink\" title=\"4. 本地 Rum APP 连接服务器\"></a>4. 本地 Rum APP 连接服务器</h2><p>这下万事俱备了，我们在本地打开 Rum APP，从菜单项“节点与网络”中选中“外部节点”。</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/outterpeer.png\" class=\"\">\n\n<p>到了填入节点信息的步骤，把我们在上一步收集到的 jwt 和 server.crt 填进去就好了：</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/peerinfo.png\" class=\"\">\n\n<p>顺利的话，应该可以看到“外部节点模式”亮绿灯了：</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/green.png\" class=\"\">\n\n<p>不顺利的话，比如我，踩到的坑我在下一个小节总结一下，看看读者能不能顺利回避：</p>\n<h2 id=\"踩到的坑：\"><a href=\"#踩到的坑：\" class=\"headerlink\" title=\"踩到的坑：\"></a>踩到的坑：</h2><ol>\n<li>如果是新手小白的话可能会在各种文件夹和目录之间反复横跳找不到方向。这个看仔细一点就好了。</li>\n<li>防火墙可能会阻止本地 APP 连接服务器。解决办法是打开端口 433，7000，8002。</li>\n<li>最坑我的是我的云主机买的内存太小，如果内存溢出 quorum 进程马上就会被杀死。这个问题我一直无法定位，走了好多弯路，最后是求助大佬帮我发现的。解决办法是加了 1G swap。</li>\n<li>最后是一个很好用的工具 tmux，可以帮我们保持住 quorum 的运行的同时开启别的命令行界面进行测试。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"2022-Feb-13版本更新：\"><a href=\"#2022-Feb-13版本更新：\" class=\"headerlink\" title=\"2022 Feb 13版本更新：\"></a>2022 Feb 13版本更新：</h3><p>新版 quorum 里 jwt token 是可选项，如果留空的话系统会自动生成一个。</p>\n<hr>\n<p>Rum App 发布后我搭建了一个 windows server 运行，但一直感觉不够炫酷，于是折腾了一台 Ubuntu 主机。在主机上自己 Build Quorum，并运行，并在两位大佬轮番指导下才通过本地 Rum App 连接成功。两位大佬一位是 samson 一位是 wanming，这篇文章圈不出来他们本人。但是真的很感谢他们的热心帮助。如果大佬看到希望可以在评论区留言认领我的感谢。</p>\n<p>正文开始</p>\n<h2 id=\"1-从零开始的第一步-在服务器上获取-Rum-System\"><a href=\"#1-从零开始的第一步-在服务器上获取-Rum-System\" class=\"headerlink\" title=\"1. 从零开始的第一步 - 在服务器上获取 Rum System\"></a>1. 从零开始的第一步 - 在服务器上获取 Rum System</h2><p>这一步我们会通过 git 命令从 github 上直接克隆一个 Rum System 到我们的服务器上。<br>所以你需要先在服务器上安装 git：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>安装完成输入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p>检查一下是否安装成功。<br>接下来就是从 github 上通过 git clone 命令来克隆 Rum System。<br>Rum System 在 github 上的地址是：<br><a href=\"https://github.com/rumsystem/quorum\">https://github.com/rumsystem/quorum</a></p>\n<p>点击“Code”按钮会出现下拉菜单，菜单中选择“SSH”这一栏，就会出现仓库地址了。</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/ScreenShot.png\" class=\"\">\n\n<p>将仓库地址放到克隆命令后，回车执行命令行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:rumsystem/quorum.git</span><br></pre></td></tr></table></figure>\n\n<p>如果发现系统提示我们无法连接，是因为 git clone 命令是通过 SSH 进行连接的，我们需要在自己的 github 账号里加入我们的 SSH 公钥。</p>\n<p>步骤可以参考 github 的官方教程，链接如下：<br><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh\">https://docs.github.com/en/authentication/connecting-to-github-with-ssh</a></p>\n<p>克隆完成后可以“ls”一下看看是不是有了“quorum”这个文件夹。</p>\n<h2 id=\"2-Build\"><a href=\"#2-Build\" class=\"headerlink\" title=\"2. Build\"></a>2. Build</h2><p>现在可以进入文件夹去 build 我们的 Rum System。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd quorum</span><br></pre></td></tr></table></figure>\n\n<p>在根目录里执行开发人员准备好的脚本文件就好：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./scripts/build.sh</span><br></pre></td></tr></table></figure>\n\n<p>这个时候有可能会报错，是说我们还没有安装 go 语言。那我们就安装一下好了。<br>go 语言的官方下载页面在这里：<br><a href=\"https://go.dev/dl/\">https://go.dev/dl/</a></p>\n<p>进去后下载 linux 的版本就好：</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/go.png\" class=\"\">\n\n<p>你可以通过 scp 命令上传到服务器，也可以在服务器上用 curl 命令把这个文件下载下来。<br>我这里是在本地用的 scp 命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [本地tar.gz] [用户]@[服务器地址]:[服务器文件路径]</span><br></pre></td></tr></table></figure>\n\n<p>上传成功后，到文件所在位置输入如下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>然后把 go&#x2F;bin 输入到环境变量中，只需要把下面的语句放到 &#x2F;etc&#x2F;profile 文件内：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/go/bin</span><br></pre></td></tr></table></figure>\n\n<p>确认一下是否安装成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go version</span><br></pre></td></tr></table></figure>\n\n<p>go 语言的官方安装教程在这里：<br><a href=\"https://go.dev/doc/install\">https://go.dev/doc/install</a></p>\n<p>再次 Build 成功，进入下一步。</p>\n<h2 id=\"3-在服务器上运行-Quorum\"><a href=\"#3-在服务器上运行-Quorum\" class=\"headerlink\" title=\"3. 在服务器上运行 Quorum\"></a>3. 在服务器上运行 Quorum</h2><p>Build 成功的可执行文件存在 dist 文件夹中。cd 进 dist 去，ls 看到 dist 里面的文件夹里有个 linux 文件夹，再次 cd 进去，就到了 linux 系统的可执行文件的所在地了。</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/dist.png\" class=\"\">\n\n<p>直接 .&#x2F;quorum 运行是不行的，需要加一些参数，我的带参数的运行命令是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUM_KSPASSWD=[我的密码] ./quorum -peername [我的节点名] -listen /ip4/0.0.0.0/tcp/7000  -apilisten 0.0.0.0:8002 -peer /ip4/94.23.17.189/tcp/10666/p2p/16Uiu2HAmGTcDnhj3KVQUwVx8SGLyKBXQwfAxNayJdEwfsnUYKK4u -peer /ip4/132.145.109.63/tcp/10666/p2p/16Uiu2HAmTovb8kAJiYK8saskzz7cRQhb45NRK5AsbtdmYsLfD3RM -ips [服务器的公网IP] -ips 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>这样就能运行成功了。<br>运行成功的界面应该长这样：</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/successed.png\" class=\"\">\n\n<p>会跳出一些 warning 什么的，可以暂时忽略掉。</p>\n<p>这个时候可以输入一个 curl 命令检查一下是否连接成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -k https://127.0.0.1:8002/api/v1/groups</span><br></pre></td></tr></table></figure>\n\n<p>成功的话会返回一个当前种子网络的状态的消息。</p>\n<p>进入下一步之前再保存一个密钥，它位于 quorum 文件所在的文件夹里，cd 进 cert 文件夹，里面有两个文件分别是 server.key 和 server.crt。输入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat server.crt</span><br></pre></td></tr></table></figure>\n\n<p>把返回的密钥复制保存在本地。</p>\n<p>新版本里 jwt token 不是必须的，这里也可以去存一个备用，jwt 位于 quorum 运行根目录所在的 config 文件夹里，里面有个后缀为 .toml 的文件，cat 或 vi 打开就能找到 jwt。</p>\n<h2 id=\"4-本地-Rum-APP-连接服务器\"><a href=\"#4-本地-Rum-APP-连接服务器\" class=\"headerlink\" title=\"4. 本地 Rum APP 连接服务器\"></a>4. 本地 Rum APP 连接服务器</h2><p>这下万事俱备了，我们在本地打开 Rum APP，从菜单项“节点与网络”中选中“外部节点”。</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/outterpeer.png\" class=\"\">\n\n<p>到了填入节点信息的步骤，把我们在上一步收集到的 jwt 和 server.crt 填进去就好了：</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/peerinfo.png\" class=\"\">\n\n<p>顺利的话，应该可以看到“外部节点模式”亮绿灯了：</p>\n<img src=\"/2022/01/15/run-quorum-on-ubuntu/green.png\" class=\"\">\n\n<p>不顺利的话，比如我，踩到的坑我在下一个小节总结一下，看看读者能不能顺利回避：</p>\n<h2 id=\"踩到的坑：\"><a href=\"#踩到的坑：\" class=\"headerlink\" title=\"踩到的坑：\"></a>踩到的坑：</h2><ol>\n<li>如果是新手小白的话可能会在各种文件夹和目录之间反复横跳找不到方向。这个看仔细一点就好了。</li>\n<li>防火墙可能会阻止本地 APP 连接服务器。解决办法是打开端口 433，7000，8002。</li>\n<li>最坑我的是我的云主机买的内存太小，如果内存溢出 quorum 进程马上就会被杀死。这个问题我一直无法定位，走了好多弯路，最后是求助大佬帮我发现的。解决办法是加了 1G swap。</li>\n<li>最后是一个很好用的工具 tmux，可以帮我们保持住 quorum 的运行的同时开启别的命令行界面进行测试。</li>\n</ol>\n"},{"title":"test","date":"2021-07-29T09:17:44.000Z","_content":"","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2021-07-29 17:17:44\ntags:\n---\n","slug":"test","published":1,"updated":"2021-07-29T09:17:44.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekly000n35ctcxal6dfb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"一个交互小问题","excerpt":"","date":"2019-11-04T14:42:00.000Z","_content":"\n网页上，很多时候不愿意跳转到新窗口。  \n但是UI上好像没有特别的规范，哪种按钮或超链接是跳转到新窗口，哪种是本地打开。  \n为了保险起见，因为有些并不愿意跳转走的页面，返回去很麻烦。  \n很多时候就是右键，自己选择在新窗口中（新Tab中）打开。  \n不知怎么样明确地让用户知道这个链接是在新窗口中打开？","source":"_posts/一个交互小问题.md","raw":"---\ntitle: 一个交互小问题\ntags: []\nexcerpt: ''\ndate: 2019-11-04 22:42:00\n---\n\n网页上，很多时候不愿意跳转到新窗口。  \n但是UI上好像没有特别的规范，哪种按钮或超链接是跳转到新窗口，哪种是本地打开。  \n为了保险起见，因为有些并不愿意跳转走的页面，返回去很麻烦。  \n很多时候就是右键，自己选择在新窗口中（新Tab中）打开。  \n不知怎么样明确地让用户知道这个链接是在新窗口中打开？","slug":"一个交互小问题","published":1,"updated":"2021-07-29T15:17:08.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklz000o35ctdbm4463x","content":"<p>网页上，很多时候不愿意跳转到新窗口。<br>但是UI上好像没有特别的规范，哪种按钮或超链接是跳转到新窗口，哪种是本地打开。<br>为了保险起见，因为有些并不愿意跳转走的页面，返回去很麻烦。<br>很多时候就是右键，自己选择在新窗口中（新Tab中）打开。<br>不知怎么样明确地让用户知道这个链接是在新窗口中打开？</p>\n","site":{"data":{}},"more":"<p>网页上，很多时候不愿意跳转到新窗口。<br>但是UI上好像没有特别的规范，哪种按钮或超链接是跳转到新窗口，哪种是本地打开。<br>为了保险起见，因为有些并不愿意跳转走的页面，返回去很麻烦。<br>很多时候就是右键，自己选择在新窗口中（新Tab中）打开。<br>不知怎么样明确地让用户知道这个链接是在新窗口中打开？</p>\n"},{"title":"元宇宙三问","date":"2021-11-11T16:31:13.000Z","_content":"# 元宇宙三问\n\n我是谁，从哪来，去哪里\n\n## 1. 元宇宙是什么？\n\n相信本文读者既然能发现我这篇小角落的小文章，肯定已经看了很多别的关于元宇宙的文章了。\n\n我打赌5篇有4篇都会说这几个意思：比如，元宇宙这玩意很复杂我跟你说不清，再比如，大家都对元宇宙有不同的理解， 甚至会直接否定元宇宙，说这是个概念炒作或者噱头什么的。\n\n以上对元宇宙的说法，都是故弄玄虚。\n\n元宇宙这个词的来历无非是一本叫做《雪崩》（Snow Crash）的科幻小说。\n\n《雪崩》描述了一个未来，人类通过科技解决了资金流、信息流的顺畅流动，于是只剩下物流需要传统的运输方式了。留给人类的职业只剩：解决物流的快递员，维护资金流、信息流顺利流通的程序员。其余的人类就好好的玩吧，去哪里玩呢？虚拟世界。这个虚拟世界在小说中，称为“元宇宙”。\n\n所以，去掉了这种神秘感，就也没有故弄玄虚的余地了，再问元宇宙是什么？答案简单明了：\n\n元宇宙是一本科幻小说中描述的一个虚拟世界。\n\n是就是。没有可是但是而是。\n\n这样的解释显然是不够的，因为人们关心的并不是元宇宙这个名词本身，而是元宇宙突然火起来的这个事情，问题二来了：\n\n## 2. 元宇宙为什么火？\n\n因为时候到了。\n\n一个是全球的疫情把人们锁在家中，带火了一大批网络应用和游戏。\n\n一个是各类影视作品的铺垫，更多人理解了虚拟世界的科幻概念。\n\n还有不能忽略的是虚拟货币的大起大落，消息出圈，让更多的人认识到去中心化的概念。\n\n这些认知的铺垫最后在一个手段特别毒辣的公司手上爆发，从此元宇宙成为了资本追逐的对象。\n\n这个公司叫 Roblox。\n\n他们做的事情，概括的说：\n\nRoblox 做了一个游戏发布平台，这个平台上的游戏全都是通过 Roblox 提供的技术进行开发。而这个技术很高级，以至于大量的小学生都可以开发出可玩性很高的 3D 游戏，而且是网络游戏。于是 Roblox 成为了“寓教于乐”的编程教育公司。大量的青少年在上面开发游戏，并且让TA们的朋友们来玩自己制作的游戏，玩的人多，开发者还可以赚到钱。\n\n我不是给 Roblox 打广告，Roblox 做的事情非常邪恶，以至于我打算以后单独开文章来骂他们，这里仅仅作为背景介绍。\n\n于是 Roblox 就这么火了。趁着学生们没有办法去学校上课，笼络了大量的，抱着免费学编程还可以赚钱的想法的，家长和学生。\n\nRoblox 鸡贼之处又来了，他们一火起来，自然有资本来投入，而且顺理成章的准备上市，上市的时候他们就甩出来了元宇宙的概念，股票也是应声大涨。\n\n是的，元宇宙正式出圈，标志事件就是 Roblox 上市。\n\n接下来各路神仙纷纷出动，如果去一些美股分析网站，我们会经常看到这些公司被点名：\n\nRoblox（刚刚说了）\n\nFacebook（现在干脆连名字都叫 Meta 了）\n\n微软（怎能没有它呢，不提它的实力了，微软都还有 HoloLens，XBox 还有“我的世界”这样的游戏）\n\n亚马逊 （亚马逊前段时间也宣布要搞元宇宙，但是看他们的意思主要就是到虚拟世界选购商品）\n\nAutodesk （一家商业软件公司，著名的工程制图软件 CAD 我相信很多人都不陌生，于是它打算拿出它搞 3D 建模很厉害的看家本领来参与到元宇宙浪潮中）\n\nNVidia （显卡公司，元宇宙怎么能少了显示设备呢）\n\n还有很多别的公司但是都差不多能归类到这几个类别：\n\n社交网络，游戏，基础硬件设施，甚至脑机接口的技术开发。他们受到关注都非常的合情合理。\n\n但是不要忘了还有一个巨大的不怎么被正规资本市场关注的，隐藏游乐场，区块链世界。\n\n不是要说币，烦不烦。\n\n我要说的是区块链世界的强大特性：\n\n1. 去中心化\n2. 不可篡改\n3. 智能合约\n\n先直接暴力给出我的结论吧：\n\n区块链技术是否能成功发展，直接影响到元宇宙是否能成功创世（成功发展）。\n\n首先元宇宙变成什么样我们才叫成功发展？每个利益体都有不同的意见，比如扎克伯格可能认为大家都来他的 Facebook 注册元宇宙账号，建立自己的朋友圈，他的元宇宙就成功了；比如游戏公司可能觉得，玩家们带上 VR 眼镜开始玩大型的虚拟现实游戏，没日没夜泡在里面，就是成功。这里正常人都会反应过来，那我们不挣钱不工作？拿什么叫外卖？\n\n是的，这些问题归结为，怎么解决人在虚拟世界的产值的认定。游戏账号说删掉就删掉，服务器说关停就关停。Facebook 也面临各种利用用户信息获利的指责。\n\n用户或者玩家在虚拟世界投入了大量的时间和精力，最后产生的数据甚至都不属于TA。这样的虚拟世界恐怕没有人会承认是一个可供人类的虚拟身份和数字资产入住的元宇宙。\n\n怎么解决以上的问题，就是我刚刚引出来的区块链了：\n\n去中心化，保证数字资产不受某一处或几处中心服务器的制约。\n\n不可篡改，保证私有产权的神圣不可侵犯。\n\n智能合约，这个概念对于不常接触区块链的朋友比较陌生，可以简单说，但是它很重要。简单说：保证元宇宙中的信息流动规律像是在遵守宇宙定律般自然而然按照既定的规则运行，无需第三方提供监管或担保。\n\n甚至我在这里大言不惭：区块链简直就是为元宇宙而生，感觉并不过分。\n\n当然当然，我听过很多技术牛人的指导，区块链无非就是几十年前流行的 P2P 技术的应用，是的，朋友们肯定记得电驴啊 BT 下载这些去中心化的文件下载应用。\n\n那看这样的例子：\n\n活字印刷是中国人发明的，但是遇到拼音文字才能被真正的利用，遇到机械工业才能开始量产书籍。\n\n现在元宇宙来了，P2P 技术遇到一个崭新的应用场景，也有了更强大的网络基础设施。\n\n所以，第二个问题一开始我就说了：\n\n时候到了\n\n社交网络公司认为：时候到了。\n\n游戏公司，网购平台，显示设备厂商认为：时候到了。\n\n网络基础设施的建设也让众多从业者发现：时候到了。\n\n作为区块链社区的一员，我的观点也很明确：是时候了。\n\n## 3. 元宇宙是未来吗？\n\n科幻小说是预言书吗？很少人真的认为科幻小说能够精准预测未来。\n\n但是我们会发现，科幻小说经常会有启发性和警示性。\n\n《1984》告诉我们如果不把怪兽关进笼子会发生什么。\n\n《美丽新世界》警告我们，如果放任消费主义，娱乐至上，人类有可能面临的未来是什么。\n\n银翼杀手更是用电影的视觉冲击把一个可怕的赛博朋克未来深深印在了人类的想象空间。\n\n科幻如此悲观，是有道理的。\n\n《雪崩》提出的元宇宙其实也是很多科幻小说早就有过的设定了，不光是虚拟世界，书中“厉害的不行的快递员”，这种设定在别的科幻作品中都有。\n\n这其实是很多科幻作者基于成书时代的科技水平和社会形态，对人类未来的预判。\n\n比如凡尔纳写的《月球大炮》，当时有了火器的发展进步，富于想象的凡尔纳自然就会想，我们用大炮把人发射到月球上怎样？\n\n而未来会产生虚拟世界，几乎可以说是当今想象家们的一种共识了。\n\n信息技术发展至今，解决了人类很多”必须要移动肉身”的事情了。比如我本人已经在没有办公室的状态下远程办公两年了。\n\n如今能被机器人和人工智能替代的职业也越来越多，甚至建筑也可以在工厂中生产完成，并运输到现场安装。\n\n在大部分基础工作都被 AI 和机器人代替的未来里，能够留给人类做的事情。我认为有三个：\n\n娱乐、创作、探索。\n\n“选择娱乐的人，恐怕是大多数。”不少人会这么认为吧。\n\n于是《雪崩》描述的未来，也许真的会这么自然而然的发生。\n\n不管你喜不喜欢，该来的总会来。\n\n这样的未来里，如果真的有“必须移动肉身”的娱乐，也许就剩下能够满足探索欲的旅行了。\n\n再如果虚拟现实技术继续发展下去，迟早会发生这样的情况之一或更多：\n\n1. 肉身旅行给人带来的视听享受远远比不过虚拟世界的娱乐。\n2. 肉身旅行的成本过高，人们最终选择虚拟世界的娱乐。\n3. 肉身旅行的风险过高，人们最终选择虚拟世界的娱乐。\n\n上面三种情况，除了第一种是不好不坏的情况，第二种和第三种，仔细想想，恐怕是比较可怕的未来吧。\n\n不要恐慌！\n\nDon't Panic!\n\n爹味说教开启：\n\n1. 悲观很有必要，悲观能让我们看到危险，从而回避。\n2. 技术只是工具，工具没有善恶，善恶取决于使用工具的人。\n3. 技术总是要进步的，如果因为预见了可怕的未来就选择回避，只会把这个技术让给你讨厌的人！\n\n掌握这个工具，用你的理想去使用，有什么错呢？\n\n## 4. 去中心化的元宇宙\n\n人生三问里，我是谁？我从哪里来？我到哪里去？\n\n不谈哲学，只说江湖规矩的话，英雄不问出处，最重要的还是我要到哪里去吧。\n\n那么元宇宙三问呢？未来是什么样，才是最重要的。\n\n所以，有没有一种避免科幻小说中的可怕未来的元宇宙呢？\n\n社会学，人类学，心理学我通通不懂。\n\n只谈自己熟悉的领域，我认为区块链作为底层技术的元宇宙是一个可以避免可怕未来的选项。\n\n区块链的特性以及它们能带来的好处前面已经提过。\n\n这里我想，像是写超短篇科幻小说一样描述这样的可能性供人参考：\n\n设定：2035年，正如科学家已经发现了多元宇宙（Multiverse），开启了新宇宙大探索时代一样，一群吃饱了没事儿干的程序员也有样学样的搞了个多元元宇宙（Multi-metaverse）。\n\n新闻：昨晚一个名为黑洞的黑客组织，在某元宇宙A中制造了一次黑洞攻击，该元宇宙中大量行星被直接吞噬，好在该元宇宙的双星伴随系统及时启动反制机制将黑洞攻击效果隔离在了伴星系统中并做了降维处理。其他的元宇宙及时作出反应，判断出这是一次黑客攻击，接受了这次降维处理，因此元宇宙A中的用户资产得到了多元元宇宙的继续认同和保护。\n\n场景：一个背影，坐在美丽而平静的湖边，似乎在思考着。镜头逐渐拉近，头上的脑机设备闪硕，脖子上有一个黑洞的纹身。镜头转向侧面，嘴唇蠕动，听见轻声的自言自语：“超新星爆炸？也许是个好主意。”\n","source":"_posts/元宇宙三问.md","raw":"---\ntitle: 元宇宙三问\ndate: 2021-11-12 00:31:13\ntags:\n---\n# 元宇宙三问\n\n我是谁，从哪来，去哪里\n\n## 1. 元宇宙是什么？\n\n相信本文读者既然能发现我这篇小角落的小文章，肯定已经看了很多别的关于元宇宙的文章了。\n\n我打赌5篇有4篇都会说这几个意思：比如，元宇宙这玩意很复杂我跟你说不清，再比如，大家都对元宇宙有不同的理解， 甚至会直接否定元宇宙，说这是个概念炒作或者噱头什么的。\n\n以上对元宇宙的说法，都是故弄玄虚。\n\n元宇宙这个词的来历无非是一本叫做《雪崩》（Snow Crash）的科幻小说。\n\n《雪崩》描述了一个未来，人类通过科技解决了资金流、信息流的顺畅流动，于是只剩下物流需要传统的运输方式了。留给人类的职业只剩：解决物流的快递员，维护资金流、信息流顺利流通的程序员。其余的人类就好好的玩吧，去哪里玩呢？虚拟世界。这个虚拟世界在小说中，称为“元宇宙”。\n\n所以，去掉了这种神秘感，就也没有故弄玄虚的余地了，再问元宇宙是什么？答案简单明了：\n\n元宇宙是一本科幻小说中描述的一个虚拟世界。\n\n是就是。没有可是但是而是。\n\n这样的解释显然是不够的，因为人们关心的并不是元宇宙这个名词本身，而是元宇宙突然火起来的这个事情，问题二来了：\n\n## 2. 元宇宙为什么火？\n\n因为时候到了。\n\n一个是全球的疫情把人们锁在家中，带火了一大批网络应用和游戏。\n\n一个是各类影视作品的铺垫，更多人理解了虚拟世界的科幻概念。\n\n还有不能忽略的是虚拟货币的大起大落，消息出圈，让更多的人认识到去中心化的概念。\n\n这些认知的铺垫最后在一个手段特别毒辣的公司手上爆发，从此元宇宙成为了资本追逐的对象。\n\n这个公司叫 Roblox。\n\n他们做的事情，概括的说：\n\nRoblox 做了一个游戏发布平台，这个平台上的游戏全都是通过 Roblox 提供的技术进行开发。而这个技术很高级，以至于大量的小学生都可以开发出可玩性很高的 3D 游戏，而且是网络游戏。于是 Roblox 成为了“寓教于乐”的编程教育公司。大量的青少年在上面开发游戏，并且让TA们的朋友们来玩自己制作的游戏，玩的人多，开发者还可以赚到钱。\n\n我不是给 Roblox 打广告，Roblox 做的事情非常邪恶，以至于我打算以后单独开文章来骂他们，这里仅仅作为背景介绍。\n\n于是 Roblox 就这么火了。趁着学生们没有办法去学校上课，笼络了大量的，抱着免费学编程还可以赚钱的想法的，家长和学生。\n\nRoblox 鸡贼之处又来了，他们一火起来，自然有资本来投入，而且顺理成章的准备上市，上市的时候他们就甩出来了元宇宙的概念，股票也是应声大涨。\n\n是的，元宇宙正式出圈，标志事件就是 Roblox 上市。\n\n接下来各路神仙纷纷出动，如果去一些美股分析网站，我们会经常看到这些公司被点名：\n\nRoblox（刚刚说了）\n\nFacebook（现在干脆连名字都叫 Meta 了）\n\n微软（怎能没有它呢，不提它的实力了，微软都还有 HoloLens，XBox 还有“我的世界”这样的游戏）\n\n亚马逊 （亚马逊前段时间也宣布要搞元宇宙，但是看他们的意思主要就是到虚拟世界选购商品）\n\nAutodesk （一家商业软件公司，著名的工程制图软件 CAD 我相信很多人都不陌生，于是它打算拿出它搞 3D 建模很厉害的看家本领来参与到元宇宙浪潮中）\n\nNVidia （显卡公司，元宇宙怎么能少了显示设备呢）\n\n还有很多别的公司但是都差不多能归类到这几个类别：\n\n社交网络，游戏，基础硬件设施，甚至脑机接口的技术开发。他们受到关注都非常的合情合理。\n\n但是不要忘了还有一个巨大的不怎么被正规资本市场关注的，隐藏游乐场，区块链世界。\n\n不是要说币，烦不烦。\n\n我要说的是区块链世界的强大特性：\n\n1. 去中心化\n2. 不可篡改\n3. 智能合约\n\n先直接暴力给出我的结论吧：\n\n区块链技术是否能成功发展，直接影响到元宇宙是否能成功创世（成功发展）。\n\n首先元宇宙变成什么样我们才叫成功发展？每个利益体都有不同的意见，比如扎克伯格可能认为大家都来他的 Facebook 注册元宇宙账号，建立自己的朋友圈，他的元宇宙就成功了；比如游戏公司可能觉得，玩家们带上 VR 眼镜开始玩大型的虚拟现实游戏，没日没夜泡在里面，就是成功。这里正常人都会反应过来，那我们不挣钱不工作？拿什么叫外卖？\n\n是的，这些问题归结为，怎么解决人在虚拟世界的产值的认定。游戏账号说删掉就删掉，服务器说关停就关停。Facebook 也面临各种利用用户信息获利的指责。\n\n用户或者玩家在虚拟世界投入了大量的时间和精力，最后产生的数据甚至都不属于TA。这样的虚拟世界恐怕没有人会承认是一个可供人类的虚拟身份和数字资产入住的元宇宙。\n\n怎么解决以上的问题，就是我刚刚引出来的区块链了：\n\n去中心化，保证数字资产不受某一处或几处中心服务器的制约。\n\n不可篡改，保证私有产权的神圣不可侵犯。\n\n智能合约，这个概念对于不常接触区块链的朋友比较陌生，可以简单说，但是它很重要。简单说：保证元宇宙中的信息流动规律像是在遵守宇宙定律般自然而然按照既定的规则运行，无需第三方提供监管或担保。\n\n甚至我在这里大言不惭：区块链简直就是为元宇宙而生，感觉并不过分。\n\n当然当然，我听过很多技术牛人的指导，区块链无非就是几十年前流行的 P2P 技术的应用，是的，朋友们肯定记得电驴啊 BT 下载这些去中心化的文件下载应用。\n\n那看这样的例子：\n\n活字印刷是中国人发明的，但是遇到拼音文字才能被真正的利用，遇到机械工业才能开始量产书籍。\n\n现在元宇宙来了，P2P 技术遇到一个崭新的应用场景，也有了更强大的网络基础设施。\n\n所以，第二个问题一开始我就说了：\n\n时候到了\n\n社交网络公司认为：时候到了。\n\n游戏公司，网购平台，显示设备厂商认为：时候到了。\n\n网络基础设施的建设也让众多从业者发现：时候到了。\n\n作为区块链社区的一员，我的观点也很明确：是时候了。\n\n## 3. 元宇宙是未来吗？\n\n科幻小说是预言书吗？很少人真的认为科幻小说能够精准预测未来。\n\n但是我们会发现，科幻小说经常会有启发性和警示性。\n\n《1984》告诉我们如果不把怪兽关进笼子会发生什么。\n\n《美丽新世界》警告我们，如果放任消费主义，娱乐至上，人类有可能面临的未来是什么。\n\n银翼杀手更是用电影的视觉冲击把一个可怕的赛博朋克未来深深印在了人类的想象空间。\n\n科幻如此悲观，是有道理的。\n\n《雪崩》提出的元宇宙其实也是很多科幻小说早就有过的设定了，不光是虚拟世界，书中“厉害的不行的快递员”，这种设定在别的科幻作品中都有。\n\n这其实是很多科幻作者基于成书时代的科技水平和社会形态，对人类未来的预判。\n\n比如凡尔纳写的《月球大炮》，当时有了火器的发展进步，富于想象的凡尔纳自然就会想，我们用大炮把人发射到月球上怎样？\n\n而未来会产生虚拟世界，几乎可以说是当今想象家们的一种共识了。\n\n信息技术发展至今，解决了人类很多”必须要移动肉身”的事情了。比如我本人已经在没有办公室的状态下远程办公两年了。\n\n如今能被机器人和人工智能替代的职业也越来越多，甚至建筑也可以在工厂中生产完成，并运输到现场安装。\n\n在大部分基础工作都被 AI 和机器人代替的未来里，能够留给人类做的事情。我认为有三个：\n\n娱乐、创作、探索。\n\n“选择娱乐的人，恐怕是大多数。”不少人会这么认为吧。\n\n于是《雪崩》描述的未来，也许真的会这么自然而然的发生。\n\n不管你喜不喜欢，该来的总会来。\n\n这样的未来里，如果真的有“必须移动肉身”的娱乐，也许就剩下能够满足探索欲的旅行了。\n\n再如果虚拟现实技术继续发展下去，迟早会发生这样的情况之一或更多：\n\n1. 肉身旅行给人带来的视听享受远远比不过虚拟世界的娱乐。\n2. 肉身旅行的成本过高，人们最终选择虚拟世界的娱乐。\n3. 肉身旅行的风险过高，人们最终选择虚拟世界的娱乐。\n\n上面三种情况，除了第一种是不好不坏的情况，第二种和第三种，仔细想想，恐怕是比较可怕的未来吧。\n\n不要恐慌！\n\nDon't Panic!\n\n爹味说教开启：\n\n1. 悲观很有必要，悲观能让我们看到危险，从而回避。\n2. 技术只是工具，工具没有善恶，善恶取决于使用工具的人。\n3. 技术总是要进步的，如果因为预见了可怕的未来就选择回避，只会把这个技术让给你讨厌的人！\n\n掌握这个工具，用你的理想去使用，有什么错呢？\n\n## 4. 去中心化的元宇宙\n\n人生三问里，我是谁？我从哪里来？我到哪里去？\n\n不谈哲学，只说江湖规矩的话，英雄不问出处，最重要的还是我要到哪里去吧。\n\n那么元宇宙三问呢？未来是什么样，才是最重要的。\n\n所以，有没有一种避免科幻小说中的可怕未来的元宇宙呢？\n\n社会学，人类学，心理学我通通不懂。\n\n只谈自己熟悉的领域，我认为区块链作为底层技术的元宇宙是一个可以避免可怕未来的选项。\n\n区块链的特性以及它们能带来的好处前面已经提过。\n\n这里我想，像是写超短篇科幻小说一样描述这样的可能性供人参考：\n\n设定：2035年，正如科学家已经发现了多元宇宙（Multiverse），开启了新宇宙大探索时代一样，一群吃饱了没事儿干的程序员也有样学样的搞了个多元元宇宙（Multi-metaverse）。\n\n新闻：昨晚一个名为黑洞的黑客组织，在某元宇宙A中制造了一次黑洞攻击，该元宇宙中大量行星被直接吞噬，好在该元宇宙的双星伴随系统及时启动反制机制将黑洞攻击效果隔离在了伴星系统中并做了降维处理。其他的元宇宙及时作出反应，判断出这是一次黑客攻击，接受了这次降维处理，因此元宇宙A中的用户资产得到了多元元宇宙的继续认同和保护。\n\n场景：一个背影，坐在美丽而平静的湖边，似乎在思考着。镜头逐渐拉近，头上的脑机设备闪硕，脖子上有一个黑洞的纹身。镜头转向侧面，嘴唇蠕动，听见轻声的自言自语：“超新星爆炸？也许是个好主意。”\n","slug":"元宇宙三问","published":1,"updated":"2022-01-18T04:06:21.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txeklz000p35ctgtsz7ime","content":"<h1 id=\"元宇宙三问\"><a href=\"#元宇宙三问\" class=\"headerlink\" title=\"元宇宙三问\"></a>元宇宙三问</h1><p>我是谁，从哪来，去哪里</p>\n<h2 id=\"1-元宇宙是什么？\"><a href=\"#1-元宇宙是什么？\" class=\"headerlink\" title=\"1. 元宇宙是什么？\"></a>1. 元宇宙是什么？</h2><p>相信本文读者既然能发现我这篇小角落的小文章，肯定已经看了很多别的关于元宇宙的文章了。</p>\n<p>我打赌5篇有4篇都会说这几个意思：比如，元宇宙这玩意很复杂我跟你说不清，再比如，大家都对元宇宙有不同的理解， 甚至会直接否定元宇宙，说这是个概念炒作或者噱头什么的。</p>\n<p>以上对元宇宙的说法，都是故弄玄虚。</p>\n<p>元宇宙这个词的来历无非是一本叫做《雪崩》（Snow Crash）的科幻小说。</p>\n<p>《雪崩》描述了一个未来，人类通过科技解决了资金流、信息流的顺畅流动，于是只剩下物流需要传统的运输方式了。留给人类的职业只剩：解决物流的快递员，维护资金流、信息流顺利流通的程序员。其余的人类就好好的玩吧，去哪里玩呢？虚拟世界。这个虚拟世界在小说中，称为“元宇宙”。</p>\n<p>所以，去掉了这种神秘感，就也没有故弄玄虚的余地了，再问元宇宙是什么？答案简单明了：</p>\n<p>元宇宙是一本科幻小说中描述的一个虚拟世界。</p>\n<p>是就是。没有可是但是而是。</p>\n<p>这样的解释显然是不够的，因为人们关心的并不是元宇宙这个名词本身，而是元宇宙突然火起来的这个事情，问题二来了：</p>\n<h2 id=\"2-元宇宙为什么火？\"><a href=\"#2-元宇宙为什么火？\" class=\"headerlink\" title=\"2. 元宇宙为什么火？\"></a>2. 元宇宙为什么火？</h2><p>因为时候到了。</p>\n<p>一个是全球的疫情把人们锁在家中，带火了一大批网络应用和游戏。</p>\n<p>一个是各类影视作品的铺垫，更多人理解了虚拟世界的科幻概念。</p>\n<p>还有不能忽略的是虚拟货币的大起大落，消息出圈，让更多的人认识到去中心化的概念。</p>\n<p>这些认知的铺垫最后在一个手段特别毒辣的公司手上爆发，从此元宇宙成为了资本追逐的对象。</p>\n<p>这个公司叫 Roblox。</p>\n<p>他们做的事情，概括的说：</p>\n<p>Roblox 做了一个游戏发布平台，这个平台上的游戏全都是通过 Roblox 提供的技术进行开发。而这个技术很高级，以至于大量的小学生都可以开发出可玩性很高的 3D 游戏，而且是网络游戏。于是 Roblox 成为了“寓教于乐”的编程教育公司。大量的青少年在上面开发游戏，并且让TA们的朋友们来玩自己制作的游戏，玩的人多，开发者还可以赚到钱。</p>\n<p>我不是给 Roblox 打广告，Roblox 做的事情非常邪恶，以至于我打算以后单独开文章来骂他们，这里仅仅作为背景介绍。</p>\n<p>于是 Roblox 就这么火了。趁着学生们没有办法去学校上课，笼络了大量的，抱着免费学编程还可以赚钱的想法的，家长和学生。</p>\n<p>Roblox 鸡贼之处又来了，他们一火起来，自然有资本来投入，而且顺理成章的准备上市，上市的时候他们就甩出来了元宇宙的概念，股票也是应声大涨。</p>\n<p>是的，元宇宙正式出圈，标志事件就是 Roblox 上市。</p>\n<p>接下来各路神仙纷纷出动，如果去一些美股分析网站，我们会经常看到这些公司被点名：</p>\n<p>Roblox（刚刚说了）</p>\n<p>Facebook（现在干脆连名字都叫 Meta 了）</p>\n<p>微软（怎能没有它呢，不提它的实力了，微软都还有 HoloLens，XBox 还有“我的世界”这样的游戏）</p>\n<p>亚马逊 （亚马逊前段时间也宣布要搞元宇宙，但是看他们的意思主要就是到虚拟世界选购商品）</p>\n<p>Autodesk （一家商业软件公司，著名的工程制图软件 CAD 我相信很多人都不陌生，于是它打算拿出它搞 3D 建模很厉害的看家本领来参与到元宇宙浪潮中）</p>\n<p>NVidia （显卡公司，元宇宙怎么能少了显示设备呢）</p>\n<p>还有很多别的公司但是都差不多能归类到这几个类别：</p>\n<p>社交网络，游戏，基础硬件设施，甚至脑机接口的技术开发。他们受到关注都非常的合情合理。</p>\n<p>但是不要忘了还有一个巨大的不怎么被正规资本市场关注的，隐藏游乐场，区块链世界。</p>\n<p>不是要说币，烦不烦。</p>\n<p>我要说的是区块链世界的强大特性：</p>\n<ol>\n<li>去中心化</li>\n<li>不可篡改</li>\n<li>智能合约</li>\n</ol>\n<p>先直接暴力给出我的结论吧：</p>\n<p>区块链技术是否能成功发展，直接影响到元宇宙是否能成功创世（成功发展）。</p>\n<p>首先元宇宙变成什么样我们才叫成功发展？每个利益体都有不同的意见，比如扎克伯格可能认为大家都来他的 Facebook 注册元宇宙账号，建立自己的朋友圈，他的元宇宙就成功了；比如游戏公司可能觉得，玩家们带上 VR 眼镜开始玩大型的虚拟现实游戏，没日没夜泡在里面，就是成功。这里正常人都会反应过来，那我们不挣钱不工作？拿什么叫外卖？</p>\n<p>是的，这些问题归结为，怎么解决人在虚拟世界的产值的认定。游戏账号说删掉就删掉，服务器说关停就关停。Facebook 也面临各种利用用户信息获利的指责。</p>\n<p>用户或者玩家在虚拟世界投入了大量的时间和精力，最后产生的数据甚至都不属于TA。这样的虚拟世界恐怕没有人会承认是一个可供人类的虚拟身份和数字资产入住的元宇宙。</p>\n<p>怎么解决以上的问题，就是我刚刚引出来的区块链了：</p>\n<p>去中心化，保证数字资产不受某一处或几处中心服务器的制约。</p>\n<p>不可篡改，保证私有产权的神圣不可侵犯。</p>\n<p>智能合约，这个概念对于不常接触区块链的朋友比较陌生，可以简单说，但是它很重要。简单说：保证元宇宙中的信息流动规律像是在遵守宇宙定律般自然而然按照既定的规则运行，无需第三方提供监管或担保。</p>\n<p>甚至我在这里大言不惭：区块链简直就是为元宇宙而生，感觉并不过分。</p>\n<p>当然当然，我听过很多技术牛人的指导，区块链无非就是几十年前流行的 P2P 技术的应用，是的，朋友们肯定记得电驴啊 BT 下载这些去中心化的文件下载应用。</p>\n<p>那看这样的例子：</p>\n<p>活字印刷是中国人发明的，但是遇到拼音文字才能被真正的利用，遇到机械工业才能开始量产书籍。</p>\n<p>现在元宇宙来了，P2P 技术遇到一个崭新的应用场景，也有了更强大的网络基础设施。</p>\n<p>所以，第二个问题一开始我就说了：</p>\n<p>时候到了</p>\n<p>社交网络公司认为：时候到了。</p>\n<p>游戏公司，网购平台，显示设备厂商认为：时候到了。</p>\n<p>网络基础设施的建设也让众多从业者发现：时候到了。</p>\n<p>作为区块链社区的一员，我的观点也很明确：是时候了。</p>\n<h2 id=\"3-元宇宙是未来吗？\"><a href=\"#3-元宇宙是未来吗？\" class=\"headerlink\" title=\"3. 元宇宙是未来吗？\"></a>3. 元宇宙是未来吗？</h2><p>科幻小说是预言书吗？很少人真的认为科幻小说能够精准预测未来。</p>\n<p>但是我们会发现，科幻小说经常会有启发性和警示性。</p>\n<p>《1984》告诉我们如果不把怪兽关进笼子会发生什么。</p>\n<p>《美丽新世界》警告我们，如果放任消费主义，娱乐至上，人类有可能面临的未来是什么。</p>\n<p>银翼杀手更是用电影的视觉冲击把一个可怕的赛博朋克未来深深印在了人类的想象空间。</p>\n<p>科幻如此悲观，是有道理的。</p>\n<p>《雪崩》提出的元宇宙其实也是很多科幻小说早就有过的设定了，不光是虚拟世界，书中“厉害的不行的快递员”，这种设定在别的科幻作品中都有。</p>\n<p>这其实是很多科幻作者基于成书时代的科技水平和社会形态，对人类未来的预判。</p>\n<p>比如凡尔纳写的《月球大炮》，当时有了火器的发展进步，富于想象的凡尔纳自然就会想，我们用大炮把人发射到月球上怎样？</p>\n<p>而未来会产生虚拟世界，几乎可以说是当今想象家们的一种共识了。</p>\n<p>信息技术发展至今，解决了人类很多”必须要移动肉身”的事情了。比如我本人已经在没有办公室的状态下远程办公两年了。</p>\n<p>如今能被机器人和人工智能替代的职业也越来越多，甚至建筑也可以在工厂中生产完成，并运输到现场安装。</p>\n<p>在大部分基础工作都被 AI 和机器人代替的未来里，能够留给人类做的事情。我认为有三个：</p>\n<p>娱乐、创作、探索。</p>\n<p>“选择娱乐的人，恐怕是大多数。”不少人会这么认为吧。</p>\n<p>于是《雪崩》描述的未来，也许真的会这么自然而然的发生。</p>\n<p>不管你喜不喜欢，该来的总会来。</p>\n<p>这样的未来里，如果真的有“必须移动肉身”的娱乐，也许就剩下能够满足探索欲的旅行了。</p>\n<p>再如果虚拟现实技术继续发展下去，迟早会发生这样的情况之一或更多：</p>\n<ol>\n<li>肉身旅行给人带来的视听享受远远比不过虚拟世界的娱乐。</li>\n<li>肉身旅行的成本过高，人们最终选择虚拟世界的娱乐。</li>\n<li>肉身旅行的风险过高，人们最终选择虚拟世界的娱乐。</li>\n</ol>\n<p>上面三种情况，除了第一种是不好不坏的情况，第二种和第三种，仔细想想，恐怕是比较可怕的未来吧。</p>\n<p>不要恐慌！</p>\n<p>Don’t Panic!</p>\n<p>爹味说教开启：</p>\n<ol>\n<li>悲观很有必要，悲观能让我们看到危险，从而回避。</li>\n<li>技术只是工具，工具没有善恶，善恶取决于使用工具的人。</li>\n<li>技术总是要进步的，如果因为预见了可怕的未来就选择回避，只会把这个技术让给你讨厌的人！</li>\n</ol>\n<p>掌握这个工具，用你的理想去使用，有什么错呢？</p>\n<h2 id=\"4-去中心化的元宇宙\"><a href=\"#4-去中心化的元宇宙\" class=\"headerlink\" title=\"4. 去中心化的元宇宙\"></a>4. 去中心化的元宇宙</h2><p>人生三问里，我是谁？我从哪里来？我到哪里去？</p>\n<p>不谈哲学，只说江湖规矩的话，英雄不问出处，最重要的还是我要到哪里去吧。</p>\n<p>那么元宇宙三问呢？未来是什么样，才是最重要的。</p>\n<p>所以，有没有一种避免科幻小说中的可怕未来的元宇宙呢？</p>\n<p>社会学，人类学，心理学我通通不懂。</p>\n<p>只谈自己熟悉的领域，我认为区块链作为底层技术的元宇宙是一个可以避免可怕未来的选项。</p>\n<p>区块链的特性以及它们能带来的好处前面已经提过。</p>\n<p>这里我想，像是写超短篇科幻小说一样描述这样的可能性供人参考：</p>\n<p>设定：2035年，正如科学家已经发现了多元宇宙（Multiverse），开启了新宇宙大探索时代一样，一群吃饱了没事儿干的程序员也有样学样的搞了个多元元宇宙（Multi-metaverse）。</p>\n<p>新闻：昨晚一个名为黑洞的黑客组织，在某元宇宙A中制造了一次黑洞攻击，该元宇宙中大量行星被直接吞噬，好在该元宇宙的双星伴随系统及时启动反制机制将黑洞攻击效果隔离在了伴星系统中并做了降维处理。其他的元宇宙及时作出反应，判断出这是一次黑客攻击，接受了这次降维处理，因此元宇宙A中的用户资产得到了多元元宇宙的继续认同和保护。</p>\n<p>场景：一个背影，坐在美丽而平静的湖边，似乎在思考着。镜头逐渐拉近，头上的脑机设备闪硕，脖子上有一个黑洞的纹身。镜头转向侧面，嘴唇蠕动，听见轻声的自言自语：“超新星爆炸？也许是个好主意。”</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"元宇宙三问\"><a href=\"#元宇宙三问\" class=\"headerlink\" title=\"元宇宙三问\"></a>元宇宙三问</h1><p>我是谁，从哪来，去哪里</p>\n<h2 id=\"1-元宇宙是什么？\"><a href=\"#1-元宇宙是什么？\" class=\"headerlink\" title=\"1. 元宇宙是什么？\"></a>1. 元宇宙是什么？</h2><p>相信本文读者既然能发现我这篇小角落的小文章，肯定已经看了很多别的关于元宇宙的文章了。</p>\n<p>我打赌5篇有4篇都会说这几个意思：比如，元宇宙这玩意很复杂我跟你说不清，再比如，大家都对元宇宙有不同的理解， 甚至会直接否定元宇宙，说这是个概念炒作或者噱头什么的。</p>\n<p>以上对元宇宙的说法，都是故弄玄虚。</p>\n<p>元宇宙这个词的来历无非是一本叫做《雪崩》（Snow Crash）的科幻小说。</p>\n<p>《雪崩》描述了一个未来，人类通过科技解决了资金流、信息流的顺畅流动，于是只剩下物流需要传统的运输方式了。留给人类的职业只剩：解决物流的快递员，维护资金流、信息流顺利流通的程序员。其余的人类就好好的玩吧，去哪里玩呢？虚拟世界。这个虚拟世界在小说中，称为“元宇宙”。</p>\n<p>所以，去掉了这种神秘感，就也没有故弄玄虚的余地了，再问元宇宙是什么？答案简单明了：</p>\n<p>元宇宙是一本科幻小说中描述的一个虚拟世界。</p>\n<p>是就是。没有可是但是而是。</p>\n<p>这样的解释显然是不够的，因为人们关心的并不是元宇宙这个名词本身，而是元宇宙突然火起来的这个事情，问题二来了：</p>\n<h2 id=\"2-元宇宙为什么火？\"><a href=\"#2-元宇宙为什么火？\" class=\"headerlink\" title=\"2. 元宇宙为什么火？\"></a>2. 元宇宙为什么火？</h2><p>因为时候到了。</p>\n<p>一个是全球的疫情把人们锁在家中，带火了一大批网络应用和游戏。</p>\n<p>一个是各类影视作品的铺垫，更多人理解了虚拟世界的科幻概念。</p>\n<p>还有不能忽略的是虚拟货币的大起大落，消息出圈，让更多的人认识到去中心化的概念。</p>\n<p>这些认知的铺垫最后在一个手段特别毒辣的公司手上爆发，从此元宇宙成为了资本追逐的对象。</p>\n<p>这个公司叫 Roblox。</p>\n<p>他们做的事情，概括的说：</p>\n<p>Roblox 做了一个游戏发布平台，这个平台上的游戏全都是通过 Roblox 提供的技术进行开发。而这个技术很高级，以至于大量的小学生都可以开发出可玩性很高的 3D 游戏，而且是网络游戏。于是 Roblox 成为了“寓教于乐”的编程教育公司。大量的青少年在上面开发游戏，并且让TA们的朋友们来玩自己制作的游戏，玩的人多，开发者还可以赚到钱。</p>\n<p>我不是给 Roblox 打广告，Roblox 做的事情非常邪恶，以至于我打算以后单独开文章来骂他们，这里仅仅作为背景介绍。</p>\n<p>于是 Roblox 就这么火了。趁着学生们没有办法去学校上课，笼络了大量的，抱着免费学编程还可以赚钱的想法的，家长和学生。</p>\n<p>Roblox 鸡贼之处又来了，他们一火起来，自然有资本来投入，而且顺理成章的准备上市，上市的时候他们就甩出来了元宇宙的概念，股票也是应声大涨。</p>\n<p>是的，元宇宙正式出圈，标志事件就是 Roblox 上市。</p>\n<p>接下来各路神仙纷纷出动，如果去一些美股分析网站，我们会经常看到这些公司被点名：</p>\n<p>Roblox（刚刚说了）</p>\n<p>Facebook（现在干脆连名字都叫 Meta 了）</p>\n<p>微软（怎能没有它呢，不提它的实力了，微软都还有 HoloLens，XBox 还有“我的世界”这样的游戏）</p>\n<p>亚马逊 （亚马逊前段时间也宣布要搞元宇宙，但是看他们的意思主要就是到虚拟世界选购商品）</p>\n<p>Autodesk （一家商业软件公司，著名的工程制图软件 CAD 我相信很多人都不陌生，于是它打算拿出它搞 3D 建模很厉害的看家本领来参与到元宇宙浪潮中）</p>\n<p>NVidia （显卡公司，元宇宙怎么能少了显示设备呢）</p>\n<p>还有很多别的公司但是都差不多能归类到这几个类别：</p>\n<p>社交网络，游戏，基础硬件设施，甚至脑机接口的技术开发。他们受到关注都非常的合情合理。</p>\n<p>但是不要忘了还有一个巨大的不怎么被正规资本市场关注的，隐藏游乐场，区块链世界。</p>\n<p>不是要说币，烦不烦。</p>\n<p>我要说的是区块链世界的强大特性：</p>\n<ol>\n<li>去中心化</li>\n<li>不可篡改</li>\n<li>智能合约</li>\n</ol>\n<p>先直接暴力给出我的结论吧：</p>\n<p>区块链技术是否能成功发展，直接影响到元宇宙是否能成功创世（成功发展）。</p>\n<p>首先元宇宙变成什么样我们才叫成功发展？每个利益体都有不同的意见，比如扎克伯格可能认为大家都来他的 Facebook 注册元宇宙账号，建立自己的朋友圈，他的元宇宙就成功了；比如游戏公司可能觉得，玩家们带上 VR 眼镜开始玩大型的虚拟现实游戏，没日没夜泡在里面，就是成功。这里正常人都会反应过来，那我们不挣钱不工作？拿什么叫外卖？</p>\n<p>是的，这些问题归结为，怎么解决人在虚拟世界的产值的认定。游戏账号说删掉就删掉，服务器说关停就关停。Facebook 也面临各种利用用户信息获利的指责。</p>\n<p>用户或者玩家在虚拟世界投入了大量的时间和精力，最后产生的数据甚至都不属于TA。这样的虚拟世界恐怕没有人会承认是一个可供人类的虚拟身份和数字资产入住的元宇宙。</p>\n<p>怎么解决以上的问题，就是我刚刚引出来的区块链了：</p>\n<p>去中心化，保证数字资产不受某一处或几处中心服务器的制约。</p>\n<p>不可篡改，保证私有产权的神圣不可侵犯。</p>\n<p>智能合约，这个概念对于不常接触区块链的朋友比较陌生，可以简单说，但是它很重要。简单说：保证元宇宙中的信息流动规律像是在遵守宇宙定律般自然而然按照既定的规则运行，无需第三方提供监管或担保。</p>\n<p>甚至我在这里大言不惭：区块链简直就是为元宇宙而生，感觉并不过分。</p>\n<p>当然当然，我听过很多技术牛人的指导，区块链无非就是几十年前流行的 P2P 技术的应用，是的，朋友们肯定记得电驴啊 BT 下载这些去中心化的文件下载应用。</p>\n<p>那看这样的例子：</p>\n<p>活字印刷是中国人发明的，但是遇到拼音文字才能被真正的利用，遇到机械工业才能开始量产书籍。</p>\n<p>现在元宇宙来了，P2P 技术遇到一个崭新的应用场景，也有了更强大的网络基础设施。</p>\n<p>所以，第二个问题一开始我就说了：</p>\n<p>时候到了</p>\n<p>社交网络公司认为：时候到了。</p>\n<p>游戏公司，网购平台，显示设备厂商认为：时候到了。</p>\n<p>网络基础设施的建设也让众多从业者发现：时候到了。</p>\n<p>作为区块链社区的一员，我的观点也很明确：是时候了。</p>\n<h2 id=\"3-元宇宙是未来吗？\"><a href=\"#3-元宇宙是未来吗？\" class=\"headerlink\" title=\"3. 元宇宙是未来吗？\"></a>3. 元宇宙是未来吗？</h2><p>科幻小说是预言书吗？很少人真的认为科幻小说能够精准预测未来。</p>\n<p>但是我们会发现，科幻小说经常会有启发性和警示性。</p>\n<p>《1984》告诉我们如果不把怪兽关进笼子会发生什么。</p>\n<p>《美丽新世界》警告我们，如果放任消费主义，娱乐至上，人类有可能面临的未来是什么。</p>\n<p>银翼杀手更是用电影的视觉冲击把一个可怕的赛博朋克未来深深印在了人类的想象空间。</p>\n<p>科幻如此悲观，是有道理的。</p>\n<p>《雪崩》提出的元宇宙其实也是很多科幻小说早就有过的设定了，不光是虚拟世界，书中“厉害的不行的快递员”，这种设定在别的科幻作品中都有。</p>\n<p>这其实是很多科幻作者基于成书时代的科技水平和社会形态，对人类未来的预判。</p>\n<p>比如凡尔纳写的《月球大炮》，当时有了火器的发展进步，富于想象的凡尔纳自然就会想，我们用大炮把人发射到月球上怎样？</p>\n<p>而未来会产生虚拟世界，几乎可以说是当今想象家们的一种共识了。</p>\n<p>信息技术发展至今，解决了人类很多”必须要移动肉身”的事情了。比如我本人已经在没有办公室的状态下远程办公两年了。</p>\n<p>如今能被机器人和人工智能替代的职业也越来越多，甚至建筑也可以在工厂中生产完成，并运输到现场安装。</p>\n<p>在大部分基础工作都被 AI 和机器人代替的未来里，能够留给人类做的事情。我认为有三个：</p>\n<p>娱乐、创作、探索。</p>\n<p>“选择娱乐的人，恐怕是大多数。”不少人会这么认为吧。</p>\n<p>于是《雪崩》描述的未来，也许真的会这么自然而然的发生。</p>\n<p>不管你喜不喜欢，该来的总会来。</p>\n<p>这样的未来里，如果真的有“必须移动肉身”的娱乐，也许就剩下能够满足探索欲的旅行了。</p>\n<p>再如果虚拟现实技术继续发展下去，迟早会发生这样的情况之一或更多：</p>\n<ol>\n<li>肉身旅行给人带来的视听享受远远比不过虚拟世界的娱乐。</li>\n<li>肉身旅行的成本过高，人们最终选择虚拟世界的娱乐。</li>\n<li>肉身旅行的风险过高，人们最终选择虚拟世界的娱乐。</li>\n</ol>\n<p>上面三种情况，除了第一种是不好不坏的情况，第二种和第三种，仔细想想，恐怕是比较可怕的未来吧。</p>\n<p>不要恐慌！</p>\n<p>Don’t Panic!</p>\n<p>爹味说教开启：</p>\n<ol>\n<li>悲观很有必要，悲观能让我们看到危险，从而回避。</li>\n<li>技术只是工具，工具没有善恶，善恶取决于使用工具的人。</li>\n<li>技术总是要进步的，如果因为预见了可怕的未来就选择回避，只会把这个技术让给你讨厌的人！</li>\n</ol>\n<p>掌握这个工具，用你的理想去使用，有什么错呢？</p>\n<h2 id=\"4-去中心化的元宇宙\"><a href=\"#4-去中心化的元宇宙\" class=\"headerlink\" title=\"4. 去中心化的元宇宙\"></a>4. 去中心化的元宇宙</h2><p>人生三问里，我是谁？我从哪里来？我到哪里去？</p>\n<p>不谈哲学，只说江湖规矩的话，英雄不问出处，最重要的还是我要到哪里去吧。</p>\n<p>那么元宇宙三问呢？未来是什么样，才是最重要的。</p>\n<p>所以，有没有一种避免科幻小说中的可怕未来的元宇宙呢？</p>\n<p>社会学，人类学，心理学我通通不懂。</p>\n<p>只谈自己熟悉的领域，我认为区块链作为底层技术的元宇宙是一个可以避免可怕未来的选项。</p>\n<p>区块链的特性以及它们能带来的好处前面已经提过。</p>\n<p>这里我想，像是写超短篇科幻小说一样描述这样的可能性供人参考：</p>\n<p>设定：2035年，正如科学家已经发现了多元宇宙（Multiverse），开启了新宇宙大探索时代一样，一群吃饱了没事儿干的程序员也有样学样的搞了个多元元宇宙（Multi-metaverse）。</p>\n<p>新闻：昨晚一个名为黑洞的黑客组织，在某元宇宙A中制造了一次黑洞攻击，该元宇宙中大量行星被直接吞噬，好在该元宇宙的双星伴随系统及时启动反制机制将黑洞攻击效果隔离在了伴星系统中并做了降维处理。其他的元宇宙及时作出反应，判断出这是一次黑客攻击，接受了这次降维处理，因此元宇宙A中的用户资产得到了多元元宇宙的继续认同和保护。</p>\n<p>场景：一个背影，坐在美丽而平静的湖边，似乎在思考着。镜头逐渐拉近，头上的脑机设备闪硕，脖子上有一个黑洞的纹身。镜头转向侧面，嘴唇蠕动，听见轻声的自言自语：“超新星爆炸？也许是个好主意。”</p>\n"},{"title":"关于终身学习","excerpt":"","date":"2019-11-21T16:15:00.000Z","_content":"\n很多人认为大学就是人这辈子最后学习的场所了，最多也是到博士。  \n仔细想想大学也就4年吧？上大学的时候是不是觉得4年时间还挺长的？  \n现在工作了，发现时间怎么变快了。一不小心工作的时间都够上2、3个大学了。","source":"_posts/关于终身学习.md","raw":"---\ntitle: 关于终身学习\ntags: []\nexcerpt: ''\ndate: 2019-11-22 00:15:00\n---\n\n很多人认为大学就是人这辈子最后学习的场所了，最多也是到博士。  \n仔细想想大学也就4年吧？上大学的时候是不是觉得4年时间还挺长的？  \n现在工作了，发现时间怎么变快了。一不小心工作的时间都够上2、3个大学了。","slug":"关于终身学习","published":1,"updated":"2021-07-29T15:17:08.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm0000q35ctd0tw6kns","content":"<p>很多人认为大学就是人这辈子最后学习的场所了，最多也是到博士。<br>仔细想想大学也就4年吧？上大学的时候是不是觉得4年时间还挺长的？<br>现在工作了，发现时间怎么变快了。一不小心工作的时间都够上2、3个大学了。</p>\n","site":{"data":{}},"more":"<p>很多人认为大学就是人这辈子最后学习的场所了，最多也是到博士。<br>仔细想想大学也就4年吧？上大学的时候是不是觉得4年时间还挺长的？<br>现在工作了，发现时间怎么变快了。一不小心工作的时间都够上2、3个大学了。</p>\n"},{"title":"在ubuntu上安装python3.8.2","excerpt":"","date":"2020-03-10T09:32:00.000Z","_content":"\n强迫症患者发现远程服务器的python版本不够update。 最新的python版本是3.8.2。   \n找到一个教程：  \n[https://tecadmin.net/install-python-3-8-ubuntu/](https://tecadmin.net/install-python-3-8-ubuntu/)  \n  \n安装以下包，用于compile最新的python。  \n sudo apt-get install build-essential checkinstall  \nsudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev \\\\ libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev  \n  \n然后去下载python 3.8.2，并解压  \ncd /opt  \nsudo wget https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz  \nsudo tar xzf Python-3.8.2.tgz  \n  \nmake 并安装  \n cd Python-3.8.2  \nsudo ./configure --enable-optimizations sudo make altinstall  \n  \n检查版本：  \n python3.8 -V Python-3.8.2  \n  \n删除掉安装包：  \ncd /opt sudo rm -f Python-3.8.2.tgz","source":"_posts/在ubuntu上安装python3-8-2.md","raw":"---\ntitle: 在ubuntu上安装python3.8.2\ntags: []\nexcerpt: ''\ndate: 2020-03-10 17:32:00\n---\n\n强迫症患者发现远程服务器的python版本不够update。 最新的python版本是3.8.2。   \n找到一个教程：  \n[https://tecadmin.net/install-python-3-8-ubuntu/](https://tecadmin.net/install-python-3-8-ubuntu/)  \n  \n安装以下包，用于compile最新的python。  \n sudo apt-get install build-essential checkinstall  \nsudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev \\\\ libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev  \n  \n然后去下载python 3.8.2，并解压  \ncd /opt  \nsudo wget https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz  \nsudo tar xzf Python-3.8.2.tgz  \n  \nmake 并安装  \n cd Python-3.8.2  \nsudo ./configure --enable-optimizations sudo make altinstall  \n  \n检查版本：  \n python3.8 -V Python-3.8.2  \n  \n删除掉安装包：  \ncd /opt sudo rm -f Python-3.8.2.tgz","slug":"在ubuntu上安装python3-8-2","published":1,"updated":"2021-07-29T15:17:08.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm1000r35ct0w1rb4wm","content":"<p>强迫症患者发现远程服务器的python版本不够update。 最新的python版本是3.8.2。 <br>找到一个教程：<br><a href=\"https://tecadmin.net/install-python-3-8-ubuntu/\">https://tecadmin.net/install-python-3-8-ubuntu/</a>  </p>\n<p>安装以下包，用于compile最新的python。<br> sudo apt-get install build-essential checkinstall<br>sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev \\ libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev  </p>\n<p>然后去下载python 3.8.2，并解压<br>cd &#x2F;opt<br>sudo wget <a href=\"https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz\">https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz</a><br>sudo tar xzf Python-3.8.2.tgz  </p>\n<p>make 并安装<br> cd Python-3.8.2<br>sudo .&#x2F;configure –enable-optimizations sudo make altinstall  </p>\n<p>检查版本：<br> python3.8 -V Python-3.8.2  </p>\n<p>删除掉安装包：<br>cd &#x2F;opt sudo rm -f Python-3.8.2.tgz</p>\n","site":{"data":{}},"more":"<p>强迫症患者发现远程服务器的python版本不够update。 最新的python版本是3.8.2。 <br>找到一个教程：<br><a href=\"https://tecadmin.net/install-python-3-8-ubuntu/\">https://tecadmin.net/install-python-3-8-ubuntu/</a>  </p>\n<p>安装以下包，用于compile最新的python。<br> sudo apt-get install build-essential checkinstall<br>sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev \\ libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev  </p>\n<p>然后去下载python 3.8.2，并解压<br>cd &#x2F;opt<br>sudo wget <a href=\"https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz\">https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz</a><br>sudo tar xzf Python-3.8.2.tgz  </p>\n<p>make 并安装<br> cd Python-3.8.2<br>sudo .&#x2F;configure –enable-optimizations sudo make altinstall  </p>\n<p>检查版本：<br> python3.8 -V Python-3.8.2  </p>\n<p>删除掉安装包：<br>cd &#x2F;opt sudo rm -f Python-3.8.2.tgz</p>\n"},{"title":"工作稍微空闲继续搞机","excerpt":"","date":"2019-11-21T17:41:00.000Z","_content":"\n前情提要：  \n国内的一个服务器始终无法搭建apache，反复尝试发现是IDC屏蔽了80端口。浪费了我大量时间（竖个中指）  \n现在终于通过配置apache的config，可以经过81端口访问web服务。  \n需求：  \n我打算拿这个服务器来做个图床。  \n流程是：网页端拖拽上传图片，系统按相应规则重命名图片，储存并建立目录，目录存储在数据库中。  \n这次就试着在github上去建立个repo，从头到尾自己做练练手看看。  \nrepo地址：  \n[https://github.com/hawken-im/myImgHost](https://github.com/hawken-im/myImgHost)  \n  \n第一步，因为是往自己的服务器上传，需要一个好的验证方式，我选择用github的api来做第三方授权登陆。查找了官方文档。主要在这里讲了：  \n[https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow)  \n  \n有了官方文档做参考，现在就去github里看看还有没有现成的代码可以用  \n  \nupdate：  \n需求变更：  \n经过研究，python不适合写web前端，我这个小需求也没必要整个什么Django框架。于是回到自己熟悉的PHP，又经过研究，PHP确实有点大势已去，没有重新捡起来的动力。于是又去研究Javascript，发现倒还可以用，可是我从来没用过，不是很想给自己挖新坑。  \n最后的结论是：我将在本地写上传脚本，直接从本地将图片上传至服务器并更新服务器端的数据库。一切从简。  \n  \nupdate：  \n再次改变实现方法：  \n建立了FTP服务器  \n将图片上传到服务器上某文件夹内  \n为了安全不直接上传到web文件夹  \n写一个自动同步的shell脚本，同步图片到web文件夹","source":"_posts/工作稍微空闲继续搞机.md","raw":"---\ntitle: 工作稍微空闲继续搞机\ntags: []\nexcerpt: ''\ndate: 2019-11-22 01:41:00\n---\n\n前情提要：  \n国内的一个服务器始终无法搭建apache，反复尝试发现是IDC屏蔽了80端口。浪费了我大量时间（竖个中指）  \n现在终于通过配置apache的config，可以经过81端口访问web服务。  \n需求：  \n我打算拿这个服务器来做个图床。  \n流程是：网页端拖拽上传图片，系统按相应规则重命名图片，储存并建立目录，目录存储在数据库中。  \n这次就试着在github上去建立个repo，从头到尾自己做练练手看看。  \nrepo地址：  \n[https://github.com/hawken-im/myImgHost](https://github.com/hawken-im/myImgHost)  \n  \n第一步，因为是往自己的服务器上传，需要一个好的验证方式，我选择用github的api来做第三方授权登陆。查找了官方文档。主要在这里讲了：  \n[https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow)  \n  \n有了官方文档做参考，现在就去github里看看还有没有现成的代码可以用  \n  \nupdate：  \n需求变更：  \n经过研究，python不适合写web前端，我这个小需求也没必要整个什么Django框架。于是回到自己熟悉的PHP，又经过研究，PHP确实有点大势已去，没有重新捡起来的动力。于是又去研究Javascript，发现倒还可以用，可是我从来没用过，不是很想给自己挖新坑。  \n最后的结论是：我将在本地写上传脚本，直接从本地将图片上传至服务器并更新服务器端的数据库。一切从简。  \n  \nupdate：  \n再次改变实现方法：  \n建立了FTP服务器  \n将图片上传到服务器上某文件夹内  \n为了安全不直接上传到web文件夹  \n写一个自动同步的shell脚本，同步图片到web文件夹","slug":"工作稍微空闲继续搞机","published":1,"updated":"2021-07-29T15:17:08.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm1000s35ctg30cf6ui","content":"<p>前情提要：<br>国内的一个服务器始终无法搭建apache，反复尝试发现是IDC屏蔽了80端口。浪费了我大量时间（竖个中指）<br>现在终于通过配置apache的config，可以经过81端口访问web服务。<br>需求：<br>我打算拿这个服务器来做个图床。<br>流程是：网页端拖拽上传图片，系统按相应规则重命名图片，储存并建立目录，目录存储在数据库中。<br>这次就试着在github上去建立个repo，从头到尾自己做练练手看看。<br>repo地址：<br><a href=\"https://github.com/hawken-im/myImgHost\">https://github.com/hawken-im/myImgHost</a>  </p>\n<p>第一步，因为是往自己的服务器上传，需要一个好的验证方式，我选择用github的api来做第三方授权登陆。查找了官方文档。主要在这里讲了：<br><a href=\"https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow</a>  </p>\n<p>有了官方文档做参考，现在就去github里看看还有没有现成的代码可以用  </p>\n<p>update：<br>需求变更：<br>经过研究，python不适合写web前端，我这个小需求也没必要整个什么Django框架。于是回到自己熟悉的PHP，又经过研究，PHP确实有点大势已去，没有重新捡起来的动力。于是又去研究Javascript，发现倒还可以用，可是我从来没用过，不是很想给自己挖新坑。<br>最后的结论是：我将在本地写上传脚本，直接从本地将图片上传至服务器并更新服务器端的数据库。一切从简。  </p>\n<p>update：<br>再次改变实现方法：<br>建立了FTP服务器<br>将图片上传到服务器上某文件夹内<br>为了安全不直接上传到web文件夹<br>写一个自动同步的shell脚本，同步图片到web文件夹</p>\n","site":{"data":{}},"more":"<p>前情提要：<br>国内的一个服务器始终无法搭建apache，反复尝试发现是IDC屏蔽了80端口。浪费了我大量时间（竖个中指）<br>现在终于通过配置apache的config，可以经过81端口访问web服务。<br>需求：<br>我打算拿这个服务器来做个图床。<br>流程是：网页端拖拽上传图片，系统按相应规则重命名图片，储存并建立目录，目录存储在数据库中。<br>这次就试着在github上去建立个repo，从头到尾自己做练练手看看。<br>repo地址：<br><a href=\"https://github.com/hawken-im/myImgHost\">https://github.com/hawken-im/myImgHost</a>  </p>\n<p>第一步，因为是往自己的服务器上传，需要一个好的验证方式，我选择用github的api来做第三方授权登陆。查找了官方文档。主要在这里讲了：<br><a href=\"https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow</a>  </p>\n<p>有了官方文档做参考，现在就去github里看看还有没有现成的代码可以用  </p>\n<p>update：<br>需求变更：<br>经过研究，python不适合写web前端，我这个小需求也没必要整个什么Django框架。于是回到自己熟悉的PHP，又经过研究，PHP确实有点大势已去，没有重新捡起来的动力。于是又去研究Javascript，发现倒还可以用，可是我从来没用过，不是很想给自己挖新坑。<br>最后的结论是：我将在本地写上传脚本，直接从本地将图片上传至服务器并更新服务器端的数据库。一切从简。  </p>\n<p>update：<br>再次改变实现方法：<br>建立了FTP服务器<br>将图片上传到服务器上某文件夹内<br>为了安全不直接上传到web文件夹<br>写一个自动同步的shell脚本，同步图片到web文件夹</p>\n"},{"title":"开始一边学一边用Python+Flask","excerpt":"","date":"2020-03-10T05:09:00.000Z","_content":"\n  \n官方教程就非常够用了，网上很多别的教程其实都是抄这个：  \n[https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04](https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04)  \n  \n\\---  \n打算做一个时间管理应用。  \n\n作为新手，先做比较熟悉的web端应用。APP以后再说吧。\n\n经过一番技术选型，打算用最轻量的Flask来搞。\n\n按照FLask官方网站一步一步在本地安装并运行通过。\n\n现在正在服务器上安装并运行。\n\n服务器的环境采用nginx+uwsgi+python 3.8\n\n一步一步开始吧。","source":"_posts/开始一边学一边用Python-Flask.md","raw":"---\ntitle: 开始一边学一边用Python+Flask\ntags: []\nexcerpt: ''\ndate: 2020-03-10 13:09:00\n---\n\n  \n官方教程就非常够用了，网上很多别的教程其实都是抄这个：  \n[https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04](https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04)  \n  \n\\---  \n打算做一个时间管理应用。  \n\n作为新手，先做比较熟悉的web端应用。APP以后再说吧。\n\n经过一番技术选型，打算用最轻量的Flask来搞。\n\n按照FLask官方网站一步一步在本地安装并运行通过。\n\n现在正在服务器上安装并运行。\n\n服务器的环境采用nginx+uwsgi+python 3.8\n\n一步一步开始吧。","slug":"开始一边学一边用Python-Flask","published":1,"updated":"2021-07-29T15:17:08.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm1000t35ct2hug6mox","content":"<p>官方教程就非常够用了，网上很多别的教程其实都是抄这个：<br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04\">https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04</a>  </p>\n<p>-–<br>打算做一个时间管理应用。  </p>\n<p>作为新手，先做比较熟悉的web端应用。APP以后再说吧。</p>\n<p>经过一番技术选型，打算用最轻量的Flask来搞。</p>\n<p>按照FLask官方网站一步一步在本地安装并运行通过。</p>\n<p>现在正在服务器上安装并运行。</p>\n<p>服务器的环境采用nginx+uwsgi+python 3.8</p>\n<p>一步一步开始吧。</p>\n","site":{"data":{}},"more":"<p>官方教程就非常够用了，网上很多别的教程其实都是抄这个：<br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04\">https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04</a>  </p>\n<p>-–<br>打算做一个时间管理应用。  </p>\n<p>作为新手，先做比较熟悉的web端应用。APP以后再说吧。</p>\n<p>经过一番技术选型，打算用最轻量的Flask来搞。</p>\n<p>按照FLask官方网站一步一步在本地安装并运行通过。</p>\n<p>现在正在服务器上安装并运行。</p>\n<p>服务器的环境采用nginx+uwsgi+python 3.8</p>\n<p>一步一步开始吧。</p>\n"},{"title":"开始部署，简单记录一下","excerpt":"","date":"2021-01-15T13:11:00.000Z","_content":"\n 采用这个教程：\n\nhttps://phoenixnap.com/kb/how-to-rsync-over-ssh\n\n就用rsync命令吧","source":"_posts/开始部署，简单记录一下.md","raw":"---\ntitle: 开始部署，简单记录一下\ntags: []\nexcerpt: ''\ndate: 2021-01-15 21:11:00\n---\n\n 采用这个教程：\n\nhttps://phoenixnap.com/kb/how-to-rsync-over-ssh\n\n就用rsync命令吧","slug":"开始部署，简单记录一下","published":1,"updated":"2021-07-29T15:17:08.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm4000u35ct8g4u20hq","content":"<p> 采用这个教程：</p>\n<p><a href=\"https://phoenixnap.com/kb/how-to-rsync-over-ssh\">https://phoenixnap.com/kb/how-to-rsync-over-ssh</a></p>\n<p>就用rsync命令吧</p>\n","site":{"data":{}},"more":"<p> 采用这个教程：</p>\n<p><a href=\"https://phoenixnap.com/kb/how-to-rsync-over-ssh\">https://phoenixnap.com/kb/how-to-rsync-over-ssh</a></p>\n<p>就用rsync命令吧</p>\n"},{"title":"搭建FTP服务器","excerpt":"","date":"2019-11-25T16:32:00.000Z","_content":"\n详细过程有点懒得写，链接一个教程  \n[https://www.howtoforge.com/tutorial/ubuntu-vsftpd/](https://www.howtoforge.com/tutorial/ubuntu-vsftpd/)  \n这里踩到第一个坑是被动模式  \n因为有防火墙，一定要被动模式才能连通  \n被动模式是这么一回事  \n[![](https://4.bp.blogspot.com/-0FCUXqtqBMc/XdwBf5cmwTI/AAAAAAAAGBM/xphTGV2Z4SoLMUbuJeKqZNIyKtZQPvJMQCK4BGAYYCw/s320/221601380466453.jpg)](http://4.bp.blogspot.com/-0FCUXqtqBMc/XdwBf5cmwTI/AAAAAAAAGBM/xphTGV2Z4SoLMUbuJeKqZNIyKtZQPvJMQCK4BGAYYCw/s1600/221601380466453.jpg)  \n  \n开启被动模式在filezilla的log中会看到：  \np.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px 'Helvetica Neue'; color: #008000; background-color: #ffffff} span.Apple-tab-span {white-space:pre}  \n\nResponse: 227 Entering Passive Mode (H1,H2,H3,H4,P1,P2).\n\n这里的P1\\*256+P2，就是当前被动模式的随机端口号  \n  \n防火墙中开启设定好的端口范围，再重启一下vsftp服务  \n搞定了","source":"_posts/搭建FTP服务器.md","raw":"---\ntitle: 搭建FTP服务器\ntags: []\nexcerpt: ''\ndate: 2019-11-26 00:32:00\n---\n\n详细过程有点懒得写，链接一个教程  \n[https://www.howtoforge.com/tutorial/ubuntu-vsftpd/](https://www.howtoforge.com/tutorial/ubuntu-vsftpd/)  \n这里踩到第一个坑是被动模式  \n因为有防火墙，一定要被动模式才能连通  \n被动模式是这么一回事  \n[![](https://4.bp.blogspot.com/-0FCUXqtqBMc/XdwBf5cmwTI/AAAAAAAAGBM/xphTGV2Z4SoLMUbuJeKqZNIyKtZQPvJMQCK4BGAYYCw/s320/221601380466453.jpg)](http://4.bp.blogspot.com/-0FCUXqtqBMc/XdwBf5cmwTI/AAAAAAAAGBM/xphTGV2Z4SoLMUbuJeKqZNIyKtZQPvJMQCK4BGAYYCw/s1600/221601380466453.jpg)  \n  \n开启被动模式在filezilla的log中会看到：  \np.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px 'Helvetica Neue'; color: #008000; background-color: #ffffff} span.Apple-tab-span {white-space:pre}  \n\nResponse: 227 Entering Passive Mode (H1,H2,H3,H4,P1,P2).\n\n这里的P1\\*256+P2，就是当前被动模式的随机端口号  \n  \n防火墙中开启设定好的端口范围，再重启一下vsftp服务  \n搞定了","slug":"搭建FTP服务器","published":1,"updated":"2021-07-29T15:17:08.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm5000v35ct10gjgwbk","content":"<p>详细过程有点懒得写，链接一个教程<br><a href=\"https://www.howtoforge.com/tutorial/ubuntu-vsftpd/\">https://www.howtoforge.com/tutorial/ubuntu-vsftpd/</a><br>这里踩到第一个坑是被动模式<br>因为有防火墙，一定要被动模式才能连通<br>被动模式是这么一回事<br><a href=\"http://4.bp.blogspot.com/-0FCUXqtqBMc/XdwBf5cmwTI/AAAAAAAAGBM/xphTGV2Z4SoLMUbuJeKqZNIyKtZQPvJMQCK4BGAYYCw/s1600/221601380466453.jpg\"><img src=\"https://4.bp.blogspot.com/-0FCUXqtqBMc/XdwBf5cmwTI/AAAAAAAAGBM/xphTGV2Z4SoLMUbuJeKqZNIyKtZQPvJMQCK4BGAYYCw/s320/221601380466453.jpg\"></a>  </p>\n<p>开启被动模式在filezilla的log中会看到：<br>p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px ‘Helvetica Neue’; color: #008000; background-color: #ffffff} span.Apple-tab-span {white-space:pre}  </p>\n<p>Response: 227 Entering Passive Mode (H1,H2,H3,H4,P1,P2).</p>\n<p>这里的P1*256+P2，就是当前被动模式的随机端口号  </p>\n<p>防火墙中开启设定好的端口范围，再重启一下vsftp服务<br>搞定了</p>\n","site":{"data":{}},"more":"<p>详细过程有点懒得写，链接一个教程<br><a href=\"https://www.howtoforge.com/tutorial/ubuntu-vsftpd/\">https://www.howtoforge.com/tutorial/ubuntu-vsftpd/</a><br>这里踩到第一个坑是被动模式<br>因为有防火墙，一定要被动模式才能连通<br>被动模式是这么一回事<br><a href=\"http://4.bp.blogspot.com/-0FCUXqtqBMc/XdwBf5cmwTI/AAAAAAAAGBM/xphTGV2Z4SoLMUbuJeKqZNIyKtZQPvJMQCK4BGAYYCw/s1600/221601380466453.jpg\"><img src=\"https://4.bp.blogspot.com/-0FCUXqtqBMc/XdwBf5cmwTI/AAAAAAAAGBM/xphTGV2Z4SoLMUbuJeKqZNIyKtZQPvJMQCK4BGAYYCw/s320/221601380466453.jpg\"></a>  </p>\n<p>开启被动模式在filezilla的log中会看到：<br>p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px ‘Helvetica Neue’; color: #008000; background-color: #ffffff} span.Apple-tab-span {white-space:pre}  </p>\n<p>Response: 227 Entering Passive Mode (H1,H2,H3,H4,P1,P2).</p>\n<p>这里的P1*256+P2，就是当前被动模式的随机端口号  </p>\n<p>防火墙中开启设定好的端口范围，再重启一下vsftp服务<br>搞定了</p>\n"},{"title":"敏捷学习方法论","date":"2022-03-03T11:01:24.000Z","_content":"\n# 浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。\n\n## 0. 浅尝则止未尝不可\n\n我们讨论学习方法的时候，常有的一个观念就是深入学习，认真钻研总是好的；不深入，肤浅，皮毛，浅尝则止都是贬义词。这篇文章我想说的一个观点是：\n\n浅尝则止未尝不可。\n\n特别是应用在编程的学习上，好读书不求甚解其实是一个不错的学习模式。再来我还会用敏捷思维来完善这种学习模式，形成一个学习方法论。\n\n<aside>\n☝ 特别注意：本文讨论的学习形式是通过阅读来学习的自学。这是本人和很多自学者所认可的一种高效的学习方式，至于这个观点，李笑来在《自学是一门手艺》中就有所阐述（1.3 只靠阅读习得新技能）。\n\n</aside>\n\n## 1. 想学好编程，想学多好？其实是学习的项目管理问题\n\n这里引入一个项目管理的概念：“项目管理三角形”；\n\n如图，想要追求质量，就要投入相应的成本和时间。如果工程范围再不进行限制，整个项目的成本将会爆炸式增长，最后根本收不了工。\n\n{% asset_img 0.png %}\n\n要学习一门技能，完全可以套用相同的模型。\n\n不管我在前面抖机灵说什么“浅尝则止未尝不可”，但学一门技能，谁又不想学得炉火纯青，达到一定造诣呢？\n\n在编程领域能达到什么样的学习成果，就要像项目管理那样考虑学习投入的平衡问题。我们把三角形的标注换成这样应该很好理解：\n\n{% asset_img 1.png %}\n\n完全套用这个三角形来建立学习方法又有些问题，因为在学习上我们的成本投入基本就是自己的时间，特别如果是通过阅读来学习，不是报各种学习班的话，金钱成本几乎可以忽略。\n\n我们在学习上的投入具体有哪些呢？\n\n- 首先一定是时间投入，花的时间越多自然会产生更多的学习成果，学界公认，无可辩驳。\n- 接下来要看我们投入时间的质量，其实就是专注度，如果熬更守夜，导致学习专注度不够，投入再多时间，质量一定是低下的。\n- 最后，是兴趣，兴趣可以影响我们的专注度；如果兴趣浓厚，在没有学习的时候我们的大脑都在思考和处理；如果兴趣浓厚，坐电梯都会思考电梯的控制算法，相当于一直在利用碎片时间进行学习。\n\n这三个投入是互相影响的，所以这个公式只好把三个因素乘起来：学习成本投入 = 时间*专注度*兴趣。给学习成本投入取个热血的名字，叫学力值吧，最终公式：\n\n```jsx\n学力值 = 时间*专注度*兴趣\n```\n\n于是三角形中的两边就合起来，画成一个正方形：\n\n{% asset_img 2.png %}\n\n那么还剩“范围”这一边，看看编程这个技能有可能涵盖的范围吧：\n\n首先从应用范围来看，\n\n学习编程可以用于数据分析与统计、人工智能、知识管理、游戏开发、文书处理、机械自动化控制……\n\n或者打开你的手机看看有多少 APP 就有多少不同的应用。\n\n而这些不同领域的应用需要的编程知识其实也不尽相同。\n\n再来看学习编程有可能涉及的知识范围：\n\n1. 编程基础知识，就是我们在各种“从入门到精通“的编程入门书里面学到的那些知识。举例如：\n    - 基本语法\n    - 数据类型\n    - 条件判断\n    - 循环、递归、嵌套等过程控制\n    - 面向对象的思想\n    - 链表、二叉树等各种数据结构\n    - 数据库的操作\n    \n    等等等等\n    \n2. 数理知识，就像刚刚提到的各种应用领域，在不同的应用领域可能会用到好多不同的数学知识：\n    1. 图论\n    2. 离散数学\n    3. 工程数学\n    4. 逻辑学\n    5. 统计学\n    \n    等等等等\n    \n3. 计算机系统的相关知识，因为编程是在计算机上操作，一些计算机的知识总要懂吧，至少都要学个打字和一些基础操作，在当今网络时代，还要学一些网络知识才能做出实用的软件应用。\n4. 英语！是的，英语技能对于学编程非常重要。会一点点英语才能看懂程序语法。而会很多英语，就可以看英文文档了。~~偷偷说：在文档里学习才是高效呢。要是读者大大们英语好，写编程教程的人会丢饭碗的（这句划掉）。~~\n\n综上，如果我们不注意控制学习的范围，我们需要投入的学力值就会去填无底洞了。\n\n那么投入编程学习前，请参考这个模型，根据自己的兴趣、自己能够投入的时间、自己想要应用的范围做一个规划吧。\n\n{% asset_img 3.png %}\n\n## 2. 要深度还是要广度？其实是投入与回报的平衡问题。\n\n前面我们讲了一个平面的学习模型，似乎只要投入学力值就可以很顺利获得学习成果。可事实仍然是编程学习者众，学成者寥寥。其实除了学习者自身的规划与投入，我的观察是，很多编程学习教程本身对范围没有一个好的把握，典型如：《某语言从入门到精通》、《N天掌握某语言》。\n\n回顾我们的学习模型：\n\n{% asset_img 3.png %}\n\n这种教程想到达的学习成果是精通、掌握（我理解这两个词是一个意思）。\n\n投入的时间是N天？一本书就从入门到精通？写书的是有多瞧不起自己的专业？\n\n这种书翻开会发现，大同小异：比如先是教你输出一个“Hello World”，然后就是基础知识比如语法、条件判断、循环、数据结构；再讲到面向对象编程；再强行切入网络、数据库这些劝退新人的环节，可能作者都知道后面没几个人在看了就更加不注意对新人的友好度。最后扔几个编程实例，也许就是所谓的精通或掌握了。\n\n<aside>\n☝ 广告插入：在 [XUE.cn](http://xue.cn) 上，唯一一本“从入门到精通”，是讲 Vim 的。Vim 是一款上手之后会很好用的文本编辑器。这种工具的掌握“从入门到精通”是没问题的。\n\n</aside>\n\n我们要意识到的是，范围是广度和深度两个维度构成的。\n\n而这两个维度对学力值投入的需求是不同的。\n\n比方说，我花五天就可能入门五种编程语言（广度），但是要精通一门语言（深度）需要花五年。\n\n学习的广度和投入的程度正相关，呈线性增长。如图所示：\n\n{% asset_img 4.png %}\n\n学习的深度和投入的程度也是正相关，但是呈对数增长。如图所示：\n\n{% asset_img 5.png %}\n\n而广度本身又会影响深度，这句结论有个很好理解的俗话叫做：\n\n触类旁通。就像我们经常观察到很多人学的东西多不说，学习新东西还能很快理解，抓住重点，找到学习方法，精进自己的技艺。\n\n{% asset_img 6.png %}\n\n因此容我再点题：逃避困难也可以。\n\n因为我们以产出的成果为导向来看，程序设计是一个开放性的课题。\n\n比如我们需要实现一个数据存储的需求，数据库可以，看起来很蠢的文本文件也可以。\n\n新手很头疼的递归啊排序啊这些算法是能解决很多性能问题，但在不需要性能的时候，写个很蠢的嵌套循环也可以。\n\n也许会有人质疑，想要把编程学好，认真，努力，迎难而上，为什么到你这就不可以了？\n\n我在本文表达的意思，主要还是针对学力的保护和高效利用，保护我们的兴趣，专注力，更高效地利用学习时间。如果我们提前遇到了高等级的怪兽，先走别的路就好，等我们学了更多，再回过来，常常能意外发现过去的困难并不是困难。\n\n因为程序的这种开放性特点，成了我们学习编程才享有的特权。我们为何不利用呢？\n\n## 3. 拥抱敏捷：敏捷学习方法\n\n本文开头提到，用项目管理的思维来学习编程。而项目管理的方法论是在上个世纪60年代建立起来的，适用于人类对各种工程项目进行大规模合作。\n\n软件开发行业的出现显然是晚于传统项目所在行业的。到了2001年，一群软件行业大佬相约去滑雪，互相吐槽抱怨了几句终于发现大家都不太认同旧时代的章法，于是滑雪之余顺便签署了一份“敏捷宣言“。\n\n敏捷宣言的原文以及配套的十二条原则可以在官网上看到（链接附后），经过多年的发展，敏捷方法已经形成了一套成熟的管理体系。这套体系大概长这样：\n\n{% asset_img 7.png %}\n\n不是开玩笑，这真就是传统工程项目和软件工程项目的最大区别。\n\n在传统工程中，如果要建造一辆汽车，需要一个零件一个零件生产，组装，最后完工才能投入使用。\n\n敏捷开发是这样：我先做滑板车，不需要考虑路况、安全、燃油、性能，满足代步的基本需求先。下一步升级可以把轮子放大，加上把手，就变成了踏板车。\n\n把用户正踩脚下滑着的滑板车轮子改大？每次软件更新不就是做类似的事吗？就是说每一个小的项目进度都可以单独成为一个独立运行的产品。\n\n说了这么多软件工程的项目管理方法，我跑题了吗？\n\n别忘了，我们在讨论编程的学习方法，编程的产出就是软件啊！\n\n是的，编程学习完全可以采用敏捷思维来进行！\n\n回顾我们上一节讨论的学习范围示意图。我们确实知道，一味的浅尝辄止和逃避困难，导致在一定范围内深度不足，就无法达成我们想要的学习成就。但经过本节的讨论，我们是不是可以试着，敏捷地，达成学习成就呢？\n\n即使刚入门的新手，抱着“想要做一辆跑车“的心态去学习，有错吗？为了实现这个远大的目标，我们知道要一步一步的来。\n\n那同样的一步，我们学着做一个滑板车还是做一个跑车的轮子？（也许直到放弃都用不上这个轮子）\n\n{% asset_img 8.png %}\n\n敏捷方法给软件行业带来了巨大改变，我认为敏捷也能够让我们的编程学习得到效率的提升。\n\n也即是我们探寻好的编程学习方法的最终目的：\n\n在一定学习范围内，用更少的学习投入，获得更多的学习成果。\n\n## 4. 学习成果的积累\n\n敏捷学习方法还会给编程学习者带来一个非常重要的好处。就是学习成果的积累！\n\n如果是按照传统的编程学习模式，从入门直到放弃，我们都没有造出一辆跑车，最后硬盘里会散布着堆积着一辆永远不可能完成的跑车的零件。\n\n如果按照敏捷方法来学习，我们一开始就能造出一辆滑板车，等我们最终造出跑车的时候，我们已经造了自行车、电瓶车、摩托车。\n\n是的，编程学习特别适合积累学习成果：\n\n1. 软件不会占用物理空间。\n\n放硬盘里，仓储成本不要太便宜。\n\n要是做木工，学徒时期做的东西只能当柴烧了。\n\n2. 代码可以复制粘贴。\n\n每一次产出学习成果都可以复用原来的代码做一个新的版本，并且保留上一个版本。\n\n要是做木工，做好的板凳不光很难改，就算修改也只能在原来的板凳上改。\n\n3. 可以修改更大的成熟的项目，放大我们的学习成果。\n\n举例如 Github，我们的学习成果甚至可以提交成为某个项目的贡献，我们也可以 fork 别人的项目作为自己的项目在上面修改。\n\n要是做木工，师傅是不会把他做好的成品家具给你练手的。\n\n4. 更容易应用自己的成果。\n\n我们可以把自己做的东西放到自己的网站上，打包放到手机上，就可以用了。就算是发布到应用商店也是我们可以承受的价格。\n\n~~要是做木工，我们做好的板凳也是可以自己用的。做得好的挂淘宝上卖？好像也可以？（划掉划掉）~~\n\n总之，应用敏捷学习方法，我们可以积累更多的学习成果，我们投入的宝贵学力可以取得更多的收获，更多的收获又可以激励我们的学习兴趣。\n\n怎么实践我们的敏捷学习方法呢？我模仿滑雪场那群大佬拟了一份敏捷编程学习宣言，包含了一套价值观和一些原则性的方法，希望对各自努力前行的自学者们有所帮助：\n\n---\n\n## 敏捷编程学习宣言\n\n作为自学者，我们身体力行地实践和探索更好的编程学习方法，提高了自己的学习效率。为帮助更多的人，我们建立这样一套价值观：\n\n保持兴趣和专注地高效学习 高于 大量投入时间的学习\n\n平衡学习范围的深度和广度 高于 大量投入学力追求深度\n\n在小范围内及时产出成果 高于 对知识点的全面掌握\n\n响应变化 高于 遵循计划\n\n以上，尽管右项有其价值，我们更重视左项的价值。\n\n### 敏捷编程学习方法\n\n基于以上的学习宣言，我们总结了一些可以遵循的原则来实践适合自己的敏捷学习方法：\n\n我们最重要的目标，是产出学习成果。\n\n寻找容易产生学习成果的编程语言入手。而这样的编程语言容易产生学习成果：开发环境搭建简单；编译和打包简单；发布和运行简单。\n\n寻找社区很活跃的编程语言入手。社区活跃意味着有很多方便的库可以用，很多热门项目可以参与，很多问题都能 Google 到答案。\n\n不用局限于一本书，可以同时阅读多本书籍。因为不同的书籍目录结构不同，学习范围的广度和深度都不同，我们可以根据自己的需要来搭配书籍。\n\n尽量选择电子书这类非实体的教材。便于我们用 Ctrl+F 来检索书籍，还可以 Ctrl+C Ctrl+V，大量提升学习成果的产生效率。\n\n用好官方文档，因为教材覆盖的范围有限，官方文档可以帮我们兜底，补充我们实现学习成果所需的知识点。编程语言基本上都有自己的官方网站，而官方网站基本上有官方文档。找到它们，在不懂的时候先搜索一下官方文档。\n\n用好 Google。在教材、官方文档都解决不了我们问题的时候，Google 是最后的兜底手段。希望你能尽量用 Google 来搜索自己需要的知识点，实在因为网络原因用不了，还可以试试 Bing。如果用某度，只会给我们带来学力的损失。\n\n遇到上面的办法都解决不了的困难，先绕开困难。条条大路通罗马，甚至小路也可以。实现一个可运行的程序有非常多的方法。\n\n最后，简洁为本，以最小可运行的产出为目标来学习，大胆略过书中用不上的知识点，减少不必要的学力投入。\n\n---\n\n附：\n\n敏捷宣言 [https://agilemanifesto.org/](https://agilemanifesto.org/)","source":"_posts/敏捷学习方法.md","raw":"---\ntitle: 敏捷学习方法论\ndate: 2022-03-03 19:01:24\ntags:\n---\n\n# 浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。\n\n## 0. 浅尝则止未尝不可\n\n我们讨论学习方法的时候，常有的一个观念就是深入学习，认真钻研总是好的；不深入，肤浅，皮毛，浅尝则止都是贬义词。这篇文章我想说的一个观点是：\n\n浅尝则止未尝不可。\n\n特别是应用在编程的学习上，好读书不求甚解其实是一个不错的学习模式。再来我还会用敏捷思维来完善这种学习模式，形成一个学习方法论。\n\n<aside>\n☝ 特别注意：本文讨论的学习形式是通过阅读来学习的自学。这是本人和很多自学者所认可的一种高效的学习方式，至于这个观点，李笑来在《自学是一门手艺》中就有所阐述（1.3 只靠阅读习得新技能）。\n\n</aside>\n\n## 1. 想学好编程，想学多好？其实是学习的项目管理问题\n\n这里引入一个项目管理的概念：“项目管理三角形”；\n\n如图，想要追求质量，就要投入相应的成本和时间。如果工程范围再不进行限制，整个项目的成本将会爆炸式增长，最后根本收不了工。\n\n{% asset_img 0.png %}\n\n要学习一门技能，完全可以套用相同的模型。\n\n不管我在前面抖机灵说什么“浅尝则止未尝不可”，但学一门技能，谁又不想学得炉火纯青，达到一定造诣呢？\n\n在编程领域能达到什么样的学习成果，就要像项目管理那样考虑学习投入的平衡问题。我们把三角形的标注换成这样应该很好理解：\n\n{% asset_img 1.png %}\n\n完全套用这个三角形来建立学习方法又有些问题，因为在学习上我们的成本投入基本就是自己的时间，特别如果是通过阅读来学习，不是报各种学习班的话，金钱成本几乎可以忽略。\n\n我们在学习上的投入具体有哪些呢？\n\n- 首先一定是时间投入，花的时间越多自然会产生更多的学习成果，学界公认，无可辩驳。\n- 接下来要看我们投入时间的质量，其实就是专注度，如果熬更守夜，导致学习专注度不够，投入再多时间，质量一定是低下的。\n- 最后，是兴趣，兴趣可以影响我们的专注度；如果兴趣浓厚，在没有学习的时候我们的大脑都在思考和处理；如果兴趣浓厚，坐电梯都会思考电梯的控制算法，相当于一直在利用碎片时间进行学习。\n\n这三个投入是互相影响的，所以这个公式只好把三个因素乘起来：学习成本投入 = 时间*专注度*兴趣。给学习成本投入取个热血的名字，叫学力值吧，最终公式：\n\n```jsx\n学力值 = 时间*专注度*兴趣\n```\n\n于是三角形中的两边就合起来，画成一个正方形：\n\n{% asset_img 2.png %}\n\n那么还剩“范围”这一边，看看编程这个技能有可能涵盖的范围吧：\n\n首先从应用范围来看，\n\n学习编程可以用于数据分析与统计、人工智能、知识管理、游戏开发、文书处理、机械自动化控制……\n\n或者打开你的手机看看有多少 APP 就有多少不同的应用。\n\n而这些不同领域的应用需要的编程知识其实也不尽相同。\n\n再来看学习编程有可能涉及的知识范围：\n\n1. 编程基础知识，就是我们在各种“从入门到精通“的编程入门书里面学到的那些知识。举例如：\n    - 基本语法\n    - 数据类型\n    - 条件判断\n    - 循环、递归、嵌套等过程控制\n    - 面向对象的思想\n    - 链表、二叉树等各种数据结构\n    - 数据库的操作\n    \n    等等等等\n    \n2. 数理知识，就像刚刚提到的各种应用领域，在不同的应用领域可能会用到好多不同的数学知识：\n    1. 图论\n    2. 离散数学\n    3. 工程数学\n    4. 逻辑学\n    5. 统计学\n    \n    等等等等\n    \n3. 计算机系统的相关知识，因为编程是在计算机上操作，一些计算机的知识总要懂吧，至少都要学个打字和一些基础操作，在当今网络时代，还要学一些网络知识才能做出实用的软件应用。\n4. 英语！是的，英语技能对于学编程非常重要。会一点点英语才能看懂程序语法。而会很多英语，就可以看英文文档了。~~偷偷说：在文档里学习才是高效呢。要是读者大大们英语好，写编程教程的人会丢饭碗的（这句划掉）。~~\n\n综上，如果我们不注意控制学习的范围，我们需要投入的学力值就会去填无底洞了。\n\n那么投入编程学习前，请参考这个模型，根据自己的兴趣、自己能够投入的时间、自己想要应用的范围做一个规划吧。\n\n{% asset_img 3.png %}\n\n## 2. 要深度还是要广度？其实是投入与回报的平衡问题。\n\n前面我们讲了一个平面的学习模型，似乎只要投入学力值就可以很顺利获得学习成果。可事实仍然是编程学习者众，学成者寥寥。其实除了学习者自身的规划与投入，我的观察是，很多编程学习教程本身对范围没有一个好的把握，典型如：《某语言从入门到精通》、《N天掌握某语言》。\n\n回顾我们的学习模型：\n\n{% asset_img 3.png %}\n\n这种教程想到达的学习成果是精通、掌握（我理解这两个词是一个意思）。\n\n投入的时间是N天？一本书就从入门到精通？写书的是有多瞧不起自己的专业？\n\n这种书翻开会发现，大同小异：比如先是教你输出一个“Hello World”，然后就是基础知识比如语法、条件判断、循环、数据结构；再讲到面向对象编程；再强行切入网络、数据库这些劝退新人的环节，可能作者都知道后面没几个人在看了就更加不注意对新人的友好度。最后扔几个编程实例，也许就是所谓的精通或掌握了。\n\n<aside>\n☝ 广告插入：在 [XUE.cn](http://xue.cn) 上，唯一一本“从入门到精通”，是讲 Vim 的。Vim 是一款上手之后会很好用的文本编辑器。这种工具的掌握“从入门到精通”是没问题的。\n\n</aside>\n\n我们要意识到的是，范围是广度和深度两个维度构成的。\n\n而这两个维度对学力值投入的需求是不同的。\n\n比方说，我花五天就可能入门五种编程语言（广度），但是要精通一门语言（深度）需要花五年。\n\n学习的广度和投入的程度正相关，呈线性增长。如图所示：\n\n{% asset_img 4.png %}\n\n学习的深度和投入的程度也是正相关，但是呈对数增长。如图所示：\n\n{% asset_img 5.png %}\n\n而广度本身又会影响深度，这句结论有个很好理解的俗话叫做：\n\n触类旁通。就像我们经常观察到很多人学的东西多不说，学习新东西还能很快理解，抓住重点，找到学习方法，精进自己的技艺。\n\n{% asset_img 6.png %}\n\n因此容我再点题：逃避困难也可以。\n\n因为我们以产出的成果为导向来看，程序设计是一个开放性的课题。\n\n比如我们需要实现一个数据存储的需求，数据库可以，看起来很蠢的文本文件也可以。\n\n新手很头疼的递归啊排序啊这些算法是能解决很多性能问题，但在不需要性能的时候，写个很蠢的嵌套循环也可以。\n\n也许会有人质疑，想要把编程学好，认真，努力，迎难而上，为什么到你这就不可以了？\n\n我在本文表达的意思，主要还是针对学力的保护和高效利用，保护我们的兴趣，专注力，更高效地利用学习时间。如果我们提前遇到了高等级的怪兽，先走别的路就好，等我们学了更多，再回过来，常常能意外发现过去的困难并不是困难。\n\n因为程序的这种开放性特点，成了我们学习编程才享有的特权。我们为何不利用呢？\n\n## 3. 拥抱敏捷：敏捷学习方法\n\n本文开头提到，用项目管理的思维来学习编程。而项目管理的方法论是在上个世纪60年代建立起来的，适用于人类对各种工程项目进行大规模合作。\n\n软件开发行业的出现显然是晚于传统项目所在行业的。到了2001年，一群软件行业大佬相约去滑雪，互相吐槽抱怨了几句终于发现大家都不太认同旧时代的章法，于是滑雪之余顺便签署了一份“敏捷宣言“。\n\n敏捷宣言的原文以及配套的十二条原则可以在官网上看到（链接附后），经过多年的发展，敏捷方法已经形成了一套成熟的管理体系。这套体系大概长这样：\n\n{% asset_img 7.png %}\n\n不是开玩笑，这真就是传统工程项目和软件工程项目的最大区别。\n\n在传统工程中，如果要建造一辆汽车，需要一个零件一个零件生产，组装，最后完工才能投入使用。\n\n敏捷开发是这样：我先做滑板车，不需要考虑路况、安全、燃油、性能，满足代步的基本需求先。下一步升级可以把轮子放大，加上把手，就变成了踏板车。\n\n把用户正踩脚下滑着的滑板车轮子改大？每次软件更新不就是做类似的事吗？就是说每一个小的项目进度都可以单独成为一个独立运行的产品。\n\n说了这么多软件工程的项目管理方法，我跑题了吗？\n\n别忘了，我们在讨论编程的学习方法，编程的产出就是软件啊！\n\n是的，编程学习完全可以采用敏捷思维来进行！\n\n回顾我们上一节讨论的学习范围示意图。我们确实知道，一味的浅尝辄止和逃避困难，导致在一定范围内深度不足，就无法达成我们想要的学习成就。但经过本节的讨论，我们是不是可以试着，敏捷地，达成学习成就呢？\n\n即使刚入门的新手，抱着“想要做一辆跑车“的心态去学习，有错吗？为了实现这个远大的目标，我们知道要一步一步的来。\n\n那同样的一步，我们学着做一个滑板车还是做一个跑车的轮子？（也许直到放弃都用不上这个轮子）\n\n{% asset_img 8.png %}\n\n敏捷方法给软件行业带来了巨大改变，我认为敏捷也能够让我们的编程学习得到效率的提升。\n\n也即是我们探寻好的编程学习方法的最终目的：\n\n在一定学习范围内，用更少的学习投入，获得更多的学习成果。\n\n## 4. 学习成果的积累\n\n敏捷学习方法还会给编程学习者带来一个非常重要的好处。就是学习成果的积累！\n\n如果是按照传统的编程学习模式，从入门直到放弃，我们都没有造出一辆跑车，最后硬盘里会散布着堆积着一辆永远不可能完成的跑车的零件。\n\n如果按照敏捷方法来学习，我们一开始就能造出一辆滑板车，等我们最终造出跑车的时候，我们已经造了自行车、电瓶车、摩托车。\n\n是的，编程学习特别适合积累学习成果：\n\n1. 软件不会占用物理空间。\n\n放硬盘里，仓储成本不要太便宜。\n\n要是做木工，学徒时期做的东西只能当柴烧了。\n\n2. 代码可以复制粘贴。\n\n每一次产出学习成果都可以复用原来的代码做一个新的版本，并且保留上一个版本。\n\n要是做木工，做好的板凳不光很难改，就算修改也只能在原来的板凳上改。\n\n3. 可以修改更大的成熟的项目，放大我们的学习成果。\n\n举例如 Github，我们的学习成果甚至可以提交成为某个项目的贡献，我们也可以 fork 别人的项目作为自己的项目在上面修改。\n\n要是做木工，师傅是不会把他做好的成品家具给你练手的。\n\n4. 更容易应用自己的成果。\n\n我们可以把自己做的东西放到自己的网站上，打包放到手机上，就可以用了。就算是发布到应用商店也是我们可以承受的价格。\n\n~~要是做木工，我们做好的板凳也是可以自己用的。做得好的挂淘宝上卖？好像也可以？（划掉划掉）~~\n\n总之，应用敏捷学习方法，我们可以积累更多的学习成果，我们投入的宝贵学力可以取得更多的收获，更多的收获又可以激励我们的学习兴趣。\n\n怎么实践我们的敏捷学习方法呢？我模仿滑雪场那群大佬拟了一份敏捷编程学习宣言，包含了一套价值观和一些原则性的方法，希望对各自努力前行的自学者们有所帮助：\n\n---\n\n## 敏捷编程学习宣言\n\n作为自学者，我们身体力行地实践和探索更好的编程学习方法，提高了自己的学习效率。为帮助更多的人，我们建立这样一套价值观：\n\n保持兴趣和专注地高效学习 高于 大量投入时间的学习\n\n平衡学习范围的深度和广度 高于 大量投入学力追求深度\n\n在小范围内及时产出成果 高于 对知识点的全面掌握\n\n响应变化 高于 遵循计划\n\n以上，尽管右项有其价值，我们更重视左项的价值。\n\n### 敏捷编程学习方法\n\n基于以上的学习宣言，我们总结了一些可以遵循的原则来实践适合自己的敏捷学习方法：\n\n我们最重要的目标，是产出学习成果。\n\n寻找容易产生学习成果的编程语言入手。而这样的编程语言容易产生学习成果：开发环境搭建简单；编译和打包简单；发布和运行简单。\n\n寻找社区很活跃的编程语言入手。社区活跃意味着有很多方便的库可以用，很多热门项目可以参与，很多问题都能 Google 到答案。\n\n不用局限于一本书，可以同时阅读多本书籍。因为不同的书籍目录结构不同，学习范围的广度和深度都不同，我们可以根据自己的需要来搭配书籍。\n\n尽量选择电子书这类非实体的教材。便于我们用 Ctrl+F 来检索书籍，还可以 Ctrl+C Ctrl+V，大量提升学习成果的产生效率。\n\n用好官方文档，因为教材覆盖的范围有限，官方文档可以帮我们兜底，补充我们实现学习成果所需的知识点。编程语言基本上都有自己的官方网站，而官方网站基本上有官方文档。找到它们，在不懂的时候先搜索一下官方文档。\n\n用好 Google。在教材、官方文档都解决不了我们问题的时候，Google 是最后的兜底手段。希望你能尽量用 Google 来搜索自己需要的知识点，实在因为网络原因用不了，还可以试试 Bing。如果用某度，只会给我们带来学力的损失。\n\n遇到上面的办法都解决不了的困难，先绕开困难。条条大路通罗马，甚至小路也可以。实现一个可运行的程序有非常多的方法。\n\n最后，简洁为本，以最小可运行的产出为目标来学习，大胆略过书中用不上的知识点，减少不必要的学力投入。\n\n---\n\n附：\n\n敏捷宣言 [https://agilemanifesto.org/](https://agilemanifesto.org/)","slug":"敏捷学习方法","published":1,"updated":"2022-03-03T11:14:56.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm5000w35cthy3d1j2m","content":"<h1 id=\"浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。\"><a href=\"#浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。\" class=\"headerlink\" title=\"浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。\"></a>浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。</h1><h2 id=\"0-浅尝则止未尝不可\"><a href=\"#0-浅尝则止未尝不可\" class=\"headerlink\" title=\"0. 浅尝则止未尝不可\"></a>0. 浅尝则止未尝不可</h2><p>我们讨论学习方法的时候，常有的一个观念就是深入学习，认真钻研总是好的；不深入，肤浅，皮毛，浅尝则止都是贬义词。这篇文章我想说的一个观点是：</p>\n<p>浅尝则止未尝不可。</p>\n<p>特别是应用在编程的学习上，好读书不求甚解其实是一个不错的学习模式。再来我还会用敏捷思维来完善这种学习模式，形成一个学习方法论。</p>\n<aside>\n☝ 特别注意：本文讨论的学习形式是通过阅读来学习的自学。这是本人和很多自学者所认可的一种高效的学习方式，至于这个观点，李笑来在《自学是一门手艺》中就有所阐述（1.3 只靠阅读习得新技能）。\n\n</aside>\n\n<h2 id=\"1-想学好编程，想学多好？其实是学习的项目管理问题\"><a href=\"#1-想学好编程，想学多好？其实是学习的项目管理问题\" class=\"headerlink\" title=\"1. 想学好编程，想学多好？其实是学习的项目管理问题\"></a>1. 想学好编程，想学多好？其实是学习的项目管理问题</h2><p>这里引入一个项目管理的概念：“项目管理三角形”；</p>\n<p>如图，想要追求质量，就要投入相应的成本和时间。如果工程范围再不进行限制，整个项目的成本将会爆炸式增长，最后根本收不了工。</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/0.png\" class=\"\">\n\n<p>要学习一门技能，完全可以套用相同的模型。</p>\n<p>不管我在前面抖机灵说什么“浅尝则止未尝不可”，但学一门技能，谁又不想学得炉火纯青，达到一定造诣呢？</p>\n<p>在编程领域能达到什么样的学习成果，就要像项目管理那样考虑学习投入的平衡问题。我们把三角形的标注换成这样应该很好理解：</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.png\" class=\"\">\n\n<p>完全套用这个三角形来建立学习方法又有些问题，因为在学习上我们的成本投入基本就是自己的时间，特别如果是通过阅读来学习，不是报各种学习班的话，金钱成本几乎可以忽略。</p>\n<p>我们在学习上的投入具体有哪些呢？</p>\n<ul>\n<li>首先一定是时间投入，花的时间越多自然会产生更多的学习成果，学界公认，无可辩驳。</li>\n<li>接下来要看我们投入时间的质量，其实就是专注度，如果熬更守夜，导致学习专注度不够，投入再多时间，质量一定是低下的。</li>\n<li>最后，是兴趣，兴趣可以影响我们的专注度；如果兴趣浓厚，在没有学习的时候我们的大脑都在思考和处理；如果兴趣浓厚，坐电梯都会思考电梯的控制算法，相当于一直在利用碎片时间进行学习。</li>\n</ul>\n<p>这三个投入是互相影响的，所以这个公式只好把三个因素乘起来：学习成本投入 &#x3D; 时间<em>专注度</em>兴趣。给学习成本投入取个热血的名字，叫学力值吧，最终公式：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">学力值 = 时间*专注度*兴趣</span><br></pre></td></tr></table></figure>\n\n<p>于是三角形中的两边就合起来，画成一个正方形：</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/2.png\" class=\"\">\n\n<p>那么还剩“范围”这一边，看看编程这个技能有可能涵盖的范围吧：</p>\n<p>首先从应用范围来看，</p>\n<p>学习编程可以用于数据分析与统计、人工智能、知识管理、游戏开发、文书处理、机械自动化控制……</p>\n<p>或者打开你的手机看看有多少 APP 就有多少不同的应用。</p>\n<p>而这些不同领域的应用需要的编程知识其实也不尽相同。</p>\n<p>再来看学习编程有可能涉及的知识范围：</p>\n<ol>\n<li><p>编程基础知识，就是我们在各种“从入门到精通“的编程入门书里面学到的那些知识。举例如：</p>\n<ul>\n<li>基本语法</li>\n<li>数据类型</li>\n<li>条件判断</li>\n<li>循环、递归、嵌套等过程控制</li>\n<li>面向对象的思想</li>\n<li>链表、二叉树等各种数据结构</li>\n<li>数据库的操作</li>\n</ul>\n<p> 等等等等\n </p>\n</li>\n<li><p>数理知识，就像刚刚提到的各种应用领域，在不同的应用领域可能会用到好多不同的数学知识：</p>\n<ol>\n<li>图论</li>\n<li>离散数学</li>\n<li>工程数学</li>\n<li>逻辑学</li>\n<li>统计学</li>\n</ol>\n<p> 等等等等\n </p>\n</li>\n<li><p>计算机系统的相关知识，因为编程是在计算机上操作，一些计算机的知识总要懂吧，至少都要学个打字和一些基础操作，在当今网络时代，还要学一些网络知识才能做出实用的软件应用。</p>\n</li>\n<li><p>英语！是的，英语技能对于学编程非常重要。会一点点英语才能看懂程序语法。而会很多英语，就可以看英文文档了。<del>偷偷说：在文档里学习才是高效呢。要是读者大大们英语好，写编程教程的人会丢饭碗的（这句划掉）。</del></p>\n</li>\n</ol>\n<p>综上，如果我们不注意控制学习的范围，我们需要投入的学力值就会去填无底洞了。</p>\n<p>那么投入编程学习前，请参考这个模型，根据自己的兴趣、自己能够投入的时间、自己想要应用的范围做一个规划吧。</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/3.png\" class=\"\">\n\n<h2 id=\"2-要深度还是要广度？其实是投入与回报的平衡问题。\"><a href=\"#2-要深度还是要广度？其实是投入与回报的平衡问题。\" class=\"headerlink\" title=\"2. 要深度还是要广度？其实是投入与回报的平衡问题。\"></a>2. 要深度还是要广度？其实是投入与回报的平衡问题。</h2><p>前面我们讲了一个平面的学习模型，似乎只要投入学力值就可以很顺利获得学习成果。可事实仍然是编程学习者众，学成者寥寥。其实除了学习者自身的规划与投入，我的观察是，很多编程学习教程本身对范围没有一个好的把握，典型如：《某语言从入门到精通》、《N天掌握某语言》。</p>\n<p>回顾我们的学习模型：</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/3.png\" class=\"\">\n\n<p>这种教程想到达的学习成果是精通、掌握（我理解这两个词是一个意思）。</p>\n<p>投入的时间是N天？一本书就从入门到精通？写书的是有多瞧不起自己的专业？</p>\n<p>这种书翻开会发现，大同小异：比如先是教你输出一个“Hello World”，然后就是基础知识比如语法、条件判断、循环、数据结构；再讲到面向对象编程；再强行切入网络、数据库这些劝退新人的环节，可能作者都知道后面没几个人在看了就更加不注意对新人的友好度。最后扔几个编程实例，也许就是所谓的精通或掌握了。</p>\n<aside>\n☝ 广告插入：在 [XUE.cn](http://xue.cn) 上，唯一一本“从入门到精通”，是讲 Vim 的。Vim 是一款上手之后会很好用的文本编辑器。这种工具的掌握“从入门到精通”是没问题的。\n\n</aside>\n\n<p>我们要意识到的是，范围是广度和深度两个维度构成的。</p>\n<p>而这两个维度对学力值投入的需求是不同的。</p>\n<p>比方说，我花五天就可能入门五种编程语言（广度），但是要精通一门语言（深度）需要花五年。</p>\n<p>学习的广度和投入的程度正相关，呈线性增长。如图所示：</p>\n\n\n<p>学习的深度和投入的程度也是正相关，但是呈对数增长。如图所示：</p>\n\n\n<p>而广度本身又会影响深度，这句结论有个很好理解的俗话叫做：</p>\n<p>触类旁通。就像我们经常观察到很多人学的东西多不说，学习新东西还能很快理解，抓住重点，找到学习方法，精进自己的技艺。</p>\n\n\n<p>因此容我再点题：逃避困难也可以。</p>\n<p>因为我们以产出的成果为导向来看，程序设计是一个开放性的课题。</p>\n<p>比如我们需要实现一个数据存储的需求，数据库可以，看起来很蠢的文本文件也可以。</p>\n<p>新手很头疼的递归啊排序啊这些算法是能解决很多性能问题，但在不需要性能的时候，写个很蠢的嵌套循环也可以。</p>\n<p>也许会有人质疑，想要把编程学好，认真，努力，迎难而上，为什么到你这就不可以了？</p>\n<p>我在本文表达的意思，主要还是针对学力的保护和高效利用，保护我们的兴趣，专注力，更高效地利用学习时间。如果我们提前遇到了高等级的怪兽，先走别的路就好，等我们学了更多，再回过来，常常能意外发现过去的困难并不是困难。</p>\n<p>因为程序的这种开放性特点，成了我们学习编程才享有的特权。我们为何不利用呢？</p>\n<h2 id=\"3-拥抱敏捷：敏捷学习方法\"><a href=\"#3-拥抱敏捷：敏捷学习方法\" class=\"headerlink\" title=\"3. 拥抱敏捷：敏捷学习方法\"></a>3. 拥抱敏捷：敏捷学习方法</h2><p>本文开头提到，用项目管理的思维来学习编程。而项目管理的方法论是在上个世纪60年代建立起来的，适用于人类对各种工程项目进行大规模合作。</p>\n<p>软件开发行业的出现显然是晚于传统项目所在行业的。到了2001年，一群软件行业大佬相约去滑雪，互相吐槽抱怨了几句终于发现大家都不太认同旧时代的章法，于是滑雪之余顺便签署了一份“敏捷宣言“。</p>\n<p>敏捷宣言的原文以及配套的十二条原则可以在官网上看到（链接附后），经过多年的发展，敏捷方法已经形成了一套成熟的管理体系。这套体系大概长这样：</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/7.png\" class=\"\">\n\n<p>不是开玩笑，这真就是传统工程项目和软件工程项目的最大区别。</p>\n<p>在传统工程中，如果要建造一辆汽车，需要一个零件一个零件生产，组装，最后完工才能投入使用。</p>\n<p>敏捷开发是这样：我先做滑板车，不需要考虑路况、安全、燃油、性能，满足代步的基本需求先。下一步升级可以把轮子放大，加上把手，就变成了踏板车。</p>\n<p>把用户正踩脚下滑着的滑板车轮子改大？每次软件更新不就是做类似的事吗？就是说每一个小的项目进度都可以单独成为一个独立运行的产品。</p>\n<p>说了这么多软件工程的项目管理方法，我跑题了吗？</p>\n<p>别忘了，我们在讨论编程的学习方法，编程的产出就是软件啊！</p>\n<p>是的，编程学习完全可以采用敏捷思维来进行！</p>\n<p>回顾我们上一节讨论的学习范围示意图。我们确实知道，一味的浅尝辄止和逃避困难，导致在一定范围内深度不足，就无法达成我们想要的学习成就。但经过本节的讨论，我们是不是可以试着，敏捷地，达成学习成就呢？</p>\n<p>即使刚入门的新手，抱着“想要做一辆跑车“的心态去学习，有错吗？为了实现这个远大的目标，我们知道要一步一步的来。</p>\n<p>那同样的一步，我们学着做一个滑板车还是做一个跑车的轮子？（也许直到放弃都用不上这个轮子）</p>\n\n\n<p>敏捷方法给软件行业带来了巨大改变，我认为敏捷也能够让我们的编程学习得到效率的提升。</p>\n<p>也即是我们探寻好的编程学习方法的最终目的：</p>\n<p>在一定学习范围内，用更少的学习投入，获得更多的学习成果。</p>\n<h2 id=\"4-学习成果的积累\"><a href=\"#4-学习成果的积累\" class=\"headerlink\" title=\"4. 学习成果的积累\"></a>4. 学习成果的积累</h2><p>敏捷学习方法还会给编程学习者带来一个非常重要的好处。就是学习成果的积累！</p>\n<p>如果是按照传统的编程学习模式，从入门直到放弃，我们都没有造出一辆跑车，最后硬盘里会散布着堆积着一辆永远不可能完成的跑车的零件。</p>\n<p>如果按照敏捷方法来学习，我们一开始就能造出一辆滑板车，等我们最终造出跑车的时候，我们已经造了自行车、电瓶车、摩托车。</p>\n<p>是的，编程学习特别适合积累学习成果：</p>\n<ol>\n<li>软件不会占用物理空间。</li>\n</ol>\n<p>放硬盘里，仓储成本不要太便宜。</p>\n<p>要是做木工，学徒时期做的东西只能当柴烧了。</p>\n<ol start=\"2\">\n<li>代码可以复制粘贴。</li>\n</ol>\n<p>每一次产出学习成果都可以复用原来的代码做一个新的版本，并且保留上一个版本。</p>\n<p>要是做木工，做好的板凳不光很难改，就算修改也只能在原来的板凳上改。</p>\n<ol start=\"3\">\n<li>可以修改更大的成熟的项目，放大我们的学习成果。</li>\n</ol>\n<p>举例如 Github，我们的学习成果甚至可以提交成为某个项目的贡献，我们也可以 fork 别人的项目作为自己的项目在上面修改。</p>\n<p>要是做木工，师傅是不会把他做好的成品家具给你练手的。</p>\n<ol start=\"4\">\n<li>更容易应用自己的成果。</li>\n</ol>\n<p>我们可以把自己做的东西放到自己的网站上，打包放到手机上，就可以用了。就算是发布到应用商店也是我们可以承受的价格。</p>\n<p><del>要是做木工，我们做好的板凳也是可以自己用的。做得好的挂淘宝上卖？好像也可以？（划掉划掉）</del></p>\n<p>总之，应用敏捷学习方法，我们可以积累更多的学习成果，我们投入的宝贵学力可以取得更多的收获，更多的收获又可以激励我们的学习兴趣。</p>\n<p>怎么实践我们的敏捷学习方法呢？我模仿滑雪场那群大佬拟了一份敏捷编程学习宣言，包含了一套价值观和一些原则性的方法，希望对各自努力前行的自学者们有所帮助：</p>\n<hr>\n<h2 id=\"敏捷编程学习宣言\"><a href=\"#敏捷编程学习宣言\" class=\"headerlink\" title=\"敏捷编程学习宣言\"></a>敏捷编程学习宣言</h2><p>作为自学者，我们身体力行地实践和探索更好的编程学习方法，提高了自己的学习效率。为帮助更多的人，我们建立这样一套价值观：</p>\n<p>保持兴趣和专注地高效学习 高于 大量投入时间的学习</p>\n<p>平衡学习范围的深度和广度 高于 大量投入学力追求深度</p>\n<p>在小范围内及时产出成果 高于 对知识点的全面掌握</p>\n<p>响应变化 高于 遵循计划</p>\n<p>以上，尽管右项有其价值，我们更重视左项的价值。</p>\n<h3 id=\"敏捷编程学习方法\"><a href=\"#敏捷编程学习方法\" class=\"headerlink\" title=\"敏捷编程学习方法\"></a>敏捷编程学习方法</h3><p>基于以上的学习宣言，我们总结了一些可以遵循的原则来实践适合自己的敏捷学习方法：</p>\n<p>我们最重要的目标，是产出学习成果。</p>\n<p>寻找容易产生学习成果的编程语言入手。而这样的编程语言容易产生学习成果：开发环境搭建简单；编译和打包简单；发布和运行简单。</p>\n<p>寻找社区很活跃的编程语言入手。社区活跃意味着有很多方便的库可以用，很多热门项目可以参与，很多问题都能 Google 到答案。</p>\n<p>不用局限于一本书，可以同时阅读多本书籍。因为不同的书籍目录结构不同，学习范围的广度和深度都不同，我们可以根据自己的需要来搭配书籍。</p>\n<p>尽量选择电子书这类非实体的教材。便于我们用 Ctrl+F 来检索书籍，还可以 Ctrl+C Ctrl+V，大量提升学习成果的产生效率。</p>\n<p>用好官方文档，因为教材覆盖的范围有限，官方文档可以帮我们兜底，补充我们实现学习成果所需的知识点。编程语言基本上都有自己的官方网站，而官方网站基本上有官方文档。找到它们，在不懂的时候先搜索一下官方文档。</p>\n<p>用好 Google。在教材、官方文档都解决不了我们问题的时候，Google 是最后的兜底手段。希望你能尽量用 Google 来搜索自己需要的知识点，实在因为网络原因用不了，还可以试试 Bing。如果用某度，只会给我们带来学力的损失。</p>\n<p>遇到上面的办法都解决不了的困难，先绕开困难。条条大路通罗马，甚至小路也可以。实现一个可运行的程序有非常多的方法。</p>\n<p>最后，简洁为本，以最小可运行的产出为目标来学习，大胆略过书中用不上的知识点，减少不必要的学力投入。</p>\n<hr>\n<p>附：</p>\n<p>敏捷宣言 <a href=\"https://agilemanifesto.org/\">https://agilemanifesto.org/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。\"><a href=\"#浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。\" class=\"headerlink\" title=\"浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。\"></a>浅尝则止是正义！逃避困难也可以！论敏捷学习方法在编程学习上的应用。</h1><h2 id=\"0-浅尝则止未尝不可\"><a href=\"#0-浅尝则止未尝不可\" class=\"headerlink\" title=\"0. 浅尝则止未尝不可\"></a>0. 浅尝则止未尝不可</h2><p>我们讨论学习方法的时候，常有的一个观念就是深入学习，认真钻研总是好的；不深入，肤浅，皮毛，浅尝则止都是贬义词。这篇文章我想说的一个观点是：</p>\n<p>浅尝则止未尝不可。</p>\n<p>特别是应用在编程的学习上，好读书不求甚解其实是一个不错的学习模式。再来我还会用敏捷思维来完善这种学习模式，形成一个学习方法论。</p>\n<aside>\n☝ 特别注意：本文讨论的学习形式是通过阅读来学习的自学。这是本人和很多自学者所认可的一种高效的学习方式，至于这个观点，李笑来在《自学是一门手艺》中就有所阐述（1.3 只靠阅读习得新技能）。\n\n</aside>\n\n<h2 id=\"1-想学好编程，想学多好？其实是学习的项目管理问题\"><a href=\"#1-想学好编程，想学多好？其实是学习的项目管理问题\" class=\"headerlink\" title=\"1. 想学好编程，想学多好？其实是学习的项目管理问题\"></a>1. 想学好编程，想学多好？其实是学习的项目管理问题</h2><p>这里引入一个项目管理的概念：“项目管理三角形”；</p>\n<p>如图，想要追求质量，就要投入相应的成本和时间。如果工程范围再不进行限制，整个项目的成本将会爆炸式增长，最后根本收不了工。</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/0.png\" class=\"\">\n\n<p>要学习一门技能，完全可以套用相同的模型。</p>\n<p>不管我在前面抖机灵说什么“浅尝则止未尝不可”，但学一门技能，谁又不想学得炉火纯青，达到一定造诣呢？</p>\n<p>在编程领域能达到什么样的学习成果，就要像项目管理那样考虑学习投入的平衡问题。我们把三角形的标注换成这样应该很好理解：</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.png\" class=\"\">\n\n<p>完全套用这个三角形来建立学习方法又有些问题，因为在学习上我们的成本投入基本就是自己的时间，特别如果是通过阅读来学习，不是报各种学习班的话，金钱成本几乎可以忽略。</p>\n<p>我们在学习上的投入具体有哪些呢？</p>\n<ul>\n<li>首先一定是时间投入，花的时间越多自然会产生更多的学习成果，学界公认，无可辩驳。</li>\n<li>接下来要看我们投入时间的质量，其实就是专注度，如果熬更守夜，导致学习专注度不够，投入再多时间，质量一定是低下的。</li>\n<li>最后，是兴趣，兴趣可以影响我们的专注度；如果兴趣浓厚，在没有学习的时候我们的大脑都在思考和处理；如果兴趣浓厚，坐电梯都会思考电梯的控制算法，相当于一直在利用碎片时间进行学习。</li>\n</ul>\n<p>这三个投入是互相影响的，所以这个公式只好把三个因素乘起来：学习成本投入 &#x3D; 时间<em>专注度</em>兴趣。给学习成本投入取个热血的名字，叫学力值吧，最终公式：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">学力值 = 时间*专注度*兴趣</span><br></pre></td></tr></table></figure>\n\n<p>于是三角形中的两边就合起来，画成一个正方形：</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/2.png\" class=\"\">\n\n<p>那么还剩“范围”这一边，看看编程这个技能有可能涵盖的范围吧：</p>\n<p>首先从应用范围来看，</p>\n<p>学习编程可以用于数据分析与统计、人工智能、知识管理、游戏开发、文书处理、机械自动化控制……</p>\n<p>或者打开你的手机看看有多少 APP 就有多少不同的应用。</p>\n<p>而这些不同领域的应用需要的编程知识其实也不尽相同。</p>\n<p>再来看学习编程有可能涉及的知识范围：</p>\n<ol>\n<li><p>编程基础知识，就是我们在各种“从入门到精通“的编程入门书里面学到的那些知识。举例如：</p>\n<ul>\n<li>基本语法</li>\n<li>数据类型</li>\n<li>条件判断</li>\n<li>循环、递归、嵌套等过程控制</li>\n<li>面向对象的思想</li>\n<li>链表、二叉树等各种数据结构</li>\n<li>数据库的操作</li>\n</ul>\n<p> 等等等等\n </p>\n</li>\n<li><p>数理知识，就像刚刚提到的各种应用领域，在不同的应用领域可能会用到好多不同的数学知识：</p>\n<ol>\n<li>图论</li>\n<li>离散数学</li>\n<li>工程数学</li>\n<li>逻辑学</li>\n<li>统计学</li>\n</ol>\n<p> 等等等等\n </p>\n</li>\n<li><p>计算机系统的相关知识，因为编程是在计算机上操作，一些计算机的知识总要懂吧，至少都要学个打字和一些基础操作，在当今网络时代，还要学一些网络知识才能做出实用的软件应用。</p>\n</li>\n<li><p>英语！是的，英语技能对于学编程非常重要。会一点点英语才能看懂程序语法。而会很多英语，就可以看英文文档了。<del>偷偷说：在文档里学习才是高效呢。要是读者大大们英语好，写编程教程的人会丢饭碗的（这句划掉）。</del></p>\n</li>\n</ol>\n<p>综上，如果我们不注意控制学习的范围，我们需要投入的学力值就会去填无底洞了。</p>\n<p>那么投入编程学习前，请参考这个模型，根据自己的兴趣、自己能够投入的时间、自己想要应用的范围做一个规划吧。</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/3.png\" class=\"\">\n\n<h2 id=\"2-要深度还是要广度？其实是投入与回报的平衡问题。\"><a href=\"#2-要深度还是要广度？其实是投入与回报的平衡问题。\" class=\"headerlink\" title=\"2. 要深度还是要广度？其实是投入与回报的平衡问题。\"></a>2. 要深度还是要广度？其实是投入与回报的平衡问题。</h2><p>前面我们讲了一个平面的学习模型，似乎只要投入学力值就可以很顺利获得学习成果。可事实仍然是编程学习者众，学成者寥寥。其实除了学习者自身的规划与投入，我的观察是，很多编程学习教程本身对范围没有一个好的把握，典型如：《某语言从入门到精通》、《N天掌握某语言》。</p>\n<p>回顾我们的学习模型：</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/3.png\" class=\"\">\n\n<p>这种教程想到达的学习成果是精通、掌握（我理解这两个词是一个意思）。</p>\n<p>投入的时间是N天？一本书就从入门到精通？写书的是有多瞧不起自己的专业？</p>\n<p>这种书翻开会发现，大同小异：比如先是教你输出一个“Hello World”，然后就是基础知识比如语法、条件判断、循环、数据结构；再讲到面向对象编程；再强行切入网络、数据库这些劝退新人的环节，可能作者都知道后面没几个人在看了就更加不注意对新人的友好度。最后扔几个编程实例，也许就是所谓的精通或掌握了。</p>\n<aside>\n☝ 广告插入：在 [XUE.cn](http://xue.cn) 上，唯一一本“从入门到精通”，是讲 Vim 的。Vim 是一款上手之后会很好用的文本编辑器。这种工具的掌握“从入门到精通”是没问题的。\n\n</aside>\n\n<p>我们要意识到的是，范围是广度和深度两个维度构成的。</p>\n<p>而这两个维度对学力值投入的需求是不同的。</p>\n<p>比方说，我花五天就可能入门五种编程语言（广度），但是要精通一门语言（深度）需要花五年。</p>\n<p>学习的广度和投入的程度正相关，呈线性增长。如图所示：</p>\n\n\n<p>学习的深度和投入的程度也是正相关，但是呈对数增长。如图所示：</p>\n\n\n<p>而广度本身又会影响深度，这句结论有个很好理解的俗话叫做：</p>\n<p>触类旁通。就像我们经常观察到很多人学的东西多不说，学习新东西还能很快理解，抓住重点，找到学习方法，精进自己的技艺。</p>\n\n\n<p>因此容我再点题：逃避困难也可以。</p>\n<p>因为我们以产出的成果为导向来看，程序设计是一个开放性的课题。</p>\n<p>比如我们需要实现一个数据存储的需求，数据库可以，看起来很蠢的文本文件也可以。</p>\n<p>新手很头疼的递归啊排序啊这些算法是能解决很多性能问题，但在不需要性能的时候，写个很蠢的嵌套循环也可以。</p>\n<p>也许会有人质疑，想要把编程学好，认真，努力，迎难而上，为什么到你这就不可以了？</p>\n<p>我在本文表达的意思，主要还是针对学力的保护和高效利用，保护我们的兴趣，专注力，更高效地利用学习时间。如果我们提前遇到了高等级的怪兽，先走别的路就好，等我们学了更多，再回过来，常常能意外发现过去的困难并不是困难。</p>\n<p>因为程序的这种开放性特点，成了我们学习编程才享有的特权。我们为何不利用呢？</p>\n<h2 id=\"3-拥抱敏捷：敏捷学习方法\"><a href=\"#3-拥抱敏捷：敏捷学习方法\" class=\"headerlink\" title=\"3. 拥抱敏捷：敏捷学习方法\"></a>3. 拥抱敏捷：敏捷学习方法</h2><p>本文开头提到，用项目管理的思维来学习编程。而项目管理的方法论是在上个世纪60年代建立起来的，适用于人类对各种工程项目进行大规模合作。</p>\n<p>软件开发行业的出现显然是晚于传统项目所在行业的。到了2001年，一群软件行业大佬相约去滑雪，互相吐槽抱怨了几句终于发现大家都不太认同旧时代的章法，于是滑雪之余顺便签署了一份“敏捷宣言“。</p>\n<p>敏捷宣言的原文以及配套的十二条原则可以在官网上看到（链接附后），经过多年的发展，敏捷方法已经形成了一套成熟的管理体系。这套体系大概长这样：</p>\n<img src=\"/2022/03/03/%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/7.png\" class=\"\">\n\n<p>不是开玩笑，这真就是传统工程项目和软件工程项目的最大区别。</p>\n<p>在传统工程中，如果要建造一辆汽车，需要一个零件一个零件生产，组装，最后完工才能投入使用。</p>\n<p>敏捷开发是这样：我先做滑板车，不需要考虑路况、安全、燃油、性能，满足代步的基本需求先。下一步升级可以把轮子放大，加上把手，就变成了踏板车。</p>\n<p>把用户正踩脚下滑着的滑板车轮子改大？每次软件更新不就是做类似的事吗？就是说每一个小的项目进度都可以单独成为一个独立运行的产品。</p>\n<p>说了这么多软件工程的项目管理方法，我跑题了吗？</p>\n<p>别忘了，我们在讨论编程的学习方法，编程的产出就是软件啊！</p>\n<p>是的，编程学习完全可以采用敏捷思维来进行！</p>\n<p>回顾我们上一节讨论的学习范围示意图。我们确实知道，一味的浅尝辄止和逃避困难，导致在一定范围内深度不足，就无法达成我们想要的学习成就。但经过本节的讨论，我们是不是可以试着，敏捷地，达成学习成就呢？</p>\n<p>即使刚入门的新手，抱着“想要做一辆跑车“的心态去学习，有错吗？为了实现这个远大的目标，我们知道要一步一步的来。</p>\n<p>那同样的一步，我们学着做一个滑板车还是做一个跑车的轮子？（也许直到放弃都用不上这个轮子）</p>\n\n\n<p>敏捷方法给软件行业带来了巨大改变，我认为敏捷也能够让我们的编程学习得到效率的提升。</p>\n<p>也即是我们探寻好的编程学习方法的最终目的：</p>\n<p>在一定学习范围内，用更少的学习投入，获得更多的学习成果。</p>\n<h2 id=\"4-学习成果的积累\"><a href=\"#4-学习成果的积累\" class=\"headerlink\" title=\"4. 学习成果的积累\"></a>4. 学习成果的积累</h2><p>敏捷学习方法还会给编程学习者带来一个非常重要的好处。就是学习成果的积累！</p>\n<p>如果是按照传统的编程学习模式，从入门直到放弃，我们都没有造出一辆跑车，最后硬盘里会散布着堆积着一辆永远不可能完成的跑车的零件。</p>\n<p>如果按照敏捷方法来学习，我们一开始就能造出一辆滑板车，等我们最终造出跑车的时候，我们已经造了自行车、电瓶车、摩托车。</p>\n<p>是的，编程学习特别适合积累学习成果：</p>\n<ol>\n<li>软件不会占用物理空间。</li>\n</ol>\n<p>放硬盘里，仓储成本不要太便宜。</p>\n<p>要是做木工，学徒时期做的东西只能当柴烧了。</p>\n<ol start=\"2\">\n<li>代码可以复制粘贴。</li>\n</ol>\n<p>每一次产出学习成果都可以复用原来的代码做一个新的版本，并且保留上一个版本。</p>\n<p>要是做木工，做好的板凳不光很难改，就算修改也只能在原来的板凳上改。</p>\n<ol start=\"3\">\n<li>可以修改更大的成熟的项目，放大我们的学习成果。</li>\n</ol>\n<p>举例如 Github，我们的学习成果甚至可以提交成为某个项目的贡献，我们也可以 fork 别人的项目作为自己的项目在上面修改。</p>\n<p>要是做木工，师傅是不会把他做好的成品家具给你练手的。</p>\n<ol start=\"4\">\n<li>更容易应用自己的成果。</li>\n</ol>\n<p>我们可以把自己做的东西放到自己的网站上，打包放到手机上，就可以用了。就算是发布到应用商店也是我们可以承受的价格。</p>\n<p><del>要是做木工，我们做好的板凳也是可以自己用的。做得好的挂淘宝上卖？好像也可以？（划掉划掉）</del></p>\n<p>总之，应用敏捷学习方法，我们可以积累更多的学习成果，我们投入的宝贵学力可以取得更多的收获，更多的收获又可以激励我们的学习兴趣。</p>\n<p>怎么实践我们的敏捷学习方法呢？我模仿滑雪场那群大佬拟了一份敏捷编程学习宣言，包含了一套价值观和一些原则性的方法，希望对各自努力前行的自学者们有所帮助：</p>\n<hr>\n<h2 id=\"敏捷编程学习宣言\"><a href=\"#敏捷编程学习宣言\" class=\"headerlink\" title=\"敏捷编程学习宣言\"></a>敏捷编程学习宣言</h2><p>作为自学者，我们身体力行地实践和探索更好的编程学习方法，提高了自己的学习效率。为帮助更多的人，我们建立这样一套价值观：</p>\n<p>保持兴趣和专注地高效学习 高于 大量投入时间的学习</p>\n<p>平衡学习范围的深度和广度 高于 大量投入学力追求深度</p>\n<p>在小范围内及时产出成果 高于 对知识点的全面掌握</p>\n<p>响应变化 高于 遵循计划</p>\n<p>以上，尽管右项有其价值，我们更重视左项的价值。</p>\n<h3 id=\"敏捷编程学习方法\"><a href=\"#敏捷编程学习方法\" class=\"headerlink\" title=\"敏捷编程学习方法\"></a>敏捷编程学习方法</h3><p>基于以上的学习宣言，我们总结了一些可以遵循的原则来实践适合自己的敏捷学习方法：</p>\n<p>我们最重要的目标，是产出学习成果。</p>\n<p>寻找容易产生学习成果的编程语言入手。而这样的编程语言容易产生学习成果：开发环境搭建简单；编译和打包简单；发布和运行简单。</p>\n<p>寻找社区很活跃的编程语言入手。社区活跃意味着有很多方便的库可以用，很多热门项目可以参与，很多问题都能 Google 到答案。</p>\n<p>不用局限于一本书，可以同时阅读多本书籍。因为不同的书籍目录结构不同，学习范围的广度和深度都不同，我们可以根据自己的需要来搭配书籍。</p>\n<p>尽量选择电子书这类非实体的教材。便于我们用 Ctrl+F 来检索书籍，还可以 Ctrl+C Ctrl+V，大量提升学习成果的产生效率。</p>\n<p>用好官方文档，因为教材覆盖的范围有限，官方文档可以帮我们兜底，补充我们实现学习成果所需的知识点。编程语言基本上都有自己的官方网站，而官方网站基本上有官方文档。找到它们，在不懂的时候先搜索一下官方文档。</p>\n<p>用好 Google。在教材、官方文档都解决不了我们问题的时候，Google 是最后的兜底手段。希望你能尽量用 Google 来搜索自己需要的知识点，实在因为网络原因用不了，还可以试试 Bing。如果用某度，只会给我们带来学力的损失。</p>\n<p>遇到上面的办法都解决不了的困难，先绕开困难。条条大路通罗马，甚至小路也可以。实现一个可运行的程序有非常多的方法。</p>\n<p>最后，简洁为本，以最小可运行的产出为目标来学习，大胆略过书中用不上的知识点，减少不必要的学力投入。</p>\n<hr>\n<p>附：</p>\n<p>敏捷宣言 <a href=\"https://agilemanifesto.org/\">https://agilemanifesto.org/</a></p>\n"},{"title":"测试我的图床","excerpt":"","date":"2019-11-25T17:21:00.000Z","_content":"\n假名记忆  \n\n[![](http://mih.hit.ooo:81/mih/img/nibongana.jpeg)](http://mih.hit.ooo:81/mih/img/nibongana.jpeg)","source":"_posts/测试我的图床.md","raw":"---\ntitle: 测试我的图床\ntags: []\nexcerpt: ''\ndate: 2019-11-26 01:21:00\n---\n\n假名记忆  \n\n[![](http://mih.hit.ooo:81/mih/img/nibongana.jpeg)](http://mih.hit.ooo:81/mih/img/nibongana.jpeg)","slug":"测试我的图床","published":1,"updated":"2021-07-29T15:17:08.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm6000x35cthgue37nm","content":"<p>假名记忆  </p>\n<p><a href=\"http://mih.hit.ooo:81/mih/img/nibongana.jpeg\"><img src=\"http://mih.hit.ooo:81/mih/img/nibongana.jpeg\"></a></p>\n","site":{"data":{}},"more":"<p>假名记忆  </p>\n<p><a href=\"http://mih.hit.ooo:81/mih/img/nibongana.jpeg\"><img src=\"http://mih.hit.ooo:81/mih/img/nibongana.jpeg\"></a></p>\n"},{"title":"用SSH来操作github","excerpt":"","date":"2019-12-14T13:55:00.000Z","_content":"\n最近用github很频繁。  \n是的，产品经理也要用github。  \n  \n用客户端登陆被嘲讽了。  \n而且其实客户端很局限，能用的功能比较少，决定还是用命令行来搞定。  \n  \n这一步全是参考github的官方文档，我把关键的文档链接贴出来：  \n  \n[https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)  \n  \n嗯，以上  \n  \n今晚读到了分支管理这里，成果是终于把公司的wiki clone到本地了。以后可以在本地编辑文档再用命令行push上去了。  \n  \n[https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552](https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552)","source":"_posts/用SSH来操作github.md","raw":"---\ntitle: 用SSH来操作github\ntags: []\nexcerpt: ''\ndate: 2019-12-14 21:55:00\n---\n\n最近用github很频繁。  \n是的，产品经理也要用github。  \n  \n用客户端登陆被嘲讽了。  \n而且其实客户端很局限，能用的功能比较少，决定还是用命令行来搞定。  \n  \n这一步全是参考github的官方文档，我把关键的文档链接贴出来：  \n  \n[https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)  \n  \n嗯，以上  \n  \n今晚读到了分支管理这里，成果是终于把公司的wiki clone到本地了。以后可以在本地编辑文档再用命令行push上去了。  \n  \n[https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552](https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552)","slug":"用SSH来操作github","published":1,"updated":"2021-07-29T15:17:08.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm6000y35ct1rbmchrf","content":"<p>最近用github很频繁。<br>是的，产品经理也要用github。  </p>\n<p>用客户端登陆被嘲讽了。<br>而且其实客户端很局限，能用的功能比较少，决定还是用命令行来搞定。  </p>\n<p>这一步全是参考github的官方文档，我把关键的文档链接贴出来：  </p>\n<p><a href=\"https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh\">https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh</a>  </p>\n<p>嗯，以上  </p>\n<p>今晚读到了分支管理这里，成果是终于把公司的wiki clone到本地了。以后可以在本地编辑文档再用命令行push上去了。  </p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552\">https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552</a></p>\n","site":{"data":{}},"more":"<p>最近用github很频繁。<br>是的，产品经理也要用github。  </p>\n<p>用客户端登陆被嘲讽了。<br>而且其实客户端很局限，能用的功能比较少，决定还是用命令行来搞定。  </p>\n<p>这一步全是参考github的官方文档，我把关键的文档链接贴出来：  </p>\n<p><a href=\"https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh\">https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh</a>  </p>\n<p>嗯，以上  </p>\n<p>今晚读到了分支管理这里，成果是终于把公司的wiki clone到本地了。以后可以在本地编辑文档再用命令行push上去了。  </p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552\">https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552</a></p>\n"},{"title":"登海外的服务器太慢了所以又装了个Mosh","excerpt":"","date":"2020-03-10T11:11:00.000Z","_content":"\n装mosh的时候遇到locale的坑，这里记录一下：  \n提示跟locale相关的错误，可以同时在服务器端和本地输入locale 命令看一下自己的locale list是不是UTF-8一套的。  \n如果不是就需要用export命令修改一下。  \n我修改了本地locale 为en\\_US.UTF-8，问题得到了解决。  \n  \n命令  \nlocale 查看当前locale  \n  \nexport LANG=en\\_US.UTF-8  \nexport LC\\_ALL=en\\_US.UTF-8  \n之后就可以mosh了","source":"_posts/登海外的服务器太慢了所以又装了个Mosh.md","raw":"---\ntitle: 登海外的服务器太慢了所以又装了个Mosh\ntags: []\nexcerpt: ''\ndate: 2020-03-10 19:11:00\n---\n\n装mosh的时候遇到locale的坑，这里记录一下：  \n提示跟locale相关的错误，可以同时在服务器端和本地输入locale 命令看一下自己的locale list是不是UTF-8一套的。  \n如果不是就需要用export命令修改一下。  \n我修改了本地locale 为en\\_US.UTF-8，问题得到了解决。  \n  \n命令  \nlocale 查看当前locale  \n  \nexport LANG=en\\_US.UTF-8  \nexport LC\\_ALL=en\\_US.UTF-8  \n之后就可以mosh了","slug":"登海外的服务器太慢了所以又装了个Mosh","published":1,"updated":"2021-07-29T15:17:08.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm7000z35ct371d1hq2","content":"<p>装mosh的时候遇到locale的坑，这里记录一下：<br>提示跟locale相关的错误，可以同时在服务器端和本地输入locale 命令看一下自己的locale list是不是UTF-8一套的。<br>如果不是就需要用export命令修改一下。<br>我修改了本地locale 为en_US.UTF-8，问题得到了解决。  </p>\n<p>命令<br>locale 查看当前locale  </p>\n<p>export LANG&#x3D;en_US.UTF-8<br>export LC_ALL&#x3D;en_US.UTF-8<br>之后就可以mosh了</p>\n","site":{"data":{}},"more":"<p>装mosh的时候遇到locale的坑，这里记录一下：<br>提示跟locale相关的错误，可以同时在服务器端和本地输入locale 命令看一下自己的locale list是不是UTF-8一套的。<br>如果不是就需要用export命令修改一下。<br>我修改了本地locale 为en_US.UTF-8，问题得到了解决。  </p>\n<p>命令<br>locale 查看当前locale  </p>\n<p>export LANG&#x3D;en_US.UTF-8<br>export LC_ALL&#x3D;en_US.UTF-8<br>之后就可以mosh了</p>\n"},{"title":"给服务器开通BBR","excerpt":"","date":"2019-12-14T11:13:00.000Z","_content":"\nGoogle developed a TCP Congestion Control Algorithm (CCA) called TCP Bottleneck Bandwidth and RRT (BBR) that overcomes many of the issues found in both Reno and CUBIC (the default CCAs). This new algorithm not only achieves significant bandwidth improvements, but also lower latency. TCP BBR is already employed with google.com servers, and now you can make it happen--so long as your Linux machine is running kernel 4.9 or newer.","source":"_posts/给服务器开通BBR.md","raw":"---\ntitle: 给服务器开通BBR\ntags: []\nexcerpt: ''\ndate: 2019-12-14 19:13:00\n---\n\nGoogle developed a TCP Congestion Control Algorithm (CCA) called TCP Bottleneck Bandwidth and RRT (BBR) that overcomes many of the issues found in both Reno and CUBIC (the default CCAs). This new algorithm not only achieves significant bandwidth improvements, but also lower latency. TCP BBR is already employed with google.com servers, and now you can make it happen--so long as your Linux machine is running kernel 4.9 or newer.","slug":"给服务器开通BBR","published":1,"updated":"2021-07-29T15:17:08.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm7001035ct3j733pd5","content":"<p>Google developed a TCP Congestion Control Algorithm (CCA) called TCP Bottleneck Bandwidth and RRT (BBR) that overcomes many of the issues found in both Reno and CUBIC (the default CCAs). This new algorithm not only achieves significant bandwidth improvements, but also lower latency. TCP BBR is already employed with google.com servers, and now you can make it happen–so long as your Linux machine is running kernel 4.9 or newer.</p>\n","site":{"data":{}},"more":"<p>Google developed a TCP Congestion Control Algorithm (CCA) called TCP Bottleneck Bandwidth and RRT (BBR) that overcomes many of the issues found in both Reno and CUBIC (the default CCAs). This new algorithm not only achieves significant bandwidth improvements, but also lower latency. TCP BBR is already employed with google.com servers, and now you can make it happen–so long as your Linux machine is running kernel 4.9 or newer.</p>\n"},{"title":"继续设置了ssl certificate","excerpt":"","date":"2020-03-20T15:23:00.000Z","_content":"\n现在只能通过https来登录  \n[https://linoxide.com/linux-how-to/install-letsencrypt-ubuntu/](https://linoxide.com/linux-how-to/install-letsencrypt-ubuntu/)","source":"_posts/继续设置了ssl-certificate.md","raw":"---\ntitle: 继续设置了ssl certificate\ntags: []\nexcerpt: ''\ndate: 2020-03-20 23:23:00\n---\n\n现在只能通过https来登录  \n[https://linoxide.com/linux-how-to/install-letsencrypt-ubuntu/](https://linoxide.com/linux-how-to/install-letsencrypt-ubuntu/)","slug":"继续设置了ssl-certificate","published":1,"updated":"2021-07-29T15:17:08.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm8001135cta4wobvub","content":"<p>现在只能通过https来登录<br><a href=\"https://linoxide.com/linux-how-to/install-letsencrypt-ubuntu/\">https://linoxide.com/linux-how-to/install-letsencrypt-ubuntu/</a></p>\n","site":{"data":{}},"more":"<p>现在只能通过https来登录<br><a href=\"https://linoxide.com/linux-how-to/install-letsencrypt-ubuntu/\">https://linoxide.com/linux-how-to/install-letsencrypt-ubuntu/</a></p>\n"},{"title":"采用zsh作为mac的默认shell","excerpt":"","date":"2019-11-23T17:14:00.000Z","_content":"\nmac升级Catalina后，默认的shell是zsh，以前是bash  \n本人本来就是新手小白，就算用了很久的bash，每次命令行输入都要上网查一下  \n这次将就mac，换成了据说很厉害的zsh  \n笔记如下：  \n先查看一下电脑上都有些什么shell：  \ncat /etc/shells  \n再看看当前再运行什么shell：  \necho $SHELL  \n确实还在用bash  \n改成zsh：  \nchsh -s /bin/zsh  \n完毕","source":"_posts/采用zsh作为mac的默认shell.md","raw":"---\ntitle: 采用zsh作为mac的默认shell\ntags: []\nexcerpt: ''\ndate: 2019-11-24 01:14:00\n---\n\nmac升级Catalina后，默认的shell是zsh，以前是bash  \n本人本来就是新手小白，就算用了很久的bash，每次命令行输入都要上网查一下  \n这次将就mac，换成了据说很厉害的zsh  \n笔记如下：  \n先查看一下电脑上都有些什么shell：  \ncat /etc/shells  \n再看看当前再运行什么shell：  \necho $SHELL  \n确实还在用bash  \n改成zsh：  \nchsh -s /bin/zsh  \n完毕","slug":"采用zsh作为mac的默认shell","published":1,"updated":"2021-07-29T15:17:08.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5txekm8001235ct3d0p69b7","content":"<p>mac升级Catalina后，默认的shell是zsh，以前是bash<br>本人本来就是新手小白，就算用了很久的bash，每次命令行输入都要上网查一下<br>这次将就mac，换成了据说很厉害的zsh<br>笔记如下：<br>先查看一下电脑上都有些什么shell：<br>cat &#x2F;etc&#x2F;shells<br>再看看当前再运行什么shell：<br>echo $SHELL<br>确实还在用bash<br>改成zsh：<br>chsh -s &#x2F;bin&#x2F;zsh<br>完毕</p>\n","site":{"data":{}},"more":"<p>mac升级Catalina后，默认的shell是zsh，以前是bash<br>本人本来就是新手小白，就算用了很久的bash，每次命令行输入都要上网查一下<br>这次将就mac，换成了据说很厉害的zsh<br>笔记如下：<br>先查看一下电脑上都有些什么shell：<br>cat &#x2F;etc&#x2F;shells<br>再看看当前再运行什么shell：<br>echo $SHELL<br>确实还在用bash<br>改成zsh：<br>chsh -s &#x2F;bin&#x2F;zsh<br>完毕</p>\n"}],"PostAsset":[{"_id":"source/_posts/Go语言写的进度条bot-1/blocks.png","post":"cl5txekll000735ct9l2o7le1","slug":"blocks.png","modified":1,"renderable":1},{"_id":"source/_posts/Go语言写的进度条bot-3/struct copy.png","post":"cl5txekln000935ctaa3zb2kc","slug":"struct copy.png","modified":1,"renderable":1},{"_id":"source/_posts/Go语言写的进度条bot-3/struct.png","post":"cl5txekln000935ctaa3zb2kc","slug":"struct.png","modified":1,"renderable":1},{"_id":"source/_posts/Go语言写的进度条bot/author_danicat.png","post":"cl5txekln000a35ct2168a3oj","slug":"author_danicat.png","modified":1,"renderable":1},{"_id":"source/_posts/Go语言写的进度条bot/groupID.png","post":"cl5txekln000a35ct2168a3oj","slug":"groupID.png","modified":1,"renderable":1},{"_id":"source/_posts/Go语言写的进度条bot/portnumber.png","post":"cl5txekln000a35ct2168a3oj","slug":"portnumber.png","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/dingjinhao.jpg","post":"cl5txeklv000j35ctakz7d2eq","slug":"dingjinhao.jpg","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/hand.jpg","post":"cl5txeklv000j35ctakz7d2eq","slug":"hand.jpg","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/homo.png","post":"cl5txeklv000j35ctakz7d2eq","slug":"homo.png","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/lesson1.png","post":"cl5txeklv000j35ctakz7d2eq","slug":"lesson1.png","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/lsk1.jpg","post":"cl5txeklv000j35ctakz7d2eq","slug":"lsk1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/lsk2.jpg","post":"cl5txeklv000j35ctakz7d2eq","slug":"lsk2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/qrp.png","post":"cl5txeklv000j35ctakz7d2eq","slug":"qrp.png","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/road.png","post":"cl5txeklv000j35ctakz7d2eq","slug":"road.png","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/sd2.jpg","post":"cl5txeklv000j35ctakz7d2eq","slug":"sd2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/sd3.jpg","post":"cl5txeklv000j35ctakz7d2eq","slug":"sd3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/timeline.jpg","post":"cl5txeklv000j35ctakz7d2eq","slug":"timeline.jpg","modified":1,"renderable":1},{"_id":"source/_posts/itsgettingbadorbetter/yxp.jpg","post":"cl5txeklv000j35ctakz7d2eq","slug":"yxp.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/cookie.png","post":"cl5txeklw000k35cthgln1o6a","slug":"cookie.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/cookievalue.png","post":"cl5txeklw000k35cthgln1o6a","slug":"cookievalue.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/credit.png","post":"cl5txeklw000k35cthgln1o6a","slug":"credit.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/csrf.png","post":"cl5txeklw000k35cthgln1o6a","slug":"csrf.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/f12.jpg","post":"cl5txeklw000k35cthgln1o6a","slug":"f12.jpg","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/f122.png","post":"cl5txeklw000k35cthgln1o6a","slug":"f122.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/guifiles.png","post":"cl5txeklw000k35cthgln1o6a","slug":"guifiles.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/input.png","post":"cl5txeklw000k35cthgln1o6a","slug":"input.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/neatconverter.png","post":"cl5txeklw000k35cthgln1o6a","slug":"neatconverter.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/network.png","post":"cl5txeklw000k35cthgln1o6a","slug":"network.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/setlocation.png","post":"cl5txeklw000k35cthgln1o6a","slug":"setlocation.png","modified":1,"renderable":1},{"_id":"source/_posts/kindledownload/steps.png","post":"cl5txeklw000k35cthgln1o6a","slug":"steps.png","modified":1,"renderable":1},{"_id":"source/_posts/run-quorum-on-ubuntu/ScreenShot.png","post":"cl5txekly000m35ct0vw3dp11","slug":"ScreenShot.png","modified":1,"renderable":1},{"_id":"source/_posts/run-quorum-on-ubuntu/dist.png","post":"cl5txekly000m35ct0vw3dp11","slug":"dist.png","modified":1,"renderable":1},{"_id":"source/_posts/run-quorum-on-ubuntu/go.png","post":"cl5txekly000m35ct0vw3dp11","slug":"go.png","modified":1,"renderable":1},{"_id":"source/_posts/run-quorum-on-ubuntu/green.png","post":"cl5txekly000m35ct0vw3dp11","slug":"green.png","modified":1,"renderable":1},{"_id":"source/_posts/run-quorum-on-ubuntu/outterpeer.png","post":"cl5txekly000m35ct0vw3dp11","slug":"outterpeer.png","modified":1,"renderable":1},{"_id":"source/_posts/run-quorum-on-ubuntu/peerinfo.png","post":"cl5txekly000m35ct0vw3dp11","slug":"peerinfo.png","modified":1,"renderable":1},{"_id":"source/_posts/run-quorum-on-ubuntu/successed.png","post":"cl5txekly000m35ct0vw3dp11","slug":"successed.png","modified":1,"renderable":1},{"_id":"source/_posts/敏捷学习方法/0.png","post":"cl5txekm5000w35cthy3d1j2m","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/敏捷学习方法/1.png","post":"cl5txekm5000w35cthy3d1j2m","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/敏捷学习方法/2.png","post":"cl5txekm5000w35cthy3d1j2m","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/敏捷学习方法/3.png","post":"cl5txekm5000w35cthy3d1j2m","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/敏捷学习方法/4.jpg","post":"cl5txekm5000w35cthy3d1j2m","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/敏捷学习方法/5.jpg","post":"cl5txekm5000w35cthy3d1j2m","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/敏捷学习方法/6.jpg","post":"cl5txekm5000w35cthy3d1j2m","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/敏捷学习方法/7.png","post":"cl5txekm5000w35cthy3d1j2m","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/敏捷学习方法/8.jpg","post":"cl5txekm5000w35cthy3d1j2m","slug":"8.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}